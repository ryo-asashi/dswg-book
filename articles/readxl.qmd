---
title: "readxl"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc-depth: 4
    fig-width: 6
    fig-height: 5
references:
- id: BIB_GITHUB
  type: article
  title: "GitHub - tidyverse/readxl: Read excel files (.xls and .xlsx) into R"
  URL: https://github.com/tidyverse/readxl
  author:
    - readxl authors
  issued:
    - year: 2023
  accessed:
    - year: 2024
      month: 6
      day: 24
- id: BIB_DOC_SHEET-GEOMETRY
  type: article
  title: Sheet Geometry
  URL: https://readxl.tidyverse.org/articles/sheet-geometry.html
  author:
    - readxl authors
  issued:
    - year: 2023
  accessed:
    - year: 2024
      month: 6
      day: 24
- id: BIB_DOC_CELL-SPECIFICATION
  type: article
  title: Specify cells for reading
  URL: https://readxl.tidyverse.org/reference/cell-specification.html
  author:
    - readxl authors
  issued:
    - year: 2023
  accessed:
    - year: 2024
      month: 6
      day: 24
- id: BIB_JOURNAL_IAJ
  type: article-journal
  container-title: アクチュアリージャーナル
  publisher: 日本アクチュアリー会
  volume: '112'
  page: 1-88
  title: Rを用いたデータの可視化技術 解説書
  author:
    - データサイエンス関連基礎調査WG
  issued:
    - year: 2020
      month: 9
nocite: |
  @*
---

```{r setup_qmd, include=FALSE, output=FALSE}
knitr::opts_chunk$set(echo = TRUE)
if (!require(readxl)) install.packages('readxl')
if (!require(ggplot2)) install.packages('ggplot2')
if (!require(reshape2)) install.packages('reshape2')
```

```{css, echo=FALSE}
.output-jp > code {
/*一部日本語出力があるチャンクで日本語と英字の幅が揃わずに表示がずれるため、CSSでフォントを変更することで表示を揃える*/
  font-family: "ＭＳ ゴシック";
}
```

## パッケージの概要

`readxl`はExcelブックをRで読み込むためのパッケージです。 列名やデータ型をある程度自動で判定し、テーブルの形で(`data.frame`型として)データを読み込むことが出来ます。 読み取りたい領域をセル番地等で指定することも可能です。

※Excelブックの編集・書き込みは本パッケージではできないため、`openxlsx`パッケージなどの他のパッケージを使用してください。

## 実行前の準備

```{r setup_package, output=FALSE}
library(readxl)
```

## データの準備

`readxl`パッケージには例となるExcelブックがいくつか用意されています。

`readxl_example`関数を引数無しで実行することでブックのリストが得られます。

```{r readdata_example1}
readxl_example()
```

引数にブック名を指定することでフルパスが得られます。 ここではirisデータセットなどが含まれる`datasets.xlsx`を使用することにします。

```{r readdata_example2}
path_datasets <- readxl_example("datasets.xlsx")
```

また、日本アクチュアリー会のホームページで公開されている標準生命表のExcelファイルも例として使用します。

```{r readdata_example3}
path_seimeihyo <- "../data/seimeihyo960718.xlsx"
```

## 基本的な使い方

### シート名の取得

`excel_sheets`関数でブックに含まれるシートの一覧を取得することができます。

```{r excel_sheets}
excel_sheets(path_datasets)
excel_sheets(path_seimeihyo)
```

### シートの読み取り

`read_excel`関数で、指定したシートのデータを`data.frame`(正確には`tibble`)として読み込むことが出来ます。

```{r basic_readdata, class.output="output-jp", message=FALSE}
df <- read_excel(path_seimeihyo, sheet = "標準生命表")
str(df) #テーブルの構造を表示する
#$ 列名 : 型名 [1:行数] 最初の方のデータ…　という形式で表示
```

デフォルトでは**データがある領域全体を一つのテーブル**とし、さらに**1行目に列名があるものとみなして**読み取られます。

標準生命表のExcelファイルは列名が3行にわたっているため、1, 2行目のレコードにまで列名が入ってしまいました。 また、副次的にすべての列が文字列型(`chr`)で読み込まれてしまっているため、このままでは数値データとして取り扱うことができません。

最もシンプルな解決策は読み取り領域を指定することです。

```{r basic_chklayout1, echo=FALSE}
tmp <- read_excel(path_seimeihyo, sheet = "標準生命表", range = "B3", col_names = c("value"))
if(tmp[[1,1]] != "年齢"){
  print("注意：B3セルの値が「年齢」ではないため、記事作成時点からレイアウトが変更されている可能性大")
}
```

```{r basic_chklayout2, echo=FALSE}
tmp <- read_excel(path_seimeihyo, sheet = "標準生命表", range = "G3", col_names = c("value"))
if(tmp[[1,1]] != "生保標準生命表２００７（死亡保険用）"){
  print("注意：G3セルの値が「生保標準生命表２００７（死亡保険用）」ではないため、記事作成時点からレイアウトが変更されている可能性大")
}
```

```{r basic_readdata2}
df_qx <- read_excel(path_seimeihyo, sheet = "標準生命表", range = "G4:H135") #生保標準2007 死亡保険用
#読み取り範囲をG4(列名として「男性」「女性」がある行)からとしていることに注意
str(df_qx)
```

列名がレコードに混じる現象が解消され、また型の自動判定により数値型(`num`)として読み込むことができました。

このままでも使えなくはありませんが、年齢の列が失われているのは使いづらいため、これを別途読み込んで追加してみます。

引数`col_names`に列名を与えることができます。この場合、1行目から列名ではなくレコードがあるものとして読み込みます。

```{r basic_readdata3}
df_x <- read_excel(path_seimeihyo, sheet = "標準生命表", range = "B5:B135", col_names = c("年齢"))
#読み取り範囲をB4からではなくB5(データがある行)からとしていることに注意
str(df_x)
```

`cbind`関数で結合することにより、年齢と死亡率を1つのテーブルに格納することができました。

```{r basic_cbind}
df <- cbind(df_x, df_qx)
str(df)
```

## 補足情報

### グラフの確認

本稿の主題からは逸れますが、折角生命表を読み込んだので折れ線グラフを描いて確認してみましょう。

```{r appendix_plot}
plot(0, 0, type = "n", main = "標準生命表2007 (死亡保険用)", xlab = "x", ylab = "qx", xlim = c(0,120), ylim = c(0,1))#plot関数で描画エリアを用意

cols <- c(rgb(0,0,1), rgb(1,0,0)) #色の指定を変数に格納 青, 赤の順で指定
ltys <- c("dotted", "dashed") #線の種類を変数に格納 点線、破線の順で指定

lines(x = df$年齢, y = df$男性, col = cols[1], lty = ltys[1]) #折れ線を1つずつ追加
lines(x = df$年齢, y = df$女性, col = cols[2], lty = ltys[2])

legend("left", legend = c("男性", "女性"), col = cols, lty = ltys) #凡例を左側に表示
```

記法が独特なものの、`ggplot2`パッケージを用いる方法もあります。

```{r appendix_ggplot, warning=FALSE}
library(ggplot2)
library(reshape2) #テーブルを縦長に変形するために使用
df_melt <- reshape2::melt(df, id.vars = "年齢", measure.vars = c("男性", "女性"),
                          value.name = "死亡率", variable.name = "性別") #男性と女性のデータが縦に並ぶようにする
str(df_melt)
ggplot(data = df_melt) + geom_line(mapping = aes(x = 年齢, y = 死亡率, color = 性別, linetype = 性別)) +
  scale_x_continuous(limits = c(0, 120)) + #表示範囲の調節
  scale_color_manual(values = c(rgb(0,0,1), rgb(1,0,0))) + #折れ線の見た目を1つ前のグラフと同様に設定
  scale_linetype_manual(values = c("dotted", "dashed"))
```

Rによるデータ可視化方法についてはアクチュアリージャーナルにも記載があります。 詳しくは @BIB_JOURNAL_IAJ を参照してください。

### 読み取り範囲の指定方法

セル番地での指定が最もわかりやすいですが、他の指定方法もあるため紹介します。

-   引数`sheet`ではシート名だけでなくシート番号で指定することもできます。
-   引数`range`の指定には、行全体を表す`cell_rows`や列全体を表す`cell_cols`を用いることができます。

```{r appendix_range, class.output="output-jp", message=FALSE}
df_ <- read_excel(path_seimeihyo, sheet = 1, range = cell_cols(c(2:4))) #2～4列目全体を取得
str(df_)
```

```{r appendix_range2, message=FALSE}
df_ <- read_excel(path_seimeihyo, sheet = 1, range = cell_rows(c(4, NA))) #4行目以降を取得
str(df_)
```

-   シート名の指定を引数`range`に含めることもできます

```{r appendix_range3, message=FALSE}
df_ <- read_excel(path_seimeihyo, range = "標準生命表!B4:D135")
str(df_)
```

-   引数`range`では、`anchored(左上のセル番地, c(行数, 列数))` という指定が可能です

```{r appendix_range4, message=FALSE}
df_ <- read_excel(path_seimeihyo, sheet = "標準生命表", range = anchored("B4", c(121, 3)))
str(df_)
```

-   引数`range`を指定する代わりに、冒頭の読み飛ばし行数`skip`と読み取る行数`n_max`を指定することもできます。

```{r appendix_range5, message=FALSE}
df_ <- read_excel(path_seimeihyo, sheet = "標準生命表", skip = 3, n_max = 30)
str(df_)
```

詳細は @BIB_DOC_SHEET-GEOMETRY や @BIB_DOC_CELL-SPECIFICATION を参照してください。

### 列名が複数行にわたる場合

Excelのデータでは今回の標準生命表のように、列名が複数行にわたって表示されることがよくあります。

事前にExcelのデータを修正しておくことも考えられますが、読み込む側の工夫でもある程度対処は可能なため、 参考までに一例を記載します。

`readxl`パッケージの関数で一発でうまく読み取れるわけではないため、 まず列名がある箇所をいったんデータとして読み取り、Rで加工のうえ列名をリストに保持し、 改めてデータのある箇所を読み取るという流れで対処することになります。

まず、列名がある部分(Excelシート上の3～4行目)をデータとして読み取ります。

```{r appendix_colname, message=FALSE}
#col_names = FALSEとすることにより、1行目を(テーブルdf_colnamesの)列名ではなくデータとして読み取る
df_colnames <- read_excel(path_seimeihyo, sheet = "標準生命表", range = cell_rows(c(3:4)), col_names = FALSE)
str(df_colnames)
```

今回のデータでは1行目の「生保標準生命表２０１８（死亡保険用）」などがそれぞれ一番左の列（各「男性」の列）にしか入れられていないため、 残りの列（各「女性」の列）にもこれを補完します。

```{r appendix_colname2, class.output="output-jp"}
for(row in 1:(nrow(df_colnames))){
  colname <- NA #1つ左の列の列名を保持する変数
  for(col in 1:(ncol(df_colnames))){
    if(row > 1 & col > 1){
      if(is.na(df_colnames[row-1, col-1]) != is.na(df_colnames[row-1, col]) 
         || ( !is.na(df_colnames[row-1, col-1]) && !is.na(df_colnames[row-1, col])
           && df_colnames[row-1, col-1] != df_colnames[row-1, col])){ #1つ上の階層の列名が変わった場合
        colname <- NA #今の階層もクリア
      }
    }
    if(is.na(df_colnames[row, col]))
      df_colnames[row, col] <- colname
    colname <- df_colnames[row, col]
  }
}
df_colnames
```

そして、`NA`となっている箇所を読み飛ばしつつ、各列名を結合したリストを作成します。

結合時の区切り文字は何でも指定可能ですが、今回は`"/"`にしてみます。

```{r appendix_colname3, class.output="output-jp"}
ls_colnames <- sapply(df_colnames, function(x) paste0(x[!is.na(x)], collapse = "/"))
names(ls_colnames) <- NULL
ls_colnames
```

こうしてできた列名リストを引数`col_names`に与え、元のデータ(Excelシート上の5行目以降)を読み取ります。

```{r appendix_colname4, class.output="output-jp"}
df_all <- read_excel(path_seimeihyo, sheet = "標準生命表", range = cell_rows(c(5, NA)), col_names = ls_colnames)
str(df_all)
```

### 欠損値への対処

`read_excel`関数の引数`na`に文字列を指定することで、その文字列があるセルを欠損値`NA`とみなして読み込むことが出来ます。 ベクトルを指定することで複数の文字列を指定することもできます。

例えばchichwtsデータセットで文字列`"horsebean"`と`"soybean"`を`NA`とみなして読み込んでみましょう。

```{r}
df_chick <- read_excel(path_datasets, sheet = "chickwts")
df_chick$feed
```

```{r}
df_chick_na <- read_excel(path_datasets, sheet = "chickwts", na = c("horsebean", "soybean"))
df_chick_na$feed
```

このように、一定の文字列を`NA`に変換するだけなら簡単に対処が可能です。

## 参考

::: {#refs}
:::
