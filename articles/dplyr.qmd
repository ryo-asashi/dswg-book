---
title: "dplyr"
author: "データサイエンス関連基礎調査WG"
date: "`r Sys.Date()`"
format: html
---

```{r setup, include=FALSE}

# install packages
pkgs <- c("dplyr")
for (pkg in pkgs) {
  if (!(pkg %in% installed.packages())) {
    install.packages(pkg)
  }
}

# detach packages
default <- c(".GlobalEnv", "tools:rstudio", "tools:vscode",
             "package:stats", "package:graphics",
             "package:grDevices", "package:utils",
             "package:datasets", "package:methods",
             "Autoloads", "package:base")
for (pkg in setdiff(search(), default)) {
  detach(pkg, character.only = TRUE)
  }

# clear objects
remove(list=objects())
```

## パッケージの概要

dplyrパッケージは、データフレームに対する「特定の行・列の抽出」や「ソート」などの重要な操作を、とてもシンプルなコードで実現するための関数を備えています。規模の大きなデータを扱うことの多いアクチュアリーにとって、必要不可欠なパッケージの一つです。

```{r dplyr, message = FALSE}
library(dplyr)
```

## パイプ演算子でコードを簡略化する

dplyrパッケージを呼び出すと、magrittrパッケージが提供するパイプ演算子（%\>%）も使えるようになります。この演算子は、左側にあるオブジェクトを、右側の関数の未指定の引数のうち一番最初のものに代入した結果を返します。

```{r magrittr::`%>%` 1}
# irisデータの先頭3行を表示
iris  %>% slice_head(n = 3)

```

なお、バージョン 4.1.0 以降の R には、標準演算子の一つとしてパイプ演算子 "\|\>" が追加されています。

```{r pipeOp, error = TRUE}
# バージョン 4.1.0 以降でのみ利用可能
iris |> slice_tail(n = 3)
```

データフレームに対して多くの操作を重ねたいとき、パイプ演算子を活用すれば、多重括弧による入れ子構造を避けて可読性の高いコードを書くことができます。

```{r magrittr::`%>%` 2}
iris %>%
  select(Species, Sepal.Length, Sepal.Width) %>%
  mutate(Sepal.Ratio　=　round(Sepal.Length / Sepal.Width, 3)) %>%
  group_by(Species) %>%
  arrange(Sepal.Ratio) %>%
  slice_head()
```

## データフレームから指定した列を抽出する

```{r dplyr::select}
iris %>%
  select(Species, Sepal.Width, Petal.Width) %>%
  slice_tail(n=3)
```

## データフレームから条件を満たす行を抽出する

```{r dplyr::filter}
iris %>%
  filter(Sepal.Width == 2.8, Petal.Width == 1.3)
```

## データフレームの行をソートする

```{r dplyr::arrange}
iris %>%
  arrange(Sepal.Length, Sepal.Width) %>% slice_head(n=3)
```

## データフレームの列を作成する

```{r dplyr::mutate}
iris %>%
  mutate(Sepal.Ratio=round(Sepal.Length / Sepal.Width, 3)) %>%
  slice_head(n=3)
```

## データを要約する

```{r dplyr::summarize}
iris %>% summarize(n_distinct(Sepal.Length),
                   mean(Sepal.Length),
                   max(Sepal.Length),
                   sum(log(Sepal.Width)))
```

## データフレームをグループ化して集計する

```{r dplyr::group_by}
iris %>%
  group_by(Species) %>%
  summarize(n(), mean(Sepal.Length), sd(Sepal.Length))
```
