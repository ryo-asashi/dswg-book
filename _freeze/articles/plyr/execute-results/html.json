{
  "hash": "2d349ea4c63558c84d3f0da5c16448b1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"plyr\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    fig-width: 6\n    fig-height: 5\n    df-print: \"paged\"\n    embed-resources: true\nreferences:\n- id: BIB_WICKHAM_2011\n  type: article\n  journal: \"Journal of Statistical Software\"\n  volume: 40\n  title: \"The Split-Apply-Combine Strategy for Data Analysis\"\n  url: \"https://www.jstatsoft.org/index.php/jss/article/view/v040i01\"\n  doi: \"10.18637/jss.v040.i01\"\n  author:\n    - Wickham, Hadley\n  issued:\n    - year: 2011\n  pages: \"1-29\"\nnocite: |\n  @*\n---\n\n\n\n\n\n::: {.cell}\n<style type=\"text/css\">\n.output-jp > code {\n/*一部日本語出力があるチャンクで日本語と英字の幅が揃わずに表示がずれるため、CSSでフォントを変更することで表示を揃える*/\n  font-family: \"ＭＳ ゴシック\";\n}\n</style>\n:::\n\n\n\n\n## パッケージの概要\n\nplyrパッケージはデータフレーム等のグループ化集計（グループごとに分割し、適用し、まとめる）に特化したパッケージです。\nデータフレーム操作パッケージとして名高いdplyrパッケージの前身にあたりますが、本パッケージは配列などのデータフレーム以外の操作にも対応しているのが特徴です。\n\n前述のようなグループ化集計にあたっては、R標準では`apply`系関数を用いることになりますが、\nその戻り値の型が場合によって異なること、多次元配列の操作のような高度な処理にはあまり向かないこと等の問題点がありました。\n本パッケージではこれらの問題に対処した`apply`系関数の改良版として、`**ply`という名前[^asterisk]の関数を多数提供しています。\n\n[^asterisk]: このアスタリスク「`*`」は、その場所に何らかの文字が入ったものの総称として使用しています。たとえば `l*ply` は `laply`、`ldply`、`llply`、`l_ply` の総称です。\n\nplyrパッケージの名前は、その思想の根幹を成す`**ply`系関数から取られています[^dplyr]。\n\n[^dplyr]: なお、dplyrパッケージの名前は、データフレーム操作に特化したplyrパッケージの後継というところから取られています。\n\n## 使用方法\n\n事前準備としてパッケージを読み込んでおきます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plyr)\n```\n:::\n\n\n\n\n### `**ply` 系関数の基本\n\n`**ply`系関数は、Split-Apply-Combineというグループ化集計の流れを1つの関数で完結させるものです。\n\n- Split…データをグループごとに分割する\n- Apply…分割したデータそれぞれごとに、何らかの処理を適用する\n- Combine…処理した結果を1つのデータにまとめる\n\nたとえば、irisデータセットにおいて、アヤメの種類ごとのデータの平均値を集計するには次のようにします。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Speciesの列にアヤメの種類が入っている\nhead(iris)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Sepal.Length\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Sepal.Width\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Petal.Length\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Petal.Width\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Species\"],\"name\":[5],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"5.1\",\"2\":\"3.5\",\"3\":\"1.4\",\"4\":\"0.2\",\"5\":\"setosa\",\"_rn_\":\"1\"},{\"1\":\"4.9\",\"2\":\"3.0\",\"3\":\"1.4\",\"4\":\"0.2\",\"5\":\"setosa\",\"_rn_\":\"2\"},{\"1\":\"4.7\",\"2\":\"3.2\",\"3\":\"1.3\",\"4\":\"0.2\",\"5\":\"setosa\",\"_rn_\":\"3\"},{\"1\":\"4.6\",\"2\":\"3.1\",\"3\":\"1.5\",\"4\":\"0.2\",\"5\":\"setosa\",\"_rn_\":\"4\"},{\"1\":\"5.0\",\"2\":\"3.6\",\"3\":\"1.4\",\"4\":\"0.2\",\"5\":\"setosa\",\"_rn_\":\"5\"},{\"1\":\"5.4\",\"2\":\"3.9\",\"3\":\"1.7\",\"4\":\"0.4\",\"5\":\"setosa\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#第2引数にどのようにデータを分割するか、第3引数にどのような処理を適用するかを指定\ndaply(iris, .(Species), function(df){mean(df$Sepal.Length)})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    setosa versicolor  virginica \n     5.006      5.936      6.588 \n```\n\n\n:::\n:::\n\n\n\n\nここで、関数名の`daply`の最初の2文字は入出力データの型を表します。つまり、1文字目の`d`はデータフレームを入力とすること、2文字目の`a`は配列を出力とすることを表しています。\n\nこの命名規則のもと、`**ply`系関数には以下のようなものが存在しています[^others]。\n\n[^others]: この命名規則に従う関数は他にも提供されていますが、これら12種とは若干趣が異なるもののため本表では省略しています。\n\n| 入力型 ＼ 出力型 | 配列(`a`) | データフレーム(`d`) | リスト(`l`) | 出力なし(`_`) |\n|------|----|----|----|----|\n|配列(`a`)|`aaply`|`adply`|`alply`|`a_ply`|\n|データフレーム(`d`)|`daply`|`ddply`|`dlply`|`d_ply`|\n|リスト(`l`)|`laply`|`ldply`|`llply`|`l_ply`|\n\n入力型の指定は、データの分割の指定方法が入力型によって異なる（後述）ことから設けられています。\nまた出力型の指定は、`apply`系関数では出力型が一定でなく扱いづらかったことへの対応として設けられたものです。\n\nなお、第4引数以降は第3引数の関数に引き継がれます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaply(iris, .(Species), \n      function(df, offset){mean(df$Sepal.Length) + offset},\n      offset = 12345)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    setosa versicolor  virginica \n  12350.01   12350.94   12351.59 \n```\n\n\n:::\n:::\n\n\n\n\n以下では使用方法が特徴的なもののみを取り上げます。\n\n#### `d*ply`\n\nデータフレームを入力型とする場合、第2引数にはグループ化に使用する列を指定するのでした。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#idはプレイヤーを表す文字列、teamはチーム名\nhead(plyr::baseball)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"stint\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"team\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"lg\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"g\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"ab\"],\"name\":[7],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"r\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"h\"],\"name\":[9],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"X2b\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"X3b\"],\"name\":[11],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"hr\"],\"name\":[12],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"rbi\"],\"name\":[13],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sb\"],\"name\":[14],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"cs\"],\"name\":[15],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"bb\"],\"name\":[16],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"so\"],\"name\":[17],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"ibb\"],\"name\":[18],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"hbp\"],\"name\":[19],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sh\"],\"name\":[20],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sf\"],\"name\":[21],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"gidp\"],\"name\":[22],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"ansonca01\",\"2\":\"1871\",\"3\":\"1\",\"4\":\"RC1\",\"5\":\"\",\"6\":\"25\",\"7\":\"120\",\"8\":\"29\",\"9\":\"39\",\"10\":\"11\",\"11\":\"3\",\"12\":\"0\",\"13\":\"16\",\"14\":\"6\",\"15\":\"2\",\"16\":\"2\",\"17\":\"1\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"NA\",\"_rn_\":\"4\"},{\"1\":\"forceda01\",\"2\":\"1871\",\"3\":\"1\",\"4\":\"WS3\",\"5\":\"\",\"6\":\"32\",\"7\":\"162\",\"8\":\"45\",\"9\":\"45\",\"10\":\"9\",\"11\":\"4\",\"12\":\"0\",\"13\":\"29\",\"14\":\"8\",\"15\":\"0\",\"16\":\"4\",\"17\":\"0\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"NA\",\"_rn_\":\"44\"},{\"1\":\"mathebo01\",\"2\":\"1871\",\"3\":\"1\",\"4\":\"FW1\",\"5\":\"\",\"6\":\"19\",\"7\":\"89\",\"8\":\"15\",\"9\":\"24\",\"10\":\"3\",\"11\":\"1\",\"12\":\"0\",\"13\":\"10\",\"14\":\"2\",\"15\":\"1\",\"16\":\"2\",\"17\":\"0\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"NA\",\"_rn_\":\"68\"},{\"1\":\"startjo01\",\"2\":\"1871\",\"3\":\"1\",\"4\":\"NY2\",\"5\":\"\",\"6\":\"33\",\"7\":\"161\",\"8\":\"35\",\"9\":\"58\",\"10\":\"5\",\"11\":\"1\",\"12\":\"1\",\"13\":\"34\",\"14\":\"4\",\"15\":\"2\",\"16\":\"3\",\"17\":\"0\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"NA\",\"_rn_\":\"99\"},{\"1\":\"suttoez01\",\"2\":\"1871\",\"3\":\"1\",\"4\":\"CL1\",\"5\":\"\",\"6\":\"29\",\"7\":\"128\",\"8\":\"35\",\"9\":\"45\",\"10\":\"3\",\"11\":\"7\",\"12\":\"3\",\"13\":\"23\",\"14\":\"3\",\"15\":\"1\",\"16\":\"1\",\"17\":\"0\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"NA\",\"_rn_\":\"102\"},{\"1\":\"whitede01\",\"2\":\"1871\",\"3\":\"1\",\"4\":\"CL1\",\"5\":\"\",\"6\":\"29\",\"7\":\"146\",\"8\":\"40\",\"9\":\"47\",\"10\":\"6\",\"11\":\"5\",\"12\":\"1\",\"13\":\"21\",\"14\":\"2\",\"15\":\"2\",\"16\":\"4\",\"17\":\"1\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"NA\",\"_rn_\":\"106\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#比較的最近のデータのみを抽出\ndf_baseball <- subset(baseball, year >= 2003)\n\n#rbi(打点)の合計値を年度ごとに計算\n#summarise関数については後述\nddply(df_baseball, .(year), summarise, sum_rbi = sum(rbi))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"year\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sum_rbi\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2003\",\"2\":\"5278\"},{\"1\":\"2004\",\"2\":\"4654\"},{\"1\":\"2005\",\"2\":\"3413\"},{\"1\":\"2006\",\"2\":\"2548\"},{\"1\":\"2007\",\"2\":\"1732\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\nこの第2引数には複数の列を指定することも可能です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#コンマで区切って複数指定\nhead(ddply(df_baseball, .(year, stint), summarise, sum_rbi = sum(rbi)))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"stint\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sum_rbi\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2003\",\"2\":\"1\",\"3\":\"4976\",\"_rn_\":\"1\"},{\"1\":\"2003\",\"2\":\"2\",\"3\":\"279\",\"_rn_\":\"2\"},{\"1\":\"2003\",\"2\":\"3\",\"3\":\"23\",\"_rn_\":\"3\"},{\"1\":\"2003\",\"2\":\"4\",\"3\":\"0\",\"_rn_\":\"4\"},{\"1\":\"2004\",\"2\":\"1\",\"3\":\"4490\",\"_rn_\":\"5\"},{\"1\":\"2004\",\"2\":\"2\",\"3\":\"161\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#文字列ベクトルで指定することも可能\nhead(ddply(df_baseball, c(\"year\", \"stint\"), summarise, sum_rbi = sum(rbi)))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"stint\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sum_rbi\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2003\",\"2\":\"1\",\"3\":\"4976\",\"_rn_\":\"1\"},{\"1\":\"2003\",\"2\":\"2\",\"3\":\"279\",\"_rn_\":\"2\"},{\"1\":\"2003\",\"2\":\"3\",\"3\":\"23\",\"_rn_\":\"3\"},{\"1\":\"2003\",\"2\":\"4\",\"3\":\"0\",\"_rn_\":\"4\"},{\"1\":\"2004\",\"2\":\"1\",\"3\":\"4490\",\"_rn_\":\"5\"},{\"1\":\"2004\",\"2\":\"2\",\"3\":\"161\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n列名を用いた式を記述することも可能です。さらに、作成される列名を指定することもできます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#コンマで区切って複数指定\nddply(df_baseball, .(year >= 2005, stint_0 = stint - 1), summarise, sum_rbi = sum(rbi))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"year >= 2005\"],\"name\":[1],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"stint_0\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sum_rbi\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"FALSE\",\"2\":\"0\",\"3\":\"9466\"},{\"1\":\"FALSE\",\"2\":\"1\",\"3\":\"440\"},{\"1\":\"FALSE\",\"2\":\"2\",\"3\":\"26\"},{\"1\":\"FALSE\",\"2\":\"3\",\"3\":\"0\"},{\"1\":\"TRUE\",\"2\":\"0\",\"3\":\"7380\"},{\"1\":\"TRUE\",\"2\":\"1\",\"3\":\"297\"},{\"1\":\"TRUE\",\"2\":\"2\",\"3\":\"16\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n#### `*aply`\n\n出力型が配列の場合は、グループ化に指定した列それぞれに配列の次元が対応する形になります。\nたとえば、以下の例では2変数でグループ化しているため、2次元配列が出力されます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndaply(df_baseball, .(year, stint), summarise, sum_rbi = sum(rbi))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      stint\nyear   1    2   3    4   \n  2003 4976 279 23   0   \n  2004 4490 161 3    NULL\n  2005 3359 50  4    NULL\n  2006 2332 204 12   NULL\n  2007 1689 43  NULL NULL\n```\n\n\n:::\n:::\n\n\n\n#### `*lply`\n\n出力型がリストの場合は長さがグループ数のリストで出力されます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls <- dlply(df_baseball, .(year, stint), function(df){sum(df$rbi)})\n#各グループがどのようなyearとstintの組み合わせであったかがdata.frameで記録されている\nls\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`2003.1`\n[1] 4976\n\n$`2003.2`\n[1] 279\n\n$`2003.3`\n[1] 23\n\n$`2003.4`\n[1] 0\n\n$`2004.1`\n[1] 4490\n\n$`2004.2`\n[1] 161\n\n$`2004.3`\n[1] 3\n\n$`2005.1`\n[1] 3359\n\n$`2005.2`\n[1] 50\n\n$`2005.3`\n[1] 4\n\n$`2006.1`\n[1] 2332\n\n$`2006.2`\n[1] 204\n\n$`2006.3`\n[1] 12\n\n$`2007.1`\n[1] 1689\n\n$`2007.2`\n[1] 43\n\nattr(,\"split_type\")\n[1] \"data.frame\"\nattr(,\"split_labels\")\n   year stint\n1  2003     1\n2  2003     2\n3  2003     3\n4  2003     4\n5  2004     1\n6  2004     2\n7  2004     3\n8  2005     1\n9  2005     2\n10 2005     3\n11 2006     1\n12 2006     2\n13 2006     3\n14 2007     1\n15 2007     2\n```\n\n\n:::\n:::\n\n\n\n\nこのとき、各要素がどのようなグループであったかが記録されており、\n`l*ply`系関数に適用した場合にこの情報が参照されます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#直接daply関数を用いたときと同様の結果が得られる\nlaply(ls, function(x)x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      stint\nyear      1   2  3  4\n  2003 4976 279 23  0\n  2004 4490 161  3 NA\n  2005 3359  50  4 NA\n  2006 2332 204 12 NA\n  2007 1689  43 NA NA\n```\n\n\n:::\n:::\n\n\n\n\n#### `a*ply`\n\n配列を入力型とする場合、グループ化の指定方法がデータフレームの場合とは異なります。\n\nここではその動作を把握するため、`ozone`という3次元配列を題材として使用します。\n\nこれは中央アメリカにおけるオゾン濃度を記録したデータで、\n1つめの次元(`lat`)は緯度、2つめの次元(`long`)は経度、3つ目の次元(`time`)は観測時刻を表します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nar_ozone <- plyr::ozone\nstr(ar_ozone)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:24, 1:24, 1:72] 260 258 258 254 252 252 250 248 248 248 ...\n - attr(*, \"dimnames\")=List of 3\n  ..$ lat : chr [1:24] \"-21.2\" \"-18.7\" \"-16.2\" \"-13.7\" ...\n  ..$ long: chr [1:24] \"-113.8\" \"-111.3\" \"-108.8\" \"-106.3\" ...\n  ..$ time: chr [1:72] \"1\" \"2\" \"3\" \"4\" ...\n```\n\n\n:::\n:::\n\n\n\n\nこのとき、`a*ply`関数の第2引数はグループ化に使用する次元を指定します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(adply(ar_ozone, 1, mean))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"lat\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"V1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-21.2\",\"2\":\"266.8194\",\"_rn_\":\"1\"},{\"1\":\"-18.7\",\"2\":\"263.0104\",\"_rn_\":\"2\"},{\"1\":\"-16.2\",\"2\":\"260.6493\",\"_rn_\":\"3\"},{\"1\":\"-13.7\",\"2\":\"258.8148\",\"_rn_\":\"4\"},{\"1\":\"-11.2\",\"2\":\"257.8657\",\"_rn_\":\"5\"},{\"1\":\"-8.7\",\"2\":\"256.9306\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nhead(adply(ar_ozone, 2, mean))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"long\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"V1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-113.8\",\"2\":\"268.5637\",\"_rn_\":\"1\"},{\"1\":\"-111.3\",\"2\":\"268.5509\",\"_rn_\":\"2\"},{\"1\":\"-108.8\",\"2\":\"267.9213\",\"_rn_\":\"3\"},{\"1\":\"-106.3\",\"2\":\"267.1319\",\"_rn_\":\"4\"},{\"1\":\"-103.8\",\"2\":\"267.1748\",\"_rn_\":\"5\"},{\"1\":\"-101.3\",\"2\":\"266.9769\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nhead(adply(ar_ozone, 3, mean))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"time\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"V1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"258.6111\",\"_rn_\":\"1\"},{\"1\":\"2\",\"2\":\"257.5938\",\"_rn_\":\"2\"},{\"1\":\"3\",\"2\":\"261.3854\",\"_rn_\":\"3\"},{\"1\":\"4\",\"2\":\"259.0694\",\"_rn_\":\"4\"},{\"1\":\"5\",\"2\":\"263.1910\",\"_rn_\":\"5\"},{\"1\":\"6\",\"2\":\"269.3160\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n複数の次元を使用することも可能です。\n\n例えば各緯度・経度ごとの平均値を計算し、緯度・経度の次元を持つ配列に結果を格納するには次のようにします。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#最初の5×5の地点のみ計算\naaply(ar_ozone[1:5, 1:5, ], 1:2, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       long\nlat       -113.8   -111.3   -108.8   -106.3   -103.8\n  -21.2 268.2500 268.9444 269.1389 269.4722 269.7500\n  -18.7 265.7500 265.7500 265.8611 266.2500 265.9444\n  -16.2 262.7778 263.0278 262.9444 263.3889 263.3611\n  -13.7 260.4722 260.8333 260.8611 260.8056 260.7778\n  -11.2 258.6667 259.0000 258.8611 258.8611 259.0556\n```\n\n\n:::\n:::\n\n\n\n\n少し変わった用法ですが、データフレームに対して各行ごとに処理を行いたい場合に使用することもできます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#各行を単純に文字列結合したものを出力\nhead(adply(iris, 1, paste, collapse = \" \"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Sepal.Length\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Sepal.Width\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Petal.Length\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Petal.Width\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Species\"],\"name\":[5],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"V1\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"5.1\",\"2\":\"3.5\",\"3\":\"1.4\",\"4\":\"0.2\",\"5\":\"setosa\",\"6\":\"5.1 3.5 1.4 0.2 1\",\"_rn_\":\"1\"},{\"1\":\"4.9\",\"2\":\"3.0\",\"3\":\"1.4\",\"4\":\"0.2\",\"5\":\"setosa\",\"6\":\"4.9 3 1.4 0.2 1\",\"_rn_\":\"2\"},{\"1\":\"4.7\",\"2\":\"3.2\",\"3\":\"1.3\",\"4\":\"0.2\",\"5\":\"setosa\",\"6\":\"4.7 3.2 1.3 0.2 1\",\"_rn_\":\"3\"},{\"1\":\"4.6\",\"2\":\"3.1\",\"3\":\"1.5\",\"4\":\"0.2\",\"5\":\"setosa\",\"6\":\"4.6 3.1 1.5 0.2 1\",\"_rn_\":\"4\"},{\"1\":\"5.0\",\"2\":\"3.6\",\"3\":\"1.4\",\"4\":\"0.2\",\"5\":\"setosa\",\"6\":\"5 3.6 1.4 0.2 1\",\"_rn_\":\"5\"},{\"1\":\"5.4\",\"2\":\"3.9\",\"3\":\"1.7\",\"4\":\"0.4\",\"5\":\"setosa\",\"6\":\"5.4 3.9 1.7 0.4 1\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n### 基本形以外の `**ply` 系関数\n\n`**ply`系関数には前節で紹介した12種の基本形以外のものも存在します。[^others2]\n\n[^others2]: これらは Split-Apply-Combine の Split 部分の考え方が異なるもののため、別扱いとしました。\n\n#### `r*ply`\n\n`r*ply`関数[^r]は同じ処理を複数回繰り返し、その結果をデータフレームなどで出力するものです。\n\n[^r]: この`r`は Replicate の頭文字を取ったものと考えられます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#100個の[0, 1)一様乱数の平均をとる、という操作を20回繰り返す\nset.seed(42)\nrdply(20, mean(runif(100)))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\".n\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"V1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"0.5244787\"},{\"1\":\"2\",\"2\":\"0.5199532\"},{\"1\":\"3\",\"2\":\"0.4407721\"},{\"1\":\"4\",\"2\":\"0.5032226\"},{\"1\":\"5\",\"2\":\"0.4594184\"},{\"1\":\"6\",\"2\":\"0.4793326\"},{\"1\":\"7\",\"2\":\"0.5040943\"},{\"1\":\"8\",\"2\":\"0.5094235\"},{\"1\":\"9\",\"2\":\"0.4798769\"},{\"1\":\"10\",\"2\":\"0.4619826\"},{\"1\":\"11\",\"2\":\"0.4684918\"},{\"1\":\"12\",\"2\":\"0.4908172\"},{\"1\":\"13\",\"2\":\"0.5186378\"},{\"1\":\"14\",\"2\":\"0.4737833\"},{\"1\":\"15\",\"2\":\"0.4901169\"},{\"1\":\"16\",\"2\":\"0.4829875\"},{\"1\":\"17\",\"2\":\"0.4838884\"},{\"1\":\"18\",\"2\":\"0.4894277\"},{\"1\":\"19\",\"2\":\"0.5250864\"},{\"1\":\"20\",\"2\":\"0.5469202\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n#### `m*ply`\n\n`m*ply`関数[^m]は同じ関数を異なる引数で繰り返すのに使用します。\n\n[^m]: この`m`はR標準の `mapply` 関数と同様、関数の繰り返しの際に複数引数を取り扱える(Multivariate)ことを意味していると考えられます。\n\n第1引数にはその関数に渡したい引数を行列かデータフレームで与え、第2引数には繰り返したい関数を指定します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdply(cbind(x = c(1, 1, 2, 2, 3), y = c(1, 3, 2, 4, 5)), function(x, y){x*y})\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"V1\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\"},{\"1\":\"1\",\"2\":\"3\",\"3\":\"3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"4\"},{\"1\":\"2\",\"2\":\"4\",\"3\":\"8\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"15\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nmaply(expand.grid(x = 1:5, y = 1:5), function(x, y){x*y})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   y\nx   1  2  3  4  5\n  1 1  2  3  4  5\n  2 2  4  6  8 10\n  3 3  6  9 12 15\n  4 4  8 12 16 20\n  5 5 10 15 20 25\n```\n\n\n:::\n:::\n\n\n\n\n### 補助関数\n\n本パッケージには `**ply` 系関数と組み合わせて使用する補助関数が多数提供されています。\n\nそのうち代表的なものを紹介します。\n\n#### `mutate`, `summarise`（データフレームの列加工）\n\n`mutate`関数はデータフレームの列加工に用いられる関数です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(x = c(1, 2, 3, 4),\n                 y = c(2, 3, 5, 7))\n#x + yを計算して新しい列zに格納\nmutate(df, z = x + y)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"z\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"2\",\"3\":\"3\"},{\"1\":\"2\",\"2\":\"3\",\"3\":\"5\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"8\"},{\"1\":\"4\",\"2\":\"7\",\"3\":\"11\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#列xを2倍\nmutate(df, x = 2 * x)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2\",\"2\":\"2\"},{\"1\":\"4\",\"2\":\"3\"},{\"1\":\"6\",\"2\":\"5\"},{\"1\":\"8\",\"2\":\"7\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\nR標準の`transform`関数と働きは同様ですが、\n複数回の加工を一度に行う際、それまでの加工結果を引き継ぐという点が特徴です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#xにyを足しこんでから2倍する\nmutate(df, x = x + y, w = 2 * x)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"3\",\"2\":\"2\",\"3\":\"6\"},{\"1\":\"5\",\"2\":\"3\",\"3\":\"10\"},{\"1\":\"8\",\"2\":\"5\",\"3\":\"16\"},{\"1\":\"11\",\"2\":\"7\",\"3\":\"22\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#2*xの計算に使うxはもともとのx\ntransform(df, x = x + y, w = 2 * x)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"3\",\"2\":\"2\",\"3\":\"2\"},{\"1\":\"5\",\"2\":\"3\",\"3\":\"4\"},{\"1\":\"8\",\"2\":\"5\",\"3\":\"6\"},{\"1\":\"11\",\"2\":\"7\",\"3\":\"8\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#mutate中新たに作られる列zの結果を後続で使用可能\nmutate(df, z = x + y, w = 2 * z)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"z\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"6\"},{\"1\":\"2\",\"2\":\"3\",\"3\":\"5\",\"4\":\"10\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"8\",\"4\":\"16\"},{\"1\":\"4\",\"2\":\"7\",\"3\":\"11\",\"4\":\"22\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n一方、`summarise`関数は`mutate`関数と同様の計算を行うものの、\nもともとあった列が取り除かれることが特徴です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#xにyを足しこんでから2倍する\nsummarise(df, x = x + y, w = 2 * x)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"w\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"3\",\"2\":\"6\"},{\"1\":\"5\",\"2\":\"10\"},{\"1\":\"8\",\"2\":\"16\"},{\"1\":\"11\",\"2\":\"22\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\nこの性質は、`ddply`関数の第3引数に用いるときに便利です。\n\n（`mutate`関数を用いた場合はもともとある列が全て吐き出されてしまう）\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nddply(iris, .(Species), summarise,\n      mean_Sepal.Length = mean(Sepal.Length))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"mean_Sepal.Length\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"setosa\",\"2\":\"5.006\"},{\"1\":\"versicolor\",\"2\":\"5.936\"},{\"1\":\"virginica\",\"2\":\"6.588\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n#### `colwise`（すべての列を処理する関数に変換）\n\n`colwise`関数は同じ関数を全ての列に対して実行したい場合に用いられます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nddply(iris, .(Species), colwise(mean))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"Sepal.Length\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Sepal.Width\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Petal.Length\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Petal.Width\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"setosa\",\"2\":\"5.006\",\"3\":\"3.428\",\"4\":\"1.462\",\"5\":\"0.246\"},{\"1\":\"versicolor\",\"2\":\"5.936\",\"3\":\"2.770\",\"4\":\"4.260\",\"5\":\"1.326\"},{\"1\":\"virginica\",\"2\":\"6.588\",\"3\":\"2.974\",\"4\":\"5.552\",\"5\":\"2.026\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n#### `each`（同時に複数個の関数を実行する単一の関数を生成）\n\n`each`関数は同時に複数の関数を実行したい場合に用いられます。\n例えば次のような例では、平均と分散の両方を同時に計算することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naaply(ar_ozone[1:5, 1:5, ], 1:2, each(mean, var))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, ,  = mean\n\n       long\nlat       -113.8   -111.3   -108.8   -106.3   -103.8\n  -21.2 268.2500 268.9444 269.1389 269.4722 269.7500\n  -18.7 265.7500 265.7500 265.8611 266.2500 265.9444\n  -16.2 262.7778 263.0278 262.9444 263.3889 263.3611\n  -13.7 260.4722 260.8333 260.8611 260.8056 260.7778\n  -11.2 258.6667 259.0000 258.8611 258.8611 259.0556\n\n, ,  = var\n\n       long\nlat        -113.8    -111.3    -108.8    -106.3    -103.8\n  -21.2 150.30282 156.39124 157.72692 162.02739 155.82394\n  -18.7 115.82394 115.82394 111.02269 115.37324 119.32081\n  -16.2  85.47105  82.81612  84.05321  84.24100  84.82551\n  -13.7  68.11189  62.50704  66.68466  69.48279  70.48513\n  -11.2  62.76056  61.97183  66.12128  63.98044  68.05321\n```\n\n\n:::\n:::\n\n\n\n\n#### `splat`（単一リストを引数にとる関数に変換）\n\n`splat`関数は、複数引数をとる関数を単一リストを引数にとる関数に変換します。\n\n`d*ply`系関数で複数列を処理する場合に用いることができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfn_mean_Sepal.Rate <- function(Sepal.Length, Sepal.Width, ...){\n  mean(Sepal.Length / Sepal.Width)\n}\n\nddply(iris, .(Species), splat(fn_mean_Sepal.Rate))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"V1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"setosa\",\"2\":\"1.470188\"},{\"1\":\"versicolor\",\"2\":\"2.160402\"},{\"1\":\"virginica\",\"2\":\"2.230453\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n#### `failwith`（エラー処理）\n\n`failwith`関数も関数を変換するものの一種で、\n実行時にエラーとなってしまう場合に`NA`等の値を当てはめるようにします。\n\n第1引数にエラー時の値、第2引数に実行する関数を指定します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nllply(-2:3, failwith(NA, \n                     function(n) seq(1, n, 1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nError in seq.default(1, n, 1) : wrong sign in 'by' argument\nError in seq.default(1, n, 1) : wrong sign in 'by' argument\nError in seq.default(1, n, 1) : wrong sign in 'by' argument\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] NA\n\n[[2]]\n[1] NA\n\n[[3]]\n[1] NA\n\n[[4]]\n[1] 1\n\n[[5]]\n[1] 1 2\n\n[[6]]\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\n#エラーメッセージを表示しない\nllply(-2:3, failwith(NA, \n                     function(n) seq(1, n, 1),\n                     quiet = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] NA\n\n[[2]]\n[1] NA\n\n[[3]]\n[1] NA\n\n[[4]]\n[1] 1\n\n[[5]]\n[1] 1 2\n\n[[6]]\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\n#### `as.data.frame.function`\n\n`as.data.frame.function`関数も関数を変換するものの一種で、\n関数の出力をデータフレームに変更します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#as.data.frame関数の引数に関数を指定すると、\n#as.data.frame.function関数が使用される\nldply(1:3, as.data.frame(function(n) 1:n))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"value\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\"},{\"1\":\"1\"},{\"1\":\"2\"},{\"1\":\"1\"},{\"1\":\"2\"},{\"1\":\"3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## plyrパッケージの長所・短所\n\n### 長所\n\nplyrパッケージはグループ化集計を念頭に置きつつ、\nR標準の`apply`系関数を拡張・改良する方向性でデザインされているため、\nR標準機能になじみ深いユーザーにとっては受け入れやすいのが長所といえます。\n\n特に、多次元配列を`apply`系関数のように扱いたい場合に威力を発揮します。\n\nパッケージ開発者の論文[@BIB_WICKHAM_2011]で挙げられている`ozone`（オゾン濃度データ）の例がわかりやすいため、\nここで紹介します。\n\n本データは12か月×6年間＝72か月分のデータがありますが、その濃度の増減には周期性がみられます。\nある1地点での時間変化をプロットすると次のとおり。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na_oz <- ar_ozone[1, 1, ]\nplot(a_oz)\n```\n\n::: {.cell-output-display}\n![](plyr_files/figure-html/ozone_example_plot-1.png){width=576}\n:::\n:::\n\n\n\n\n1年周期の季節的な変動と考えられるので、\nこのデータに対して月を説明変数としたロバスト線形回帰モデルを構築し、\nそのモデルの予測値を差し引くことで季節的な要因を取り除くことを考えます。\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth <- ordered(rep(1:12, length = 72))\nmodel_rlm <- MASS::rlm(a_oz ~ month - 1, maxit = 50)\nmodel_rlm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\nrlm(formula = a_oz ~ month - 1, maxit = 50)\nConverged in 9 iterations\n\nCoefficients:\n  month1   month2   month3   month4   month5   month6   month7   month8 \n264.3964 259.2036 255.0000 252.0052 258.5089 265.3387 274.0000 276.6724 \n  month9  month10  month11  month12 \n277.0000 285.0000 283.6036 273.1964 \n\nDegrees of freedom: 72 total; 60 residual\nScale estimate: 4.45 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#実データと予測値を重ねたプロット\nplot(a_oz)\npoints(predict(model_rlm, month), pch = 3)\nlegend(\"bottomright\", NULL, c(\"raw\", \"rlm\"), pch = c(1,3))\n```\n\n::: {.cell-output-display}\n![](plyr_files/figure-html/ozone_example_deseas_plot-1.png){width=576}\n:::\n\n```{.r .cell-code}\n#残差のプロット\nplot(resid(model_rlm), pch = 4)\nlegend(\"bottomright\", NULL, c(\"residue = raw - rlm\"), pch = 4)\n```\n\n::: {.cell-output-display}\n![](plyr_files/figure-html/ozone_example_deseas_plot-2.png){width=576}\n:::\n:::\n\n\n\n\n\nただし、これはあくまで1地点における分析です。\nこのような季節要因を取り除くという計算を他の地点でも同様に行いたいとしましょう。\n\n最もわかりやすいのはfor文によるものです[^suppreswarning]。\n\n[^suppreswarning]: 以下、これらのコードでは`'rlm' failed to converge in 50 steps`という警告が複数回表示されますが、本稿では記載を省略しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#季節要因を除いたデータをar_deseasに格納したい\nar_deseas <- array(NA, c(24, 24, 72))\ndimnames(ar_deseas) <- dimnames(ar_ozone)\n#季節要因を除くのに使用したモデルを保存しておきたい\nmodels <- as.list(rep(NA, 24*24))\ndim(models) <- c(24, 24)\n\nfor(i in 1:24){\n  for(j in 1:24){\n    a_oz <- ar_ozone[i, j, ]\n    model <- MASS::rlm(a_oz ~ month - 1, maxit = 50)\n    \n    models[[i, j]] <- model\n    ar_deseas[i, j, ] <- resid(model)\n  }\n}\n```\n:::\n\n\n\n\nR言語ではfor文よりも`apply`系関数によるコーディングが好まれますが、\nこの例の場合は配列の次元の取り扱いに苦慮します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfn_fitmodel <- function(a_oz){\n  MASS::rlm(a_oz ~ month - 1, maxit = 50)\n}\nmodels <- apply(ar_ozone, 1:2, fn_fitmodel)\nls_deseas <- lapply(models, resid)\nar_deseas <- unlist(ls_deseas)\nstr(ar_deseas) #1次元の配列\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Named num [1:41472] -4.4 -5.2 -1 -8.01 -8.51 ...\n - attr(*, \"names\")= chr [1:41472] \"1\" \"2\" \"3\" \"4\" ...\n```\n\n\n:::\n\n```{.r .cell-code}\n#3次元の配列に変更\ndim(ar_deseas) <- c(72, 24, 24)\n#添え字が時間→場所の順になっているので、元に戻すために入れ替える\nar_deseas <- aperm(ar_deseas, c(2, 3, 1))\ndimnames(ar_deseas) <- dimnames(ozone)\n```\n:::\n\n\n\n\nplyrパッケージの`**ply`系関数を使用すれば、\n`apply`系関数によるコーディングの良さを残しつつも、コードをよりシンプルにすることが可能です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfn_fitmodel <- function(a_oz){\n  MASS::rlm(a_oz ~ month - 1, maxit = 50)\n}\n#モデルは配列には代入できないため、aaplyではなくalplyとする\nmodels <- alply(ar_ozone, 1:2, fn_fitmodel)\nar_deseas <- laply(models, resid)\n```\n:::\n\n\n\n\nなお参考までに実行結果を可視化すると以下のとおりで、論文の図を再現できていると考えられます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#季節要因を除く前の各地点での平均値\nar_mean <- aaply(ar_ozone, 1:2, mean)\nar_mean[24:20, 1:5] #左上部分のみ数値を表示\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      long\nlat      -113.8   -111.3   -108.8   -106.3   -103.8\n  36.2 310.7778 313.9722 313.9722 306.1111 300.1389\n  33.7 307.0833 307.0833 298.8889 297.7222 299.6944\n  31.2 300.3056 300.3056 296.6944 298.2500 294.1667\n  28.7 290.3056 287.6944 287.6944 276.3611 288.5278\n  26.2 282.4167 281.1667 278.7778 278.7778 279.1389\n```\n\n\n:::\n\n```{.r .cell-code}\n#ヒートマップ(高いところほど濃い色)\nheatmap(ar_mean, scale = \"none\",\n        Rowv = NA, Colv = NA)\n```\n\n::: {.cell-output-display}\n![](plyr_files/figure-html/ozone_vis-1.png){width=576}\n:::\n\n```{.r .cell-code}\n#季節要因を除いた後の各地点での標準偏差\nar_sd <- aaply(ar_deseas, 1:2, sd)\nar_sd[24:20, 1:5] #左上部分のみ数値を表示\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      long\nlat       -113.8    -111.3    -108.8    -106.3    -103.8\n  36.2 15.005658 12.812271 12.812271 12.150841 10.137015\n  33.7 12.236271 12.236271  8.823250  9.270989 10.212678\n  31.2 10.311851 10.311851 10.156382  9.056539  9.032406\n  28.7  8.876504  8.854916  8.854916  9.176301  8.386308\n  26.2  7.285146  7.470320  7.503187  7.503187  8.058870\n```\n\n\n:::\n\n```{.r .cell-code}\n#ヒートマップ(高いところほど濃い色)\nheatmap(ar_sd, scale = \"none\",\n        Rowv = NA, Colv = NA)\n```\n\n::: {.cell-output-display}\n![](plyr_files/figure-html/ozone_vis-2.png){width=576}\n:::\n:::\n\n\n\n\n### 短所\n\n一方、短所は後継となるdplyrパッケージやこれを含むtidyverse環境とは併存しづらいということです。\n\n基本的に、tidyverse環境を前提とするのであれば\nデータフレームの操作はdplyrパッケージの方が扱いやすいケースが多く、\nplyrパッケージが必要となる場面は限定的でしょう。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Sepal.LengthとSepal.Widthの比の平均値を種類ごとに計算\n#plyrパッケージの場合\ndf_iris <- iris\ndf_iris_tmp <- plyr::mutate(df_iris,\n                        Sepal.Rate = Sepal.Length / Sepal.Width)\nddply(df_iris_tmp, .(Species),\n      plyr::summarise,\n      mean_Sepal.Rate = mean(Sepal.Rate))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"mean_Sepal.Rate\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"setosa\",\"2\":\"1.470188\"},{\"1\":\"versicolor\",\"2\":\"2.160402\"},{\"1\":\"virginica\",\"2\":\"2.230453\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#dplyrパッケージの場合\nlibrary(dplyr)\ndf_iris <- iris\ndf_iris %>%\n  dplyr::mutate(Sepal.Rate = Sepal.Length / Sepal.Width) %>%\n  dplyr::group_by(Species) %>%\n  dplyr::summarise(mean_Sepal.Rate = mean(Sepal.Rate))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"Species\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"mean_Sepal.Rate\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"setosa\",\"2\":\"1.470188\"},{\"1\":\"versicolor\",\"2\":\"2.160402\"},{\"1\":\"virginica\",\"2\":\"2.230453\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\nそれでも、配列に対する操作等のplyrパッケージ特有の機能を理由に、\ndplyrパッケージとplyrパッケージを敢えて併存させることは考えられます。\n\nこの場合に問題となるのは、両者で関数名の競合が多くみられ、\nどちらのパッケージの関数を用いているのかに気を配る必要がある点です。\n\n例えば以下のようにplyrパッケージをdplyrパッケージよりも後に読み込んだうえで、\n関数のパッケージ名を明示せずに使用した場合、\n意図しない動作を引き起こしてしまいます。\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#読み込んでいるパッケージを環境から取り外す（読み込む前の状態に戻る）\ndetach(\"package:dplyr\") \ndetach(\"package:plyr\")\n\n#dplyr→plyrの順で読み込んでしまうと、dplyrの関数群がplyrのものでマスクされる\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(plyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n------------------------------------------------------------------------------\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nYou have loaded plyr after dplyr - this is likely to cause problems.\nIf you need functions from both plyr and dplyr, please load plyr first, then dplyr:\nlibrary(plyr); library(dplyr)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n------------------------------------------------------------------------------\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'plyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:dplyr':\n\n    arrange, count, desc, failwith, id, mutate, rename, summarise,\n    summarize\n```\n\n\n:::\n\n```{.r .cell-code}\n#以下のように書くとplyrパッケージのsummarise関数が実行されるため、\n#グループごとの集計に失敗\ndf_iris <- iris\ndf_iris %>%\n  mutate(Sepal.Rate = Sepal.Length / Sepal.Width) %>%\n  group_by(Species) %>%\n  summarise(mean_Sepal.Rate = mean(Sepal.Rate))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mean_Sepal.Rate\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1.953681\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\nこのような事態を防ぐには、plyrパッケージを読み込んでからdplyrパッケージを読み込むか、\n`plyr::***`のように逐次パッケージ名を明記するかのいずれかを選択することになります。\n前者の方法をとる場合でも、dplyrパッケージ自体が他のパッケージの前提となっている（知らぬ間に読み込まれてしまっている）こともあり、十二分に注意が必要です。\n\nこのような煩雑さを避けるため、前節で挙げたようなケースでも敢えてR標準機能でしのぐことは考えられます。\n\n\n## 参考文献\n\n::: {#refs}\n:::\n",
    "supporting": [
      "plyr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}