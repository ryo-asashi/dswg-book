{
  "hash": "7ebd49f3f45b19b6967d4062fa8f5400",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"rsample\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    fig-width: 6\n    fig-height: 5\nreferences:\n- id: BIB_NYCFLIGHTS13\n  type: article\n  title: \"nycflights13: Flights that Departed NYC in 2013 / Flights data\"\n  URL: https://nycflights13.tidyverse.org/reference/flights.html\n  author:\n    - Hadley Wickham\n  issued:\n    - year: 2021\n  accessed:\n    - year: 2024\n      month: 7\n      day: 13\n- id: BIB_RSAMPLE\n  type: article\n  title: \"General Resampling Infrastructure • rsample\"\n  URL: https://rsample.tidymodels.org/\n  author:\n    - Hannah Frick\n    - Fanny Chow\n    - Max Kuhn\n    - Michael Mahoney\n    - Julia Silge\n    - Hadley Wickham\n  issued:\n    - year: 2022\n  accessed:\n    - year: 2024\n      month: 7\n      day: 13\n- id: BIB_RSAMPLE_SLIDE_RESAMPLING\n  type: article\n  title: \"Time-based Resampling — slide-resampling • rsample\"\n  URL: https://rsample.tidymodels.org/reference/slide-resampling.html\n  author:\n    - Hannah Frick\n    - Fanny Chow\n    - Max Kuhn\n    - Michael Mahoney\n    - Julia Silge\n    - Hadley Wickham\n  issued:\n    - year: 2022\n  accessed:\n    - year: 2024\n      month: 7\n      day: 13\n- id: BIB_MATSUMURA_TIDYMODELS\n  type: book\n  publisher: 技術評論社\n  title: Rユーザのためのtidymodels[実践]入門〜モダンな統計・機械学習モデリングの世界\n  author:\n    - 松村優哉\n    - 瓜生真也\n    - 吉村広志\n  issued:\n    date-parts: #こういう書き方も可能な模様\n    - - 2023\n      - 1\n      - 6\nnocite: |\n  @*\n---\n\n\n\n\n\n\n## パッケージの概要\n\nrsampleはtidymodelsに含まれるパッケージのうちのひとつで、データ分割・リサンプリングに関する機能を提供します。\n学習データと評価データの分割、k分割交差検証やブートストラップ法などが行えるほか、\n層化抽出や時系列データの分割にも対応しています。\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13) #今回使用するデータセット\nlibrary(rsample)\n#以下、tidyverse, tidymodelsから必要なパッケージを追加\nlibrary(tibble) #data.frame拡張版\nlibrary(recipes) #前処理\nlibrary(parsnip) #モデル構築\nlibrary(yardstick) #精度評価\nlibrary(workflows) #学習過程のオブジェクト化\nlibrary(ggplot2) #可視化\n```\n:::\n\n\n\n\n## データセットの準備\n\n今回使用するデータセットnycflights13は2013年にニューヨークを出発した航空機に関するデータです。\n\n変数`arr_delay`は到着時の遅延時間（分）を表しており、\nこれを他の説明変数（出発日、離発着地点とその距離、航空会社コード等）から予測するモデルを構築することを考えます。\n\nデータセットの詳細は @BIB_NYCFLIGHTS13 を参照してください。\n\nなお、以下ではmagrittrパッケージによるパイプ演算子`%>%`[^pipe]と、\ndplyrパッケージによるデータ操作関数を使用しています。\n\n[^pipe]:右辺の関数の第1引数に左辺を渡すという演算子で、たとえば`a %>% f %>% g(b)`という記述は`g(f(a),b)`と同等です。\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_all_raw <- flights #flightsのほかにいくつかデータセットがあるが、それらは今回使用しない\n\n#文字列のfactor型への変換、目的変数がNAとなっているレコードの補完、予測に用いない説明変数の除去\ndf_all <- mutate(df_all_raw, across(where(is.character), as.factor)) %>%\n  mutate(arr_delay = if_else(is.na(arr_delay), mean(df_all_raw$arr_delay, na.rm = TRUE), arr_delay)) %>%\n  select(-time_hour, -tailnum, -arr_time)\n#time_hourはPOSIXct型で表した予定出発日時で、sched_dep_timeと意味合いは同じ。他のデータセットの結合に用いるもの。\n#tailnumは機体番号。カテゴリ数が多すぎて予測に利用するのが難しく、例として取り扱うには向かないため取り除く。\n#arr_timeは実際の到着時刻。予定到着時刻と合わせると目的変数(遅延時間)が判明してしまうため取り除く。\nsummary(df_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      year          month             day           dep_time    sched_dep_time\n Min.   :2013   Min.   : 1.000   Min.   : 1.00   Min.   :   1   Min.   : 106  \n 1st Qu.:2013   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.: 907   1st Qu.: 906  \n Median :2013   Median : 7.000   Median :16.00   Median :1401   Median :1359  \n Mean   :2013   Mean   : 6.549   Mean   :15.71   Mean   :1349   Mean   :1344  \n 3rd Qu.:2013   3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.:1744   3rd Qu.:1729  \n Max.   :2013   Max.   :12.000   Max.   :31.00   Max.   :2400   Max.   :2359  \n                                                 NA's   :8255                 \n   dep_delay       sched_arr_time   arr_delay           carrier     \n Min.   : -43.00   Min.   :   1   Min.   : -86.000   UA     :58665  \n 1st Qu.:  -5.00   1st Qu.:1124   1st Qu.: -16.000   B6     :54635  \n Median :  -2.00   Median :1556   Median :  -4.000   EV     :54173  \n Mean   :  12.64   Mean   :1536   Mean   :   6.895   DL     :48110  \n 3rd Qu.:  11.00   3rd Qu.:1945   3rd Qu.:  13.000   AA     :32729  \n Max.   :1301.00   Max.   :2359   Max.   :1272.000   MQ     :26397  \n NA's   :8255                                        (Other):62067  \n     flight     origin            dest           air_time        distance   \n Min.   :   1   EWR:120835   ORD    : 17283   Min.   : 20.0   Min.   :  17  \n 1st Qu.: 553   JFK:111279   ATL    : 17215   1st Qu.: 82.0   1st Qu.: 502  \n Median :1496   LGA:104662   LAX    : 16174   Median :129.0   Median : 872  \n Mean   :1972                BOS    : 15508   Mean   :150.7   Mean   :1040  \n 3rd Qu.:3465                MCO    : 14082   3rd Qu.:192.0   3rd Qu.:1389  \n Max.   :8500                CLT    : 14064   Max.   :695.0   Max.   :4983  \n                             (Other):242450   NA's   :9430                  \n      hour           minute     \n Min.   : 1.00   Min.   : 0.00  \n 1st Qu.: 9.00   1st Qu.: 8.00  \n Median :13.00   Median :29.00  \n Mean   :13.18   Mean   :26.23  \n 3rd Qu.:17.00   3rd Qu.:44.00  \n Max.   :23.00   Max.   :59.00  \n                                \n```\n\n\n:::\n:::\n\n\n\n\n## データの分割\n\nモデリングにおいては、構築したモデルの性能を評価するために、\nモデルの構築に用いるデータとその性能評価を行うためのデータを切り分けておくことが必要です。\n（以下、本稿では前者を「学習データ」、後者を「評価データ」といいます。）\n\n`initial_split`関数を用いることで、この学習データと評価データの切り分けを行うことができます。\n\n以下のようなコードで、データ全体のうち80%を学習データに、残りを評価データに切り分けることができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nsplit_df_all <- initial_split(df_all, prop = 0.8)\ndf_all_train <- training(split_df_all) #学習データ\ndf_all_test <- testing(split_df_all) #評価データ\n```\n:::\n\n\n\n\n`initial_split`関数で得られるオブジェクトに、\n`training`関数や`testing`関数を用いることでそれぞれのデータを得ることが出来ます。\n\n実際に80%と20%に切り分けられていることを確認してみます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplit_df_all #これでそれぞれのデータの行数が確認できる\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Training/Testing/Total>\n<269420/67356/336776>\n```\n\n\n:::\n\n```{.r .cell-code}\n#実際に分割されたデータの行数がこれに一致することを確認する\ncat(\"全データの行数:\", nrow(df_all),\n    \", 学習データの行数:\", nrow(df_all_train), \", 評価データの行数:\", nrow(df_all_test), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n全データの行数: 336776 , 学習データの行数: 269420 , 評価データの行数: 67356 \n```\n\n\n:::\n\n```{.r .cell-code}\n#行数だけでなく、データそのものについても確認してみる\ncat(\"全データのarr_delay合計:\", sum(df_all$arr_delay),\n    \"\\n学習データのarr_delay合計:\", sum(df_all_train$arr_delay),\n    \", 評価データのarr_delay合計:\", sum(df_all_test$arr_delay),\n    \"\\n上記の合計:\", sum(df_all_train$arr_delay)+sum(df_all_test$arr_delay), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n全データのarr_delay合計: 2322197 \n学習データのarr_delay合計: 1876791 , 評価データのarr_delay合計: 445406.2 \n上記の合計: 2322197 \n```\n\n\n:::\n:::\n\n\n\n\n\n以下では実際にモデル構築を行っていきますが、\nこのままでは件数が多くモデル構築に時間がかかってしまいます。\n\nモデルの精度向上よりも使用例の実行時間短縮を優先するため、以下では件数を減らしておくこととします。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\ndf_small <- testing(initial_split(df_all, prop = 0.98)) #336776件から2%分の6736件を取り出す\n\nset.seed(2024)\nsplit_df_small <- initial_split(df_small, prop = 0.9)\ndf_train <- training(split_df_small)\ndf_test <- testing(split_df_small)\n\nsplit_df_small\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Training/Testing/Total>\n<6062/674/6736>\n```\n\n\n:::\n:::\n\n\n\n\n## k分割交差検証法\n\n### `vfold_cv`関数の使い方\n\nモデルの精度検証でよく用いられる手法として**k分割交差検証法**(k-fold cross validation)と呼ばれるものがあります。\n\nこれは、データをk分割したうえで、1分割目以外のk-1個で学習→1分割目で精度検証、2分割目以外のk-1個で学習→2分割目で精度検証、…k分割目以外のk-1個で学習→k分割目で精度検証、のように学習～検証をk回反復するものです。\n\n前述の学習データと評価データの分割をさらに発展させたものといえますが、\nこのk分割交差検証法は主に学習データの中でモデルの精度を検証するために用いられます。\n（このことから、以下ではk分割交差検証法で学習に用いるデータを「分析セット」、検証に用いるデータを「検証セット」と呼び分けることとします。）\n\nrsampleパッケージの`vfold_cv`[^1]関数を用いることで、\nk分割交差検証法のための分析セットや検証セットを簡単に用意することが出来ます。\n\n[^1]: k-fold cross validationは **v-fold** cross validationと呼ばれることもあり、`vfold_cv`の関数名はそこから取られています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplitscv_df_train <- vfold_cv(df_train, v = 4) #4分割\nsplitscv_df_train #k回の学習～検証それぞれに使うsplitが格納されたdata.frame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#  4-fold cross-validation \n# A tibble: 4 × 2\n  splits              id   \n  <list>              <chr>\n1 <split [4546/1516]> Fold1\n2 <split [4546/1516]> Fold2\n3 <split [4547/1515]> Fold3\n4 <split [4547/1515]> Fold4\n```\n\n\n:::\n:::\n\n\n\n\n得られるものがデータフレームである以外は`initial_split`関数とほぼ同様に使えますが、\n`initial_split`で用いた関数は`training`と`testing`であった一方、\nこちらでは`analysis`と`assessment`になっています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(splitscv_df_train, 1, function(row) {\n  id <- row$id\n  split <- row$splits\n  df_analysis <- analysis(split)\n  df_assessment <- assessment(split)\n  paste0(\"id:\", id, \", df_analysisの行数:\", nrow(df_analysis), \", df_assessmentの行数:\", nrow(df_assessment))\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"id:Fold1, df_analysisの行数:4546, df_assessmentの行数:1516\"\n[2] \"id:Fold2, df_analysisの行数:4546, df_assessmentの行数:1516\"\n[3] \"id:Fold3, df_analysisの行数:4547, df_assessmentの行数:1515\"\n[4] \"id:Fold4, df_analysisの行数:4547, df_assessmentの行数:1515\"\n```\n\n\n:::\n:::\n\n\n\n\n\nなお、これによって学習データのk倍分のデータが用意されますが、\nメモリの使用量は単にk倍になるわけではなく、うまく節約されます。\n大規模なデータで交差検証を行う場合でも問題なく使用することが出来ます。\n\n\n### 使用例\n\n`vfold_cv`関数による交差検証を行う実例[^2]を紹介します。\n\n[^2]:以下では同じtidymodelsに含まれるパッケージを使用していますが、\n    rsampleパッケージを使用する際に必須というわけではなく、あくまでコードを見やすくするために導入しているものです。\n\n    tidymodelsに含まれる他のパッケージについても\n    合わせて学習されることをお勧めしますが、本稿では詳しい解説は割愛します。\n\nまずは前処理やモデルの定義を行います。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#前処理の手順を定義\n##k分割交差検証ではk回同じ前処理を繰り返していわゆる「リーク」を防止することがある\n##そこで前処理の手続き自体をオブジェクト化しておき、後で(for文の中で)実行するという方法をとる \nrec_init <- recipe(df_small, formula = arr_delay ~ .)\napply_poststeps <- function(rec){\n  rec <- rec %>%\n    step_impute_mean(all_numeric_predictors()) %>% #数値型のNAをその平均値で置換\n    step_dummy(all_factor()) #XGBoostを使用する際はすべてのデータを数値型で保持する必要があるため、factor型はダミー変数に変換\n}\n\n#今回用いるモデル(XGBoost)の定義を用意\nmodel_engine_xgboost <- boost_tree(mode = \"regression\", engine = \"xgboost\") %>%\n  #ハイパーパラメータの指定\n  set_args(trees = 300, learn_rate = 0.15, tree_depth = 6, min_n = 1, sample_size = 1, mtry = 75)\n\n#前処理とモデルの定義を1オブジェクトにまとめたもの\nwf_xgboost <- workflow() %>%\n  add_recipe(rec_init %>% apply_poststeps()) %>%\n  add_model(model_engine_xgboost)\n```\n:::\n\n\n\n\n\n最初に最低限の前処理だけを行ったモデルを構築し、\nその後は前処理やモデル構築の過程に改良を施すことにより精度改善を目指すこととします。\n\nここで精度を測る指標として、5分割交差検証によるRMSE平均を採用することとします。\nまずは最初のモデルに対して精度を測っておきます。\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#5分割で交差検証を行う\nset.seed(2024)\nsplitscv_df_train <- vfold_cv(df_train, v = 5)\n\ndo_cv <- function(splitscv_df_train, wf){#後で使いまわすため、交差検証の手続きを関数化\n  results_cv <- tibble(id = character(), rmse = numeric())\n  for(i in 1:nrow(splitscv_df_train)){\n    t1 <- proc.time()\n    #i番目の分析セットと検証セットを抽出\n    split <- splitscv_df_train$splits[[i]]\n    df_analysis <- analysis(split)\n    df_assessment <- assessment(split)\n    #分析セットで学習\n    set.seed(2024)\n    wfres <- wf %>% fit(data = df_analysis)\n    #検証セットで予測\n    df_test_xypredy <- wfres %>% \n      predict(new_data = df_assessment) %>%\n      bind_cols(df_assessment)\n    #RMSEで精度評価\n    res <- df_test_xypredy %>% \n      yardstick::rmse(truth = arr_delay, estimate = .pred)\n    #評価結果をデータフレームに記録\n    results_cv <- bind_rows(results_cv, tibble(id = splitscv_df_train$id[[i]], rmse = res$.estimate[[1]]))\n    #評価結果と経過時間を出力\n    t2 <- proc.time()\n    tm <- (t2-t1)[3]\n    cat(splitscv_df_train$id[[i]], \"... rmse:\", res$.estimate[[1]], \", 経過時間:\", tm, \"\\n\")\n  }\n  results_cv\n}\n\nwf <- wf_xgboost\nresults_cv <- do_cv(splitscv_df_train, wf) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFold1 ... rmse: 16.06052 , 経過時間: 1.4 \nFold2 ... rmse: 21.37279 , 経過時間: 1.15 \nFold3 ... rmse: 16.59439 , 経過時間: 1.14 \nFold4 ... rmse: 14.79878 , 経過時間: 1.14 \nFold5 ... rmse: 15.17561 , 経過時間: 1.1 \n```\n\n\n:::\n\n```{.r .cell-code}\nrmse1 <- mean(results_cv$rmse) #RMSEの平均値で精度を測ることにする\ncat(\"rmse平均値:\", rmse1, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nrmse平均値: 16.80042 \n```\n\n\n:::\n:::\n\n\n\n\n\nその後データを分析してみたところ、**出発した日付**（特徴量名`year`, `month`, `day`）が重要な特徴量であることがわかりました。\n遅延を発生させる事象が起きたかどうかを判断するのに日付が重要ということでしょう。\n（ホリデーシーズンで乗客が多かった、特定の日付で天候が悪化した、等…）\n\n今回のデータは年月日が別々の変数に格納されているので、上記のような事象を想定するならば年月日は一つの特徴量にまとめたほうがよいかもしれません。\nそこで、月と日をまとめた特徴量`monthday`を追加（2013年のデータしかないため年は無視）して精度が向上するか検証してみましょう。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#1/1からの経過日数+1 (うるう年の日付で計算)\nget_monthday <- function(month, day) {\n  as.numeric(difftime(as.Date(paste(2020, month, day, sep = \"-\")),\n                      as.Date(paste(2020, \"01-01\", sep = \"-\")), units = \"days\"))+1\n}\n#「月と日をまとめた特徴量を追加」というステップを前処理に追加\nwf <- wf_xgboost %>%\n  update_recipe(rec_init %>% step_mutate(monthday = get_monthday(month,day)) %>% apply_poststeps())\n\n#先ほどと同じ交差検証を行う\nresults_cv <- do_cv(splitscv_df_train, wf) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFold1 ... rmse: 16.20968 , 経過時間: 1.29 \nFold2 ... rmse: 21.4931 , 経過時間: 1.22 \nFold3 ... rmse: 16.56371 , 経過時間: 1.24 \nFold4 ... rmse: 14.42167 , 経過時間: 1.23 \nFold5 ... rmse: 15.65897 , 経過時間: 1.28 \n```\n\n\n:::\n\n```{.r .cell-code}\nrmse2 <- mean(results_cv$rmse)\ncat(\"rmse平均値:\", rmse2, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nrmse平均値: 16.86943 \n```\n\n\n:::\n:::\n\n\n\n\n特徴量追加前は16.8、追加後は16.87となりました。\n\nRMSEは小さいほど「精度が良い」という評価になるため、数値のうえでは若干の改善ということになりますが、\n大きく結果が変わったわけではなく、今回の分割数では偶然の可能性も否定できません。\n分割数を増やしたときに差が生まれるかどうかを確認してみてもよいでしょう。\n\nともかく、`vfold_cv`関数を用いることで交差検証のためのデータ分割が手軽に行えることがわかります。\n\n## ブートストラップ法\n\n### `bootstraps`関数の使い方\n\n**ブートストラップ法**も精度評価に用いられる手法のうちのひとつで、\nこちらは単純にデータを分割するのではなく、元データと同じ回数の復元抽出を何度も繰り返すものです。\n\n`rsample`パッケージの`bootstraps`関数を用いることで、\n復元抽出されたデータを簡単に用意することが出来ます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboots_train <- bootstraps(df_train, times = 4) #4回\nboots_train\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Bootstrap sampling \n# A tibble: 4 × 2\n  splits              id        \n  <list>              <chr>     \n1 <split [6062/2213]> Bootstrap1\n2 <split [6062/2223]> Bootstrap2\n3 <split [6062/2240]> Bootstrap3\n4 <split [6062/2243]> Bootstrap4\n```\n\n\n:::\n:::\n\n\n\n\n使用方法は`vfold_cv`関数と同様です。\n\n`analysis`で得られるものはもとのデータと同じ件数になっています。\n一方、`assessment`で得られるものは復元抽出で一度も選ばれなかったレコードを集めたもので、\n件数はそれぞれの試行で異なります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(boots_train, 1, function(row) {\n  id <- row$id\n  split <- row$splits\n  df_analysis <- analysis(split)\n  df_assessment <- assessment(split)\n  paste0(\"id:\", id, \", df_analysisの行数:\", nrow(df_analysis), \", df_assessmentの行数:\", nrow(df_assessment))\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"id:Bootstrap1, df_analysisの行数:6062, df_assessmentの行数:2213\"\n[2] \"id:Bootstrap2, df_analysisの行数:6062, df_assessmentの行数:2223\"\n[3] \"id:Bootstrap3, df_analysisの行数:6062, df_assessmentの行数:2240\"\n[4] \"id:Bootstrap4, df_analysisの行数:6062, df_assessmentの行数:2243\"\n```\n\n\n:::\n:::\n\n\n\n\n\n### 使用例\n\nブートストラップ法は機械学習におけるパラメータや予測値等について、\nその分布を図るのに用いられることがあります。\n\n以下ではブートストラップ法により10組の学習データを用意してみて、\nそれぞれによって評価データにおける予測値がどう変化するかを確認してみることにします。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nboots_train <- bootstraps(df_train, times = 10) #試行回数10回のブートストラップ法\n\nmodels <- tibble() #各試行での結果を保存するための変数\n#まずそれぞれのデータで学習してモデルを構築\nfor (i in 1:nrow(boots_train)){\n  id <- boots_train$id[[i]]\n  split <- boots_train$splits[[i]]\n  #学習データの前処理\n  recp <- rec_init %>% apply_poststeps() %>% prep(training = analysis(split), fresh = TRUE)\n  df_train_baked_tmp <- recp %>% bake(new_data = NULL)\n  #学習\n  set.seed(2024)\n  model_fitted_xgboost_tmp <- model_engine_xgboost %>% fit(arr_delay ~ ., data = df_train_baked_tmp)\n  models <- bind_rows(models, tibble_row(id = id, recp = recp, model = model_fitted_xgboost_tmp))\n}\n\n#それぞれの予測結果を集める\ndf_test_predy_tmp <- list()\nfor (i in 1:nrow(models)){\n  id <- models$id[[i]]\n  recp <- models$recp[[i]]\n  model_fitted_xgboost_tmp <- models$model[[i]]\n  #評価データの前処理\n  df_test_baked_tmp <- recp %>% bake(new_data = df_test)\n  #評価データで予測し、結果を格納\n  df_test_predy_tmp[[id]] <- predict(model_fitted_xgboost_tmp, new_data = df_test_baked_tmp)\n}\n```\n:::\n\n\n\n\nそれぞれの予測値をプロットしてみると次のとおり。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_test_predy_tmp_tidy <- tibble()\nfor(id in names(df_test_predy_tmp))\n  df_test_predy_tmp_tidy <- bind_rows(df_test_predy_tmp_tidy,\n                                      tibble(id_split = id, \n                                             id_instance = 1:nrow(df_test_predy_tmp[[id]]), \n                                             .pred = df_test_predy_tmp[[id]][[\".pred\"]]))\ndf_test_predy_tmp_tidy$id_split <- as.factor(df_test_predy_tmp_tidy$id_split)\n\nggplot() +\n  geom_point(aes(x = id_instance, y = .pred, colour = id_split),\n             data = df_test_predy_tmp_tidy %>% filter(id_instance <= 10),\n             position = position_jitter(width = 0.2, height = 0, seed = 2024))\n```\n\n::: {.cell-output-display}\n![](rsample_files/figure-html/bootstraps_ex2-1.png){width=576}\n:::\n:::\n\n\n\n\n条件によるものの、10分程度は遅延時間の予測値がブレるようです。\n※実際の遅延時間がこの分布に従うというわけではなく、あくまで現在のモデル（XGBoost）を前提としたときの予測値のブレであることに注意してください。\n\nまた、ブートストラップ法によって構築したモデルの平均値等を使用することで過学習を防止する、\n**バギング**という手法も存在しています。\n\n単体モデルと比較して精度が向上するかを確かめてみましょう。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##まず単体モデルの場合\nset.seed(2024)\n#XGBoost向けの前処理\nrecp <- rec_init %>% apply_poststeps() %>% prep(training = df_train, fresh = TRUE)\ndf_train_baked <- recp %>% bake(new_data = NULL)\ndf_test_baked <- recp %>% bake(new_data = df_test)\n#学習\nmodel_fitted_xgboost <- model_engine_xgboost %>% fit(arr_delay ~ ., data = df_train_baked)\n#予測\ndf_test_predy <- predict(model_fitted_xgboost, new_data = df_test_baked)\ndf_test_xypredy <- df_test_predy %>% bind_cols(df_test)\nres <- df_test_xypredy %>% yardstick::rmse(truth = arr_delay, estimate = .pred)\ncat(\"単体モデルのRMSE:\", res$.estimate[[1]],\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n単体モデルのRMSE: 17.72646 \n```\n\n\n:::\n\n```{.r .cell-code}\n##ブートストラップ法の10個のモデルの予測平均値の場合\ndf_test_predy_b <- tibble(.pred = rowMeans(do.call(cbind, df_test_predy_tmp))) #予測値の平均値を計算\ndf_test_xypredy_b <- df_test_predy_b %>% bind_cols(df_test)\nres <- df_test_xypredy_b %>% yardstick::rmse(truth = arr_delay, estimate = .pred)\ncat(\"10モデル平均のRMSE:\", res$.estimate[[1]],\"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n10モデル平均のRMSE: 17.30855 \n```\n\n\n:::\n:::\n\n\n\n\n今回の例ではブートストラップ法の平均のほうが勝ったようです。\n\n## 時系列データへの対応\n\n今回のデータにおいては出発した日付が重要な特徴量となっていました。\n\nホリデーシーズンのように日付からあらかじめ予測できる事象であればともかく、\n天候の悪化のような事象は将来の日付だけで特定できるものではなく、\nこれを前提に学習してしまうと、将来予測するためのモデルとしては使用できないと考えられます。\n\nこのような時系列データをもとに将来予測を行う場合は時刻によってデータを分割し、\n過去分を学習データ、将来分を評価データとするのが適切でしょう。\n\n### `initial_time_split`関数の使い方\n\n`initial_split`関数の代わりに`initial_time_split`関数を用いることで、このようなデータ分割を行うことができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\ntime_split <- initial_time_split(df_all, prop = 0.8)\ntime_split\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Training/Testing/Total>\n<269420/67356/336776>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntime_split %>% training() %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 16\n   year month   day dep_time sched_dep_time dep_delay sched_arr_time arr_delay\n  <int> <int> <int>    <int>          <int>     <dbl>          <int>     <dbl>\n1  2013     1     1      517            515         2            819        11\n2  2013     1     1      533            529         4            830        20\n3  2013     1     1      542            540         2            850        33\n4  2013     1     1      544            545        -1           1022       -18\n5  2013     1     1      554            600        -6            837       -25\n6  2013     1     1      554            558        -4            728        12\n# ℹ 8 more variables: carrier <fct>, flight <int>, origin <fct>, dest <fct>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\ntime_split %>% testing() %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 16\n   year month   day dep_time sched_dep_time dep_delay sched_arr_time arr_delay\n  <int> <int> <int>    <int>          <int>     <dbl>          <int>     <dbl>\n1  2013     7    21      925            847        38           1145        30\n2  2013     7    21      926            930        -4           1039       -17\n3  2013     7    21      926            930        -4           1230       -26\n4  2013     7    21      927            930        -3           1218       -30\n5  2013     7    21      927            815        72            930        55\n6  2013     7    21      929            925         4           1220         3\n# ℹ 8 more variables: carrier <fct>, flight <int>, origin <fct>, dest <fct>,\n#   air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nなお、この関数はデータから時系列を自動的に判断しているわけではありません。\n時系列順にデータをソートしてから分割するようにしてください。\n\n### `sliding_period`関数の使い方\n\n時系列データ特有のリサンプリング手法としてスライディングウィンドウ法があります。\n分析セット期間の長さ（例えば30日）と検証セット期間の長さ（例えば10日）を決めておいて、\n長さを一定のままデータ抽出する範囲（ウィンドウ）をスライドしていくものです。\n\nrsampleパッケージの`sliding_period`関数等で実現することが出来ます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#sliding_period関数を使用する際は時刻のデータをDate型やPOSIXct型で用意しておく必要がある\ndf_small_date <- df_small %>%\n  mutate(date = as.Date(paste(year, month, day, sep = \"-\"))) %>%\n  arrange(date) #時系列順にデータが並んでいる必要があるためソートしておく\n                                     \nsliding <- sliding_period(\n  data = df_small_date,\n  index = date, #データを区切るのに用いる時刻が入っている列名\n  every = 10, #10日単位でデータを区切る\n  period = \"day\",\n  origin = min(df_small_date$date), #データを区切るときの基準点\n  lookback = 2, #10×(1+2)=30日分を分析セットとする\n  assess_start = 4,#分析データの末日から、31～50日後を検証セットとする\n  assess_stop = 5,\n  step = 2, #データ抽出範囲を20日ずつずらしていく\n)\n\nfor(i in 1:5){\n  cat(sliding$id[[i]], \"分析セットの日付範囲:\", as.character(min(analysis(sliding$splits[[i]])$date)), \n      \"～\", as.character(max(analysis(sliding$splits[[i]])$date)),\n      \"検証セットの日付範囲:\", as.character(min(assessment(sliding$splits[[i]])$date)), \n      \"～\", as.character(max(assessment(sliding$splits[[i]])$date)), \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSlice01 分析セットの日付範囲: 2013-01-01 ～ 2013-01-30 検証セットの日付範囲: 2013-03-02 ～ 2013-03-21 \nSlice02 分析セットの日付範囲: 2013-01-21 ～ 2013-02-19 検証セットの日付範囲: 2013-03-22 ～ 2013-04-10 \nSlice03 分析セットの日付範囲: 2013-02-10 ～ 2013-03-11 検証セットの日付範囲: 2013-04-11 ～ 2013-04-30 \nSlice04 分析セットの日付範囲: 2013-03-02 ～ 2013-03-31 検証セットの日付範囲: 2013-05-01 ～ 2013-05-20 \nSlice05 分析セットの日付範囲: 2013-03-22 ～ 2013-04-20 検証セットの日付範囲: 2013-05-21 ～ 2013-06-09 \n```\n\n\n:::\n:::\n\n\n\n\n他に様々な関数や引数が用意されていますが、その詳細は @BIB_RSAMPLE_SLIDE_RESAMPLING を参照してください。\n\n## 引数`strata`による層化抽出\n\n学習データと評価データの分割の際に無作為抽出した場合、\n小さなカテゴリがある場合等の偏りのあるデータでは、両者でその分布が異なってしまうことがあります。\n\n例えばfactor型変数`carrier`を確認してみると、\n学習データと評価データで若干ながら分布が異なることがわかります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb_train <- table(df_train$carrier)\ntb_test <- table(df_test$carrier)\ntibble(carrier := names(tb_train), dist_train := as.double(tb_train), dist_test := as.double(tb_test)) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  carrier dist_train dist_test\n  <chr>        <dbl>     <dbl>\n1 9E             325        35\n2 AA             602        73\n3 AS              17         1\n4 B6             971        98\n5 DL             807       105\n6 EV             998       103\n```\n\n\n:::\n:::\n\n\n\n\n引数`strata`に列名を指定することで、その列ごとにデータを分けてから（指定した割合で）データ分割を行うようになります。\nこのような抽出方法を層化抽出といいます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(2024)\nsplit_df_small_strata <- initial_split(df_small, prop = 0.9, strata = carrier)\ndf_train_strata <- training(split_df_small_strata)\ndf_test_strata <- testing(split_df_small_strata)\n\ntb_train_strata <- table(df_train_strata$carrier)\ntb_test_strata <- table(df_test_strata$carrier)\ntibble(carrier := names(tb_train_strata), dist_train := as.double(tb_train_strata), dist_test := as.double(tb_test_strata)) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  carrier dist_train dist_test\n  <chr>        <dbl>     <dbl>\n1 9E             326        34\n2 AA             607        68\n3 AS              17         1\n4 B6             959       110\n5 DL             822        90\n6 EV             987       114\n```\n\n\n:::\n:::\n\n\n\n\n\nなお、非常に小さなカテゴリは他のカテゴリと統合して取り扱われます。\nその判定は引数`pool`で指定でき、そのデフォルト値は0.1となっています。\n\nまた、今回はfactor型変数による層化抽出を行いましたが、数値型変数も指定可能です。\nこの場合、分位点でいくつかのビンに分割して行われます。その分割数は引数`breaks`で指定できます。\n\n\n\n## 参考文献\n\n::: {#refs}\n:::\n",
    "supporting": [
      "rsample_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}