{
  "hash": "fc085b2e7d07f704724a096e11b38c07",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"tibble\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    fig-width: 6\n    fig-height: 3\n---\n\n\n\n\n\n\n### パッケージの概要\n\ntibbleは、従来のdata.frameを洗練させたデータ構造tibbleを作成することのできるパッケージです。また、このパッケージは、Rでモダンな分析環境を構築するためのパッケージ群である「tidyberse」に含まれています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(require(tidyverse))\nrequire(tibble)\nrequire(microbenchmark)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: microbenchmark\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'microbenchmark' was built under R version 4.5.1\n```\n\n\n:::\n:::\n\n\n\n\n### tibbleの作成方法\nas_tibble関数を利用することで、listや、data.frameをtibbleに変換することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas_tibble(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n```\n\n\n:::\n:::\n\n\n\n\nまた、tibble関数を用いると、個々のベクトルをまとめて、tibbleを作成することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(x = 1:3, y = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x     y\n  <int> <dbl>\n1     1     1\n2     2     1\n3     3     1\n```\n\n\n:::\n:::\n\n\n\n\n### data.frameとの違い①：表示\nあるデータをConsoleに表示する場合、tibbleはデフォルトでデータの表示数を制限し、Consoleがデータで埋め尽くされるのを防いでくれます。また、データの型がカラム名の下に表示されます。\n\n例えば、irisには150個のデータが含まれており、data.frameのまま表示すると、150個のデータが表示されます。一方、tibbleとして表示すると、Consoleに表示されるデータの数は10個だけです。\n（表示される数は、オプションで変更することが可能です）\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_tibble(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 150 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          4.6         3.1          1.5         0.2 setosa \n 5          5           3.6          1.4         0.2 setosa \n 6          5.4         3.9          1.7         0.4 setosa \n 7          4.6         3.4          1.4         0.3 setosa \n 8          5           3.4          1.5         0.2 setosa \n 9          4.4         2.9          1.4         0.2 setosa \n10          4.9         3.1          1.5         0.1 setosa \n# ℹ 140 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n#head関数を利用すれば、data.frameでも表示数をコントロール可能\nhead(iris, n=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1           5.1         3.5          1.4         0.2  setosa\n2           4.9         3.0          1.4         0.2  setosa\n3           4.7         3.2          1.3         0.2  setosa\n4           4.6         3.1          1.5         0.2  setosa\n5           5.0         3.6          1.4         0.2  setosa\n6           5.4         3.9          1.7         0.4  setosa\n7           4.6         3.4          1.4         0.3  setosa\n8           5.0         3.4          1.5         0.2  setosa\n9           4.4         2.9          1.4         0.2  setosa\n10          4.9         3.1          1.5         0.1  setosa\n```\n\n\n:::\n:::\n\n\n\n\n### data.frameとの違い②：列名の変換有無\nベクトルからdata.frameを作成する場合、自動で列名が変換されてしまうケースがあるが、tibbleを作成する場合、デフォルトの設定では列名が自動変換されません。\nまた、name_repairsをuniversalと指定すると、列名が変換されるようになります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(`a + b` = 1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  `a + b`\n    <int>\n1       1\n2       2\n3       3\n4       4\n5       5\n```\n\n\n:::\n\n```{.r .cell-code}\ndata.frame(`a + b` = 1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  a...b\n1     1\n2     2\n3     3\n4     4\n5     5\n```\n\n\n:::\n\n```{.r .cell-code}\ntibble(`a 1` = 1, `a 2` = 2, .name_repair = \"universal\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\n• `a 1` -> `a.1`\n• `a 2` -> `a.2`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n    a.1   a.2\n  <dbl> <dbl>\n1     1     2\n```\n\n\n:::\n:::\n\n\n\n\n### data.frameとの違い③：サブセット操作の厳密さ\n特定の列を指定して、データを表示する場合、tibbleでは厳密に列名を指定する必要があります。\nまた、data.frameはサブセットを指定する条件次第で、データフレームではなく、ベクトルを返すこともありますが、tibbleは常にtibbleを返します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(one = 1, two = \"a\", three = \"v\")\ndf2 <- tibble(df)\n\ndf$o\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\ndf2$o\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Unknown or uninitialised column: `o`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\ndf[, c(\"one\", \"two\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  one two\n1   1   a\n```\n\n\n:::\n\n```{.r .cell-code}\ndf2[, c(\"one\", \"two\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n    one two  \n  <dbl> <chr>\n1     1 a    \n```\n\n\n:::\n\n```{.r .cell-code}\ndf[, \"one\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\ndf2[, \"one\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n    one\n  <dbl>\n1     1\n```\n\n\n:::\n:::\n\n\n\n\n### data.frameとの違い④：パフォーマンス\nas.tibble()は、as.data.frame()よりも高速です\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX <- list(1:10000, 1:10000, 1:10000)\nnames(X) <- c(\"test1\", \"test2\", \"test3\")\nmicrobenchmark(\n  as_tibble(X),\n  as.data.frame(X)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n             expr   min    lq    mean median    uq   max neval\n     as_tibble(X)  78.9  85.8 100.425  90.85  94.5 368.8   100\n as.data.frame(X) 150.5 158.9 172.055 164.75 170.6 307.0   100\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}