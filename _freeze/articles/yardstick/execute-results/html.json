{
  "hash": "2bee7debeb7426a42ea325a583557d37",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"yardstick\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    toc: true\n    toc_depth: '3'\n    fig_width: 6\n    fig_height: 3\n---\n\n\n\n\n\n\n## パッケージの概要\nyardstickは機械学習や予測モデリングを行うためのパッケージ群tidymodelsに含まれており、構築したモデルの性能を評価するための指標(評価指標)を計算する機能を提供するパッケージです。\n様々な種類の評価指標に対応する関数が用意されていますので、構築したモデルやデータの性質、ビジネス上の目的を踏まえて、適切な指標を選択し使用していく必要があります。\n\n## 基本的な使用方法\n\nyardstickの基本的な使用方法を紹介します。\nテストデータとして、yardstickに含まれている二値分類用のテストデータtwo_class_exampleを使用します。\ntwo_class_exampleは真のクラスtruthと予測クラスpredicted、及び両クラスに対するクラス確率の予測値からなるデータセットです。\nクラス確率の閾値が0.5に設定されており、クラス1のクラス確率を示すカラムClass1が0.5を超えているレコードに対しては予測クラスを示すpredictedカラムが\"Class1\"、Class2クラスが0.5を超えているレコードではpredictedが\"Class2\"となっています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(yardstick)\nlibrary(dplyr)  \n\ndata(two_class_example, package = \"yardstick\")\nstr(two_class_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t500 obs. of  4 variables:\n $ truth    : Factor w/ 2 levels \"Class1\",\"Class2\": 2 1 2 1 2 1 1 1 2 2 ...\n $ Class1   : num  0.00359 0.67862 0.11089 0.73516 0.01624 ...\n $ Class2   : num  0.996 0.321 0.889 0.265 0.984 ...\n $ predicted: Factor w/ 2 levels \"Class1\",\"Class2\": 2 1 2 1 2 1 1 1 2 2 ...\n```\n\n\n:::\n:::\n\n\n\n\n\nyardstickでは、評価指標ごとに対応する関数が用意されています。\n算出したい評価指標に対応する関数にデータセットを渡し、真値および予測値を示すカラムを指定するのが基本的な使用方法です。  \n  \nここでは例として、正しいクラスに分類できた件数の割合を表す指標Accuracyを計算します。\n評価指標Accuracyに対してはaccuracy関数が用意されており、次のとおり使用します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_class_example %>%\n  accuracy(truth = truth, estimate = predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.838\n```\n\n\n:::\n:::\n\n\n\n結果はtibble形式で、.metricは評価指標名、.estimatorは評価指標の計算方法、算出された評価指標の数値は.estimateというカラムで返されます。\nAccuracyの値を見ると、two_class_exampleの予測クラスは約84%が真のクラスと一致していることがわかります。  \n  \nなお各評価指標の計算関数は、上の例のように、計算したい予測値と真値をデータフレームで渡す関数のほかに、ベクトルでデータを渡すバージョンも用意されています。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy_vec(truth = two_class_example$truth, estimate = two_class_example$predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.838\n```\n\n\n:::\n:::\n\n\n\n評価指標Accuracyの例を示しましたが、基本的な使用方法は他の評価指標の関数も同様です。\n以降では、回帰問題および分類問題にわけて、代表的な評価指標と対応するyardstickの関数の使用例を紹介していきます。\n\n## 回帰問題の評価指標\n\n数値データを予測する回帰問題における、代表的な評価指標とyardstickによる使用例を紹介します。\nサンプルデータとして、yardstickで用意されているsolubility_testデータを用います。\nsolubility_testデータは、数値型の真値solubilityと予測値predictionの二つのカラムを持つデータセットです。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"solubility_test\", package = \"yardstick\")\nstr(solubility_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t316 obs. of  2 variables:\n $ solubility: num  0.93 0.85 0.81 0.74 0.61 0.58 0.57 0.56 0.52 0.45 ...\n $ prediction: num  0.368 -0.15 -0.505 0.54 -0.479 ...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x=solubility_test$prediction, y=solubility_test$solubility)\n```\n\n::: {.cell-output-display}\n![](yardstick_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n**MAE**  \nMAE(Mean Absolute Error)は次式のとおり、真の値と予測値との差の絶対値について平均を取った指標です。\nすなわち、真の値に対して予測値が平均的にどの程度ずれているのかを評価する指標となっています。\nここで、$N$はデータの件数、$y_i$と$\\hat{y_i}$はそれぞれデータ$i$に対する真の値および予測値を表します。\n\n$$\n\\frac{1}{N}\\sum_{i=1}^{N}|y_i-\\hat{y_i}|\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsolubility_test %>%\n  mae(truth = solubility, estimate = prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 mae     standard       0.545\n```\n\n\n:::\n:::\n\n\n\n\n\n\n**RMSE**  \nRMSE(Root Mean Squared Error)は真値と予測値との差の二乗の平均を取った指標(MSE)の平方根です。\n誤差の二乗をもとに計算した指標なので、予測値のずれが大きなデータに対してはMAEよりも大きな値が加算されることになります。\nしたがって、外れ値や誤差が大きくなることに対して、より大きなペナルティを課したい場合に適切な指標指標と考えられます。\n\n$$\n\\sqrt{\\frac{1}{N}\\sum_{i=1}^{N}(y_i-\\hat{y_i})^2}\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsolubility_test %>%\n  rmse(truth = solubility, estimate = prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.722\n```\n\n\n:::\n:::\n\n\n\n\n\n\n**決定係数**  \n決定係数は、目的変数のばらつき(総変動)のうち説明変数により説明される割合で、モデルの当てはまりの良さを示す指標として使用されます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsolubility_test %>%\n  rsq(truth = solubility, estimate = prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.879\n```\n\n\n:::\n:::\n\n\n\n\n\n\nyardstickのrsq関数は相関係数の二乗として実装されており、(0, 1)の範囲を取ります。\n一方、rsq_tradは1-残差変動/総変動として計算されているバージョンです。\n両者は線形回帰モデルでない場合一致せず、また線形回帰モデル以外にrsq_tradを適用すると値が負になる可能性もある等、特に線形モデル以外への決定係数の適用とその解釈には注意が必要です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsolubility_test %>%\n  rsq_trad(truth = solubility, estimate = prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 rsq_trad standard       0.879\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## 分類問題の評価指標\n\n続いて、分類問題に関する評価指標とyardstickによる使用例を紹介します。\nここでもサンプルデータとして、冒頭で紹介したtwo_class_exampleを使用します。\nなおtwo_class_exampleデータがそうなっているように、分類問題の評価指標の関数に渡す真値および予測値はfactor型でなければなりません。\n  \n**混同行列**  \n最初に、分類問題における代表的な評価指標の計算に使用される、混同行列(Confusion Matrix)を紹介します。\n混同行列は、真のクラスと予測クラスの組み合わせでデータ件数を分割表にまとめたもので、yardstickではconf_mat関数で出力することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_class_example %>%\n  conf_mat(truth = truth, estimate = predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction Class1 Class2\n    Class1    227     50\n    Class2     31    192\n```\n\n\n:::\n:::\n\n\n\n陽性(positive)と陰性(negative)とで判別する二値分類の混同行列は２×２の分割表となりますが、一般的に以下の名称でまとめられます。\n\n+----------------+---------------+-------------------+--------------------+\n|                                | Truth                                  |\n+                                +-------------------+--------------------+\n|                                | Positive          | Negative           |\n+================+===============+===================+====================+\n| **Prediction** | **Positive**  | TP(true positive) | FP(false positive) |\n+                +---------------+-------------------+--------------------+\n|                | **Negative**  | FN(false negative)| TN(true negative)  |\n+----------------+---------------+-------------------+--------------------+\n\n: 2 $\\times$ 2 confusion matrix.\n\n以降では、2×2の混同行列を前提として、上表の表記で評価指標を紹介していきます。  \n  \n**Accuracy(正解率)**  \n冒頭でも紹介した評価指標Accuracyは、真のクラスがpositiveのデータを正しくpositiveと予測できた、または真のクラスがnegativeのデータを正しくnegativeと予測できた件数の割合ですので、混同行列からは以下の通り計算されます。\n\n$$\\frac{TP+TN}{TP+TN+FN+FP}$$\nyardstickでの実行例は次のとおりです。(冒頭で紹介したものと同じです。)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_class_example %>%\n  accuracy(truth = truth, estimate = predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.838\n```\n\n\n:::\n:::\n\n\n\nAccuracyはわかりやすい指標ですが、クラスごとの件数に偏りがある不均衡データの場合には注意が必要です。\n例えば、Class1が全体の95%を占めるようなデータの場合、「全てのデータを一律Class1と予測する」モデルのAccuracyは95%という一見高い数値となります。\nこれがもし、少数のクラス(Class2)が重要であり、Class2を正しく識別したいような問題の場合、Accuracyは適切な評価指標とは言えないでしょう。  \n  \n**Precision(適合率)**  \nPrecisionは、positiveと予測したデータのうち真のクラスがpositiveであった割合を示す指標で、具体的には以下の通りです。\n\n$$\\frac{TP}{TP+FP}$$\nyardstickではprecision関数で計算します。\n真値及び予測値のfactor型変数において、2クラスのうちどちらをpositiveとして計算するかは、event引数に\"first\"または\"second\"を渡して指定することができ、省略した場合のデフォルトは\"first\"です。このevent引数によるpositiveクラスの設定方法に関しては、以降で紹介する分類用の評価指標関数において同様です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_class_example %>%\n  precision(truth = truth, estimate = predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric   .estimator .estimate\n  <chr>     <chr>          <dbl>\n1 precision binary         0.819\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\nPrecisionは予測値がpositiveであるデータに着目した評価指標なので、偽陽性(FP)を減らしたい場合に有効です。\nスパムメールの分類においてスパムをpositiveとして判別したい場合や、あるサービスについて解約が見込まれる顧客をpositiveと予測し何らかのコストのかかる施策を打って対応する場合等、positiveと予測するからには高い的中率でありたい状況での適用が考えられます。\n\n**Recall(再現率)**  \nRecallは真の値がpositiveのデータのうち、正しくpositiveと予測したデータの割合です。\n算式とyardstickによる実行例は以下の通りです。\n\n$$\\frac{TP}{TP+FN}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_class_example %>%\n  recall(truth = truth, estimate = predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 recall  binary         0.880\n```\n\n\n:::\n:::\n\n\n\n\nRecallは真の値がpositiveのデータに着目した評価指標なので、例えばpositiveデータの割合が小さい不均衡データにおいて、真の値がpositiveであるデータを見逃さないようにしたい、といった状況で有効です。\n\n**F-β score**  \nPrecisionとRecallは着目する観点が異なっていましたが、どちらも考慮した評価指標としてF-β scoreがあります。\n算式は次の通りで、$\\beta$はRecallとPrecisionのどちらを重視するかを調整するパラメータです。\n両者に差をつけない$\\beta=1$のとき、F-1 score呼ばれます。\n\n$$\\frac{(1+\\beta^2)\\times Recall \\times Precision}{\\beta^2 \\times Precision + Recall}$$\nyardstickではf_meas関数で算出しますが、パラメータbetaを引数として渡すことができます。\n以下はF-1 scoreの算出例です。(betaのデフォルトは1なので、以下の場合省略も可能です。)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_class_example %>%\n  f_meas(truth = truth, estimate = predicted, beta = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 f_meas  binary         0.849\n```\n\n\n:::\n:::\n\n\n\n\n**Specificity**  \nRecallは真値がpositiveのデータに着目して、正しくpositiveと予測できた割合を示す指標でしたが、同様の考え方で真値がnegativeのデータに着目した指標がSpecificityです。\n\n$$\\frac{TN}{TN+FP}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_class_example %>%\n  spec(truth = truth, estimate = predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 spec    binary         0.793\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n**ROC AUC**  \nここまでの指標は、予測クラスをpositiveクラスとnegativeクラスのどちらかに分けた状態を前提としていました。\n実際には、多くのモデルは両クラスに属する確率(クラス確率)を算出し、例えばpositiveクラスのクラス確率が一定の閾値を上回ったデータについてpositiveと判定する、といった処理が行われることも多いでしょう。\nクラス確率に対する閾値を変えると、予測クラスが変わり混同行列も変化しますので、モデルの全体としての適切性にも影響を与えることになるでしょう。  \n  \nこのような、閾値の変化に対するモデルの予測結果の変化を可視化する方法として、ROC曲線(Receiver Operatorating Characteristic curve)という方法があります。\nROC曲線は、positiveクラスのクラス確率に対する閾値を1(全てのデータをnegativeと予測)から0(全てのデータをpositiveと予測)へと徐々に変化させたときの、各閾値における真陽性率(=Recall=Sensitivity)を縦軸、偽陽性率(=1-Specificity)を横軸としてプロットしたものです。\nyardstickでは、ggplot2パッケージのautoplot関数を利用してROC曲線を描画するための、roc_curve関数が用意されています。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\ntwo_class_example %>%\n  roc_curve(truth, Class1) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](yardstick_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n分類の精度が良いモデルでは、多くの閾値において真陽性率(真のクラスがpositiveのときに正しくpositiveと分類できる割合)が高く、偽陽性率(真のクラスがnegativeのときに誤ってpositiveと分類する割合)が低いこと、すなわちROC曲線が左上に広がっている状態が期待されるでしょう。\n逆に完全にランダムな分類器では、真のクラスがpositiveであろうとnegativeであろうと、等確率でpositiveに分類することになりますので、ROC曲線は傾き1の直線(上図の点線)となります。  \n  \nROC曲線の下部の面積(AUC; Area Under Curve)を測ることで、上の議論を定量的に評価することができます。\nAUC=0.5はランダムな分類器に対応し、AUCが1に近づくほど、多くの閾値でよい分類性能を示していることになります。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_class_example %>%\n    roc_auc(truth, Class1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.939\n```\n\n\n:::\n:::\n\n\n\n\n**Log loss**  \nクラス確率を使用して評価する他の指標として、Log lossを紹介します。\nLog lossは以下の式で計算され、各データにおいて正解クラスに対して高いクラス確率を予測できていると小さい値が、誤ったクラスに対して高いクラス確率を予測していると大きな値が加算されます。\nそのため、数値が小さいほど精度の高いモデルということになります。\n\n$$\n-\\frac{1}{N}\\sum^{N}_{i=1}[y_i\\log(p_i)+(1-y_i)\\log(1-p_i)]\n$$\nここで$N$はデータ数、$y_i$はデータ$i$に対する正解ラベル(1 or 0)、$p_i$はクラス$y=1$に対するクラス確率です。  \nyardstickでは以下のとおり計算できます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_class_example %>%\n  mn_log_loss(truth = truth, Class1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric     .estimator .estimate\n  <chr>       <chr>          <dbl>\n1 mn_log_loss binary         0.328\n```\n\n\n:::\n:::\n\n\n\n\n\nLog lossは予測したクラス確率を直接評価する指標なので、モデルで予測した確率を用いて期待値を計算するような場合等で有効な指標と考えられます。\nただし、確率に着目しているが故に、閾値を設けて分類まで行うような問題では、以下のようなケースが発生し得ることに注意が必要です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2データの2クラス分類問題\ny <- factor(c(1, 1), levels = c(1, 2)) # 正解クラスは両データとも1\np1 <- c(0.99, 0.49)  # モデル1のクラス1確率の予測値\np2 <- c(0.51, 0.51)  # モデル2のクラス1確率の予測値\n\nlogloss_1 <- mn_log_loss_vec(y, p1)\nlogloss_2 <- mn_log_loss_vec(y, p2)\ncat(\"model 1: \", logloss_1, \"\\nmodel 2: \", logloss_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nmodel 1:  0.3617001 \nmodel 2:  0.6733446\n```\n\n\n:::\n:::\n\n\n\nこの例では、高い確信度をもって1データ目をクラス1と予測している、モデル1のLog lossの数値が小さくなっています。\n一方で、仮に閾値を0.5として分類まで行うような場合では、モデル2は両データとも正解ですが、モデル1ではデータ2は不正解となり、Log lossによる判断とは逆の結果となります。\nこのように、閾値を設けて分類まで行うような状況では、クラス確率の予測値そのものに着目するLog lossよりも、クラス確率の順序関係を重視しているROC AUCを使用することが考えられます。  \n\n**多クラス分類**  \nここまでは二値分類を前提として評価指標を紹介してきましたが、多クラス分類についても簡単に紹介します。\n次の例ではyardstickの多クラス分類用のテストデータhpc_cvを用います。\nこのデータセットは4クラスの分類を行うためのもので、真のクラスであるobs、予測クラスpred、各クラスのクラス確率の予測値のカラムを持ちます。\n更に、データを分割しての検証(クロスバリデーション)を意図した、グループを示すカラムResampleが用意されています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(hpc_cv, package = \"yardstick\")\nstr(hpc_cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3467 obs. of  7 variables:\n $ obs     : Factor w/ 4 levels \"VF\",\"F\",\"M\",\"L\": 1 1 1 1 1 1 1 1 1 1 ...\n $ pred    : Factor w/ 4 levels \"VF\",\"F\",\"M\",\"L\": 1 1 1 1 1 1 1 1 1 1 ...\n $ VF      : num  0.914 0.938 0.947 0.929 0.942 ...\n $ F       : num  0.0779 0.0571 0.0495 0.0653 0.0543 ...\n $ M       : num  0.00848 0.00482 0.00316 0.00579 0.00381 ...\n $ L       : num  1.99e-05 1.01e-05 5.00e-06 1.56e-05 7.29e-06 ...\n $ Resample: chr  \"Fold01\" \"Fold01\" \"Fold01\" \"Fold01\" ...\n```\n\n\n:::\n:::\n\n\n\n多クラス分類のデータに対しても、一部の関数は二値分類と同じように適用することができます。\n以下では、hpc_cvデータのFold01に対して、正しく真のクラスを予測できている割合Accuracyを計算しています。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhpc_cv %>%\n  filter(Resample == \"Fold01\") %>%\n  accuracy(obs, pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy multiclass     0.726\n```\n\n\n:::\n:::\n\n\n\n\nPrecisionやRecall等の多クラス分類への拡張方法はいくつかありますが、ここでは、これら関数のデフォルトに設定されているMacro averagingをいう方法を紹介します。\nMacro averagingでは、複数あるクラスごとに「当該クラス」対「それ以外のクラス」の二値分類として評価指標を計算し、計算した指標について全クラスの平均を取る方法です。\nすなわち、kクラスの分類では、$Pr_{1}$を「クラス1」と「それ以外のクラス」の二値分類に関して計算したPrecision、$Pr_{2}$を「クラス2」と「それ以外のクラス」に対するPrecision、というようにkクラスの計算を行った上で以下のとおり平均を取った指標です。\n$$\n\\frac{Pr_1+Pr_2+\\dots+Pr_k}{k}\n$$\nyardstickのprecision関数は、多クラス分類用のデータを渡すと自動的に多クラス分類用の計算を行ってくれます。\n引数estimatorに\"macro\"を設定することでMacro averagingを明示的に指定することができますが、多クラス分類用のデータを与えるとデフォルトでMacro averagingが計算されるため省略可能です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhpc_cv %>%\n  filter(Resample == \"Fold01\") %>%\n  precision(obs, pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric   .estimator .estimate\n  <chr>     <chr>          <dbl>\n1 precision macro          0.637\n```\n\n\n:::\n:::\n\n\n\n\n\n\nここまでいくつかの評価指標を紹介してきましたが、yardstickには他にも様々な評価指標が用意されていますので、必要に応じてyardstickの公式サイトをご参照ください。\n\n## その他便利な機能\n\n### グループ別の評価指標の計算\nhpc_cvデータはクロスバリデーション用のグループを示すResampleカラムが用意されていました。\nyardstickの各評価指標の関数は、dplyerパッケージのgroup_by関数によりグループ化することで、グループごとの評価指標を計算することができます。\n以下ではResampleカラムでグループ化し、グループごとのAccuracyを計算しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhpc_cv %>%\n  group_by(Resample) %>%\n  accuracy(obs, pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   Resample .metric  .estimator .estimate\n   <chr>    <chr>    <chr>          <dbl>\n 1 Fold01   accuracy multiclass     0.726\n 2 Fold02   accuracy multiclass     0.712\n 3 Fold03   accuracy multiclass     0.758\n 4 Fold04   accuracy multiclass     0.712\n 5 Fold05   accuracy multiclass     0.712\n 6 Fold06   accuracy multiclass     0.697\n 7 Fold07   accuracy multiclass     0.675\n 8 Fold08   accuracy multiclass     0.721\n 9 Fold09   accuracy multiclass     0.673\n10 Fold10   accuracy multiclass     0.699\n```\n\n\n:::\n:::\n\n\n\n\n### 複数評価指標のセット化\nyardstickのmetric_set関数を使用すると、複数の評価指標をまとめて1セットとした評価指標の関数を作成することができます。\n以下では、二値分類問題に対する三つの評価指標をまとめた新たな評価指標関数を作成し、two_class_exampleデータに適用しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_metrics <- metric_set(accuracy, precision, recall)\ntwo_class_example %>%\n  class_metrics(truth = truth, estimate = predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  .metric   .estimator .estimate\n  <chr>     <chr>          <dbl>\n1 accuracy  binary         0.838\n2 precision binary         0.819\n3 recall    binary         0.880\n```\n\n\n:::\n:::\n\n\n\nmetric_setは、データに対して複数の評価指標を一度に適用したいときに便利ですが、セットとしてまとめる評価指標は同じ問題に適用できるものでなければなりません。\n例えば回帰問題用のデータに使用するMAEの関数と、分類問題用のデータに使用するLog lossの関数とをmetric_setでまとめようとすると、エラーになるためご注意ください。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 以下は実行時エラー\n# error_metric_set <- metric_set(mn_log_loss, mae)\n```\n:::\n\n\n\n\nなお、yardstickには基本的な評価指標をいくつかまとめたセットがmetrics関数として既に用意されています。\nmetrics関数は、データの種類ごとにあらかじめ設定されている指標を計算して返してくれます。\n例えば、二値分類と回帰については、それぞれ以下に示す指標が返されます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 二値分類\ntwo_class_example %>%\n  metrics(truth = truth, estimate = predicted, Class1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  .metric     .estimator .estimate\n  <chr>       <chr>          <dbl>\n1 accuracy    binary         0.838\n2 kap         binary         0.675\n3 mn_log_loss binary         0.328\n4 roc_auc     binary         0.939\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 回帰\nsolubility_test %>%\n  metrics(truth = solubility, estimate = prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.722\n2 rsq     standard       0.879\n3 mae     standard       0.545\n```\n\n\n:::\n:::\n\n\n\n\n### パラメータ調整済の評価指標関数の作成\n先に紹介したように、F-β scoreはパラメータ$\\beta$を調整することでRecallとPrecisionのどちらを重視するかをコントロールできる指標で、対応するf_meas関数には引数betaとして指定できるものでした。\nf_measのように、実行時にパラメータを渡す評価指標は、metric_tweak関数を使用することで、あらかじめ所定のパラメータをセットした状態の関数を作ることができます。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# beta = 0.5の関数F-β関数を作成\nf_05_score <- metric_tweak(\"F-0.5 score\", f_meas, beta=0.5)\ntwo_class_example %>%\n  f_05_score(truth = truth, estimate = predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric     .estimator .estimate\n  <chr>       <chr>          <dbl>\n1 F-0.5 score binary         0.831\n```\n\n\n:::\n:::\n\n\n\n\nこれは複数のパラメータの組み合わせでmetric_setを作成したい場合等に便利です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# betaの値ごとのF-β scoreを計算\nf_1_score <- metric_tweak(\"F-1 score\", f_meas, beta=1)\nf_2_score <- metric_tweak(\"F-2 score\", f_meas, beta=2)\nf_beta_metric <- metric_set(f_05_score, f_1_score, f_2_score)\ntwo_class_example %>%\n  f_beta_metric(truth = truth, estimate = predicted)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  .metric     .estimator .estimate\n  <chr>       <chr>          <dbl>\n1 F-0.5 score binary         0.831\n2 F-1 score   binary         0.849\n3 F-2 score   binary         0.867\n```\n\n\n:::\n:::\n\n\n\n\n## 参考資料\n\n[1] Kuhn et al., (2020). Tidymodels: a collection of packages for modeling and machine learning using tidyverse principles. [https://www.tidymodels.org](https://www.tidymodels.org).  \n[2] Kuhn M, Vaughan D, Hvitfeldt E (2025). yardstick: Tidy Characterizations of Model Performance. R package version 1.3.2, https://yardstick.tidymodels.org, https://github.com/tidymodels/yardstick.\n",
    "supporting": [
      "yardstick_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}