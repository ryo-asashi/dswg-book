{
  "hash": "384b968081d36a45cd39a662f66fd44a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"evd\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat: html\n---\n\n\n\n\n\n\n## パッケージの概要\n\nevdは、極値理論に基づく統計解析を行うためのパッケージです。\nシミュレーション、分布、分位点、密度関数をパラメトリック極値分布に拡張し、以下を計算するフィッティング関数を提供します。\n\n\n-   一変量および二変量の最大値モデルの最尤推定\n-   一変量および二変量の閾値モデルの最尤推定\n\n\n極値理論は、分布から大きく外れるような極端な事象をモデル化するための手法であり、保険分野においても、再保険や巨大自然災害リスクの分析、リスク管理でのテイル評価等に利用されています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(evd)\nrequire(knitr) #「従属パラメータと従属関数の関係」の表作成に使用\n```\n:::\n\n\n\n\n## 一変量極値分布のフィッティング\n\nまずは、一変量のデータを用いて極値分布のフィッティングを行います。rgev関数により一般化極値分布（GEV）に従う乱数を100個生成し、fgev関数を用いて生成したデータに最尤推定（MLE）でフィットさせます。\n\n\nなお、rgev関数の引数で次のとおりGEVのパラメータを指定しています。\n\n-   loc = 0 ：位置パラメータ $\\mu$\n-   scale = 1 ：尺度パラメータ $\\sigma$\n-   shape = 0.2：形状パラメータ $\\xi$\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# サンプルデータ生成 (GEV)\nset.seed(123)\nuv_data <- rgev(100, loc = 0, scale = 1, shape = 0.2)\n\n# GEVモデルをデータにフィットさせる\nfit_gev <- fgev(uv_data)\n```\n:::\n\n\n\n\nprint関数により、逸脱度（Deviance）やパラメータの推定値等のフィッティング結果を確認してみましょう。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# フィット結果の表示\nprint(fit_gev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall: fgev(x = uv_data) \nDeviance: 323.7182 \n\nEstimates\n     loc     scale     shape  \n-0.06327   0.93540   0.18417  \n\nStandard Errors\n    loc    scale    shape  \n0.10331  0.08055  0.06814  \n\nOptimization Information\n  Convergence: successful \n  Function Evaluations: 44 \n  Gradient Evaluations: 13 \n```\n\n\n:::\n\n```{.r .cell-code}\n# フィット結果のプロット\nplot(fit_gev)\n```\n\n::: {.cell-output-display}\n![](evd_files/figure-html/fgev_plot-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](evd_files/figure-html/fgev_plot-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](evd_files/figure-html/fgev_plot-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](evd_files/figure-html/fgev_plot-4.png){width=672}\n:::\n:::\n\n\n\n\n## クラスタリング\n\nclusters関数により、閾値を超える極値のクラスタリングを行うことができます。\n\n下記のコードの場合は、次の手順でクラスタリングを行っています。\n\n-   90％分位点を閾値とし、閾値を超過する値を検出\n-   閾値超過が現れると、クラスタを開始する\n-   クラスタは、5個の連続した値が閾値を下回る（または閾値と等しくなる）まではアクティブのままである\n-   5個の連続した値が閾値を下回る（または閾値と等しくなる）とクラスタ終了となる\n-   次に閾値超過が現れると、また新たなクラスタを開始する\n-   上記を繰り返す\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 閾値を超える値をクラスタリング\nclusters <- clusters(uv_data, u = quantile(uv_data, 0.90), r = 5, plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](evd_files/figure-html/clusters-1.png){width=672}\n:::\n\n```{.r .cell-code}\nprint(clusters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$cluster1\n         4          5          6          7          8          9         10 \n 4.9791797  3.8921295  1.2935390  1.3026215  2.3542219 -0.9087379  5.1398615 \n\n$cluster2\n     29 \n4.96719 \n\n$cluster3\n      51 \n3.082629 \n\n$cluster4\n      64       65       66 \n4.421884 2.946345 2.947338 \n\n$cluster5\n      78 \n4.413705 \n\n$cluster6\n        91         92         93         94         95         96 \n 9.6701628 -0.1021885  1.3614241 -0.1725861 -0.1076155  3.5756905 \n\nattr(,\"acs\")\n[1] 1.666667\n```\n\n\n:::\n:::\n\n\n\n\n:::{.callout-note}  \n### なぜクラスタリングを行うか\n時系列データでは、閾値を超える極端な値が連続して現れることが珍しくありません。例えば、一度の台風において高波が何度も起こったり、大地震の余震が連続して発生することはよくあるかと思います。このとき、こうした時系列データをそのまま統計モデルに当てはめると、独立同分布の仮定が成立しなくなってしまいます。そこで、極値理論では、これらの連続した極値を一つのクラスタとしてまとめる方法が使われているのです。\n:::\n\n## 二変量極値分布のフィッティング\n\n次に、二変量のデータを用いて同様に極値分布のフィッティングを行います。一変量と同じように、print関数によってフィッティング結果の確認も可能です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# サンプルデータ生成 (二変量ロジスティックモデル)\nset.seed(123)\nbv_data <- rbvevd(100, dep = 0.7, model = \"log\")\n\n# ロジスティックモデルをデータにフィットさせる\nfit_bv <- fbvevd(bv_data, model = \"log\")\nprint(fit_bv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall: fbvevd(x = bv_data, model = \"log\") \nDeviance: 578.8536 \nAIC: 592.8536 \nDependence: 0.3276571 \n\nEstimates\n    loc1    scale1    shape1      loc2    scale2    shape2       dep  \n 0.01609   0.97473  -0.04024   0.12028   0.93140  -0.08733   0.74187  \n\nStandard Errors\n   loc1   scale1   shape1     loc2   scale2   shape2      dep  \n0.10914  0.08230  0.07296  0.10225  0.07103  0.05012  0.06162  \n\nOptimization Information\n  Convergence: successful \n  Function Evaluations: 44 \n  Gradient Evaluations: 11 \n```\n\n\n:::\n:::\n\n\n\n\n作成した二変量極値分布について、abvevd関数を用いれば従属構造を確認できます。「plot = TRUE」とすることで従属関数がプロット表示されるので、2つの変数間の極端な値の同時発生に対する従属関係を可視化できます。\n\n先ほどのフィッティング結果より、生成したデータの従属パラメータdepは0.74187となっており、弱い従属関係と言えます。このため、従属関数の形状も緩やかに下に凹んでいるのがわかります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 従属関数のプロット\nabvevd(dep = fit_bv$estimate[\"dep\"], model = \"log\", plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](evd_files/figure-html/abvevd-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfit_bv$estimate[\"dep\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      dep \n0.7418707 \n```\n\n\n:::\n:::\n\n\n\n\n:::{.callout-note}  \n### 従属パラメータと従属関数の関係\n\n従属パラメータdepは0から1までの値を取り、従属パラメータの大小によって従属関数の形状や従属の程度は下表のとおりとなります。\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 従属パラメータと従属関数の関係\n\n|dep |従属関数の形          |意味         |\n|:---|:---------------------|:------------|\n|1   |A(w) = 1              |完全独立     |\n|0.7 |少し凹む              |弱い従属     |\n|0.4 |かなり凹む            |中程度の従属 |\n|0.1 |V字に近い             |強い従属     |\n|0   |A(w) = max(w, 1 − w) |完全従属     |\n\n\n:::\n:::\n\n\n\n\n:::\n\n## 独立性の仮説検定\n\n最後に、独立性の仮説検定を行います。evind.test関数により検定が可能です。二変量ロジスティックモデルを仮定して、帰無仮説dep=1（独立）に対して、対立仮説dep<1（従属あり）を検定します。なお、evind.test関数ではmethodの引数により、スコア検定（score）か尤度比検定（ratio）が選択できます。次のコードではスコア検定を行っています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 独立性検定（ロジスティックモデル）\nind_test <- evind.test(bv_data, method = \"score\")\nprint(ind_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tScore Test Of Independence\n\ndata:  bv_data\nnorm.score = -14.17, p-value < 2.2e-16\nalternative hypothesis: true dependence is greater than independence\nsample estimates:\n      dep \n0.7418707 \n```\n\n\n:::\n:::\n\n\n\n\n検定の結果を見ると、p値が非常に小さくなっており、帰無仮説（独立）を棄却できると考えられます。このため、変数間には統計的に有意な従属関係があると判断できます。先ほどabvevd関数により確認した内容と整合する結果となりました。\n",
    "supporting": [
      "evd_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}