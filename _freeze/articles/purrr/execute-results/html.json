{
  "hash": "615e12750e1023e8f8479c4006db22f1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"purrr\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\noutput:\n  word_document:\n    toc: yes\n    toc_depth: '3'\n    fig_width: 6\n    fig_height: 3\n---\n\n\n\n\n\n\n### パッケージの概要\n\npurrrは、ベクトルやリストに対して関数を適用し、データの加工や操作を効果的に行うためのユーティリティ関数や操作を提供します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(require(tidyverse))\nrequire(purrr)\n```\n:::\n\n\n\n\n### map関数\n\nmap関数はリストの各要素に対して、関数を適用した結果をリストに格納します 以下の例では、リストの各要素であるベクトルに対して、それぞれのベクトルの平均値を計算（meanを適用）します\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(1:2,1:3,1:4)\nmap(x,mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1.5\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 2.5\n```\n\n\n:::\n:::\n\n\n\n\nmap関数はベクトルに対しても適用することが可能です。 その場合、関数の各要素に対して、単独で適用され、結果はリストに格納されます。 mean関数に適用した場合は、単純に各ベクトルの要素がリストの各要素に格納されるだけとなりますが、例えば、rnorm関数に適用すれば、ベクトルの要素の数だけ、rnorm関数を適用した結果をリストに格納することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 1:3\nmap(y, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 2\n\n[[3]]\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nmap(y, rnorm, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1]  1.9824686  0.2751347 -0.1263742  0.6456573  0.5864637\n\n[[2]]\n[1]  3.11605499 -0.53956619  0.74846584 -0.01126552  2.02890768\n\n[[3]]\n[1] 2.479666 1.852039 3.013718 2.581137 3.488995\n```\n\n\n:::\n:::\n\n\n\n\n### map_dbl関数\n\nmap_dbl関数は、結果をリストではなく、数値ベクトルに格納します。 類似の関数として、map_int関数や、map_chr関数なども存在します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- 1:5\nmap_dbl(z, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nzclass <- map_dbl(z, mean)\ntypeof(zclass)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n\n\nmap_dbl関数を利用する場合、関数を適用した結果は、それぞれの結果は1つの数値である必要があります。 例えば、map関数をrnorm関数に適用し、nを5とした場合、各リストに格納される結果は要素数が5のベクトルになるため、map_dbl関数ではエラーになります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- 1:3\nmap(z, rnorm, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1.451150 2.517198 1.351899 1.031781 1.654450\n\n[[2]]\n[1] 3.3132701 1.1952853 0.8001845 2.2724800 1.5609079\n\n[[3]]\n[1] 1.600831 3.792787 4.010662 2.413056 3.116548\n```\n\n\n:::\n\n```{.r .cell-code}\nmap_dbl(z, rnorm, n=5)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `map_dbl()`:\nℹ In index: 1.\nCaused by error:\n! Result must be length 1, not 5.\n```\n\n\n:::\n:::\n\n\n\n\nなお、map関数とmap_dbl関数を組み合わせることで、rnorm関数で生成した結果の平均値を1つの数値ベクトルに格納することができます\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz |>\n  map(rnorm, n=5) |>\n  map_dbl(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9105756 2.4009039 3.2977725\n```\n\n\n:::\n:::\n\n\n\n\n### 線形回帰モデルを実装する活用例\n\nRのデフォルトのデータセットであるmtcars（自動車の燃費などに関するデータセット）を用いた例について記載します。\n車の燃費（mpg）と車の重量（wt）の関係について異なるシリンダー数（cyl）ごとに線形回帰モデルを適用し、各モデルの決定係数（R-squared）を取得する処理は、map関数、map_dbl関数を用いれば、以下のコードで実現可能です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  split(mtcars$cyl) |>\n  map(function(df) lm(mpg ~ wt, data = df)) |>\n  map(summary) |>\n  map_dbl(\"r.squared\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        4         6         8 \n0.5086326 0.4645102 0.4229655 \n```\n\n\n:::\n:::\n\n\n\n\n複数のパイプ処理が連なっているため、各コードの実装結果を順番に確認します。\nまず、以下のコードでは、mtcarsをシリンダー数（cyl）別に分解して、それぞれの結果をリストに格納しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  split(mtcars$cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`4`\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n$`6`\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nValiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nMerc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n\n$`8`\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n```\n\n\n:::\n:::\n\n\n\n\n次に、以下のコードではmap関数を用いて、シリンダー数（cyl）別に分解したそれぞれのデータセットに対して、線形回帰モデルを作成し、結果をリストに格納しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  split(mtcars$cyl)|>\n  map(function(df) lm(mpg ~ wt, data = df)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`4`\n\nCall:\nlm(formula = mpg ~ wt, data = df)\n\nCoefficients:\n(Intercept)           wt  \n     39.571       -5.647  \n\n\n$`6`\n\nCall:\nlm(formula = mpg ~ wt, data = df)\n\nCoefficients:\n(Intercept)           wt  \n      28.41        -2.78  \n\n\n$`8`\n\nCall:\nlm(formula = mpg ~ wt, data = df)\n\nCoefficients:\n(Intercept)           wt  \n     23.868       -2.192  \n```\n\n\n:::\n:::\n\n\n\n\n以下のコードでは、シリンダー数（cyl）別に作成した線形回帰モデルのサマリーをリストに格納しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  split(mtcars$cyl)|>\n  map(function(df) lm(mpg ~ wt, data = df))  |>\n  map(summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$`4`\n\nCall:\nlm(formula = mpg ~ wt, data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.1513 -1.9795 -0.6272  1.9299  5.2523 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   39.571      4.347   9.104 7.77e-06 ***\nwt            -5.647      1.850  -3.052   0.0137 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.332 on 9 degrees of freedom\nMultiple R-squared:  0.5086,\tAdjusted R-squared:  0.454 \nF-statistic: 9.316 on 1 and 9 DF,  p-value: 0.01374\n\n\n$`6`\n\nCall:\nlm(formula = mpg ~ wt, data = df)\n\nResiduals:\n     Mazda RX4  Mazda RX4 Wag Hornet 4 Drive        Valiant       Merc 280 \n       -0.1250         0.5840         1.9292        -0.6897         0.3547 \n     Merc 280C   Ferrari Dino \n       -1.0453        -1.0080 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   28.409      4.184   6.789  0.00105 **\nwt            -2.780      1.335  -2.083  0.09176 . \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.165 on 5 degrees of freedom\nMultiple R-squared:  0.4645,\tAdjusted R-squared:  0.3574 \nF-statistic: 4.337 on 1 and 5 DF,  p-value: 0.09176\n\n\n$`8`\n\nCall:\nlm(formula = mpg ~ wt, data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.1491 -1.4664 -0.8458  1.5711  3.7619 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  23.8680     3.0055   7.942 4.05e-06 ***\nwt           -2.1924     0.7392  -2.966   0.0118 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.024 on 12 degrees of freedom\nMultiple R-squared:  0.423,\tAdjusted R-squared:  0.3749 \nF-statistic: 8.796 on 1 and 12 DF,  p-value: 0.01179\n```\n\n\n:::\n:::\n\n\n\n\n最後に、以下のコードでシリンダー数（cyl）別に作成した線形回帰モデルのサマリーのうち、決定係数のみを取得し、結果を数値ベクトルに格納しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |>\n  split(mtcars$cyl) |>\n  map(function(df) lm(mpg ~ wt, data = df)) |>\n  map(summary) |>\n  map_dbl(\"r.squared\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        4         6         8 \n0.5086326 0.4645102 0.4229655 \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}