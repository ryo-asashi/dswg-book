{
  "hash": "99b7904021857a004f3e8494ad95c809",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"readxl\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    fig-width: 6\n    fig-height: 5\nreferences:\n- id: BIB_GITHUB\n  type: article\n  title: \"GitHub - tidyverse/readxl: Read excel files (.xls and .xlsx) into R\"\n  URL: https://github.com/tidyverse/readxl\n  author:\n    - readxl authors\n  issued:\n    - year: 2023\n  accessed:\n    - year: 2024\n      month: 6\n      day: 24\n- id: BIB_DOC_SHEET-GEOMETRY\n  type: article\n  title: Sheet Geometry\n  URL: https://readxl.tidyverse.org/articles/sheet-geometry.html\n  author:\n    - readxl authors\n  issued:\n    - year: 2023\n  accessed:\n    - year: 2024\n      month: 6\n      day: 24\n- id: BIB_DOC_CELL-SPECIFICATION\n  type: article\n  title: Specify cells for reading\n  URL: https://readxl.tidyverse.org/reference/cell-specification.html\n  author:\n    - readxl authors\n  issued:\n    - year: 2023\n  accessed:\n    - year: 2024\n      month: 6\n      day: 24\n- id: BIB_JOURNAL_IAJ\n  type: article-journal\n  container-title: アクチュアリージャーナル\n  publisher: 日本アクチュアリー会\n  volume: '112'\n  page: 1-88\n  title: Rを用いたデータの可視化技術 解説書\n  author:\n    - データサイエンス関連基礎調査WG\n  issued:\n    - year: 2020\n      month: 9\nnocite: |\n  @*\n---\n\n\n\n::: {.cell}\n<style type=\"text/css\">\n.output-jp > code {\n/*一部日本語出力があるチャンクで日本語と英字の幅が揃わずに表示がずれるため、CSSでフォントを変更することで表示を揃える*/\n  font-family: \"ＭＳ ゴシック\";\n}\n</style>\n:::\n\n\n\n\n## パッケージの概要\n\n`readxl`はExcelブックをRで読み込むためのパッケージです。 列名やデータ型をある程度自動で判定し、テーブルの形で(`data.frame`型として)データを読み込むことが出来ます。 読み取りたい領域をセル番地等で指定することも可能です。\n\n※Excelブックの編集・書き込みは本パッケージではできないため、`openxlsx`パッケージなどの他のパッケージを使用してください。\n\n## 実行前の準備\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n:::\n\n\n\n\n## データの準備\n\n`readxl`パッケージには例となるExcelブックがいくつか用意されています。\n\n`readxl_example`関数を引数無しで実行することでブックのリストが得られます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadxl_example()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"clippy.xls\"    \"clippy.xlsx\"   \"datasets.xls\"  \"datasets.xlsx\"\n [5] \"deaths.xls\"    \"deaths.xlsx\"   \"geometry.xls\"  \"geometry.xlsx\"\n [9] \"type-me.xls\"   \"type-me.xlsx\" \n```\n\n\n:::\n:::\n\n\n\n\n引数にブック名を指定することでフルパスが得られます。 ここではirisデータセットなどが含まれる`datasets.xlsx`を使用することにします。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_datasets <- readxl_example(\"datasets.xlsx\")\n```\n:::\n\n\n\n\nまた、日本アクチュアリー会のホームページで公開されている標準生命表のExcelファイルも例として使用します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath_seimeihyo <- \"../data/seimeihyo960718.xlsx\"\n```\n:::\n\n\n\n\n## 基本的な使い方\n\n### シート名の取得\n\n`excel_sheets`関数でブックに含まれるシートの一覧を取得することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexcel_sheets(path_datasets)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"mtcars\"   \"chickwts\" \"quakes\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nexcel_sheets(path_seimeihyo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"標準生命表\"\n```\n\n\n:::\n:::\n\n\n\n\n### シートの読み取り\n\n`read_excel`関数で、指定したシートのデータを`data.frame`(正確には`tibble`)として読み込むことが出来ます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read_excel(path_seimeihyo, sheet = \"標準生命表\")\nstr(df) #テーブルの構造を表示する\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output-jp\ntibble [133 × 15] (S3: tbl_df/tbl/data.frame)\n $ ...1                  : chr [1:133] \"年齢\" NA \"0\" \"1\" ...\n $ 標準生命表２０１８    : chr [1:133] \"生保標準生命表２０１８（死亡保険用）\" \"男性\" \"8.1000000000000006E-4\" \"5.6000000000000006E-4\" ...\n $ ...3                  : chr [1:133] NA \"女性\" \"7.7999999999999999E-4\" \"5.2999999999999998E-4\" ...\n $ ...4                  : chr [1:133] \"第三分野標準生命表２０１８\" \"男性\" \"5.2999999999999998E-4\" \"2.2000000000000001E-4\" ...\n $ ...5                  : chr [1:133] NA \"女性\" \"5.1999999999999995E-4\" \"2.0000000000000001E-4\" ...\n $ 標準生命表２００７    : chr [1:133] \"生保標準生命表２００７（死亡保険用）\" \"男性\" \"1.08E-3\" \"7.5000000000000002E-4\" ...\n $ ...7                  : chr [1:133] NA \"女性\" \"9.6000000000000002E-4\" \"6.6E-4\" ...\n $ ...8                  : chr [1:133] \"生保標準生命表２００７（年金開始後用）\" \"男性\" \"5.8E-4\" \"2.5999999999999998E-4\" ...\n $ ...9                  : chr [1:133] NA \"女性\" \"4.6999999999999999E-4\" \"2.2000000000000001E-4\" ...\n $ ...10                 : chr [1:133] \"第三分野標準生命表２００７\" \"男性\" \"5.8E-4\" \"4.0999999999999999E-4\" ...\n $ ...11                 : chr [1:133] NA \"女性\" \"5.1000000000000004E-4\" \"3.6000000000000002E-4\" ...\n $ 生保標準生命表１９９６: chr [1:133] \"生保標準生命表１９９６（死亡保険用）\" \"男性\" \"1.1000000000000001E-3\" \"7.6000000000000004E-4\" ...\n $ ...13                 : chr [1:133] NA \"女性\" \"9.3999999999999997E-4\" \"6.8999999999999997E-4\" ...\n $ ...14                 : chr [1:133] \"生保標準生命表１９９６（年金開始後用）\" \"男性\" NA NA ...\n $ ...15                 : chr [1:133] NA \"女性\" NA NA ...\n```\n\n\n:::\n\n```{.r .cell-code}\n#$ 列名 : 型名 [1:行数] 最初の方のデータ…　という形式で表示\n```\n:::\n\n\n\n\nデフォルトでは**データがある領域全体を一つのテーブル**とし、さらに**1行目に列名があるものとみなして**読み取られます。\n\n標準生命表のExcelファイルは列名が3行にわたっているため、1, 2行目のレコードにまで列名が入ってしまいました。 また、副次的にすべての列が文字列型(`chr`)で読み込まれてしまっているため、このままでは数値データとして取り扱うことができません。\n\n最もシンプルな解決策は読み取り領域を指定することです。\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_qx <- read_excel(path_seimeihyo, sheet = \"標準生命表\", range = \"G4:H135\") #生保標準2007 死亡保険用\n#読み取り範囲をG4(列名として「男性」「女性」がある行)からとしていることに注意\nstr(df_qx)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [131 × 2] (S3: tbl_df/tbl/data.frame)\n $ 男性: num [1:131] 0.00108 0.00075 0.00049 0.00031 0.00021 0.00017 0.00016 0.00016 0.00016 0.00015 ...\n $ 女性: num [1:131] 0.00096 0.00066 0.00042 0.00026 0.00016 0.00012 0.00012 0.00012 0.00011 0.0001 ...\n```\n\n\n:::\n:::\n\n\n\n\n列名がレコードに混じる現象が解消され、また型の自動判定により数値型(`num`)として読み込むことができました。\n\nこのままでも使えなくはありませんが、年齢の列が失われているのは使いづらいため、これを別途読み込んで追加してみます。\n\n引数`col_names`に列名を与えることができます。この場合、1行目から列名ではなくレコードがあるものとして読み込みます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_x <- read_excel(path_seimeihyo, sheet = \"標準生命表\", range = \"B5:B135\", col_names = c(\"年齢\"))\n#読み取り範囲をB4からではなくB5(データがある行)からとしていることに注意\nstr(df_x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [131 × 1] (S3: tbl_df/tbl/data.frame)\n $ 年齢: num [1:131] 0 1 2 3 4 5 6 7 8 9 ...\n```\n\n\n:::\n:::\n\n\n\n\n`cbind`関数で結合することにより、年齢と死亡率を1つのテーブルに格納することができました。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- cbind(df_x, df_qx)\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t131 obs. of  3 variables:\n $ 年齢: num  0 1 2 3 4 5 6 7 8 9 ...\n $ 男性: num  0.00108 0.00075 0.00049 0.00031 0.00021 0.00017 0.00016 0.00016 0.00016 0.00015 ...\n $ 女性: num  0.00096 0.00066 0.00042 0.00026 0.00016 0.00012 0.00012 0.00012 0.00011 0.0001 ...\n```\n\n\n:::\n:::\n\n\n\n\n## 補足情報\n\n### グラフの確認\n\n本稿の主題からは逸れますが、折角生命表を読み込んだので折れ線グラフを描いて確認してみましょう。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(0, 0, type = \"n\", main = \"標準生命表2007 (死亡保険用)\", xlab = \"x\", ylab = \"qx\", xlim = c(0,120), ylim = c(0,1))#plot関数で描画エリアを用意\n\ncols <- c(rgb(0,0,1), rgb(1,0,0)) #色の指定を変数に格納 青, 赤の順で指定\nltys <- c(\"dotted\", \"dashed\") #線の種類を変数に格納 点線、破線の順で指定\n\nlines(x = df$年齢, y = df$男性, col = cols[1], lty = ltys[1]) #折れ線を1つずつ追加\nlines(x = df$年齢, y = df$女性, col = cols[2], lty = ltys[2])\n\nlegend(\"left\", legend = c(\"男性\", \"女性\"), col = cols, lty = ltys) #凡例を左側に表示\n```\n\n::: {.cell-output-display}\n![](readxl_files/figure-html/appendix_plot-1.png){width=576}\n:::\n:::\n\n\n\n\n記法が独特なものの、`ggplot2`パッケージを用いる方法もあります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(reshape2) #テーブルを縦長に変形するために使用\ndf_melt <- reshape2::melt(df, id.vars = \"年齢\", measure.vars = c(\"男性\", \"女性\"),\n                          value.name = \"死亡率\", variable.name = \"性別\") #男性と女性のデータが縦に並ぶようにする\nstr(df_melt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t262 obs. of  3 variables:\n $ 年齢  : num  0 1 2 3 4 5 6 7 8 9 ...\n $ 性別  : Factor w/ 2 levels \"男性\",\"女性\": 1 1 1 1 1 1 1 1 1 1 ...\n $ 死亡率: num  0.00108 0.00075 0.00049 0.00031 0.00021 0.00017 0.00016 0.00016 0.00016 0.00015 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = df_melt) + geom_line(mapping = aes(x = 年齢, y = 死亡率, color = 性別, linetype = 性別)) +\n  scale_x_continuous(limits = c(0, 120)) + #表示範囲の調節\n  scale_color_manual(values = c(rgb(0,0,1), rgb(1,0,0))) + #折れ線の見た目を1つ前のグラフと同様に設定\n  scale_linetype_manual(values = c(\"dotted\", \"dashed\"))\n```\n\n::: {.cell-output-display}\n![](readxl_files/figure-html/appendix_ggplot-1.png){width=576}\n:::\n:::\n\n\n\n\nRによるデータ可視化方法についてはアクチュアリージャーナルにも記載があります。 詳しくは @BIB_JOURNAL_IAJ を参照してください。\n\n### 読み取り範囲の指定方法\n\nセル番地での指定が最もわかりやすいですが、他の指定方法もあるため紹介します。\n\n-   引数`sheet`ではシート名だけでなくシート番号で指定することもできます。\n-   引数`range`の指定には、行全体を表す`cell_rows`や列全体を表す`cell_cols`を用いることができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ <- read_excel(path_seimeihyo, sheet = 1, range = cell_cols(c(2:4))) #2～4列目全体を取得\nstr(df_)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output-jp\ntibble [133 × 3] (S3: tbl_df/tbl/data.frame)\n $ ...1              : chr [1:133] \"年齢\" NA \"0\" \"1\" ...\n $ 標準生命表２０１８: chr [1:133] \"生保標準生命表２０１８（死亡保険用）\" \"男性\" \"8.1000000000000006E-4\" \"5.6000000000000006E-4\" ...\n $ ...3              : chr [1:133] NA \"女性\" \"7.7999999999999999E-4\" \"5.2999999999999998E-4\" ...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ <- read_excel(path_seimeihyo, sheet = 1, range = cell_rows(c(4, NA))) #4行目以降を取得\nstr(df_)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [131 × 15] (S3: tbl_df/tbl/data.frame)\n $ ...1     : num [1:131] 0 1 2 3 4 5 6 7 8 9 ...\n $ 男性...2 : num [1:131] 0.00081 0.00056 0.00036 0.00022 0.00014 0.0001 0.00009 0.00009 0.00009 0.00009 ...\n $ 女性...3 : num [1:131] 0.00078 0.00053 0.00033 0.00019 0.00011 0.00008 0.00008 0.00008 0.00007 0.00007 ...\n $ 男性...4 : num [1:131] 0.00053 0.00022 0.00015 0.00011 0.00008 0.00006 0.00006 0.00006 0.00005 0.00005 ...\n $ 女性...5 : num [1:131] 0.00052 0.0002 0.00014 0.00009 0.00007 0.00006 0.00005 0.00005 0.00004 0.00004 ...\n $ 男性...6 : num [1:131] 0.00108 0.00075 0.00049 0.00031 0.00021 0.00017 0.00016 0.00016 0.00016 0.00015 ...\n $ 女性...7 : num [1:131] 0.00096 0.00066 0.00042 0.00026 0.00016 0.00012 0.00012 0.00012 0.00011 0.0001 ...\n $ 男性...8 : num [1:131] 0.00058 0.00026 0.0002 0.00014 0.00011 0.00009 0.00009 0.00007 0.00006 0.00006 ...\n $ 女性...9 : num [1:131] 0.00047 0.00022 0.00015 0.0001 0.00007 0.00006 0.00006 0.00005 0.00004 0.00004 ...\n $ 男性...10: num [1:131] 0.00058 0.00041 0.00026 0.00017 0.00011 0.00009 0.00009 0.00008 0.00008 0.00007 ...\n $ 女性...11: num [1:131] 0.00051 0.00036 0.00023 0.00014 0.00009 0.00007 0.00007 0.00006 0.00006 0.00006 ...\n $ 男性...12: num [1:131] 0.0011 0.00076 0.0005 0.00033 0.00024 0.00022 0.00022 0.00021 0.00019 0.00017 ...\n $ 女性...13: num [1:131] 0.00094 0.00069 0.00048 0.00031 0.0002 0.00014 0.00013 0.00013 0.00013 0.00012 ...\n $ 男性...14: num [1:131] NA NA NA NA NA NA NA NA NA NA ...\n $ 女性...15: num [1:131] NA NA NA NA NA NA NA NA NA NA ...\n```\n\n\n:::\n:::\n\n\n\n\n-   シート名の指定を引数`range`に含めることもできます\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ <- read_excel(path_seimeihyo, range = \"標準生命表!B4:D135\")\nstr(df_)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [131 × 3] (S3: tbl_df/tbl/data.frame)\n $ ...1: num [1:131] 0 1 2 3 4 5 6 7 8 9 ...\n $ 男性: num [1:131] 0.00081 0.00056 0.00036 0.00022 0.00014 0.0001 0.00009 0.00009 0.00009 0.00009 ...\n $ 女性: num [1:131] 0.00078 0.00053 0.00033 0.00019 0.00011 0.00008 0.00008 0.00008 0.00007 0.00007 ...\n```\n\n\n:::\n:::\n\n\n\n\n-   引数`range`では、`anchored(左上のセル番地, c(行数, 列数))` という指定が可能です\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ <- read_excel(path_seimeihyo, sheet = \"標準生命表\", range = anchored(\"B4\", c(121, 3)))\nstr(df_)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [120 × 3] (S3: tbl_df/tbl/data.frame)\n $ ...1: num [1:120] 0 1 2 3 4 5 6 7 8 9 ...\n $ 男性: num [1:120] 0.00081 0.00056 0.00036 0.00022 0.00014 0.0001 0.00009 0.00009 0.00009 0.00009 ...\n $ 女性: num [1:120] 0.00078 0.00053 0.00033 0.00019 0.00011 0.00008 0.00008 0.00008 0.00007 0.00007 ...\n```\n\n\n:::\n:::\n\n\n\n\n-   引数`range`を指定する代わりに、冒頭の読み飛ばし行数`skip`と読み取る行数`n_max`を指定することもできます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_ <- read_excel(path_seimeihyo, sheet = \"標準生命表\", skip = 3, n_max = 30)\nstr(df_)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [30 × 15] (S3: tbl_df/tbl/data.frame)\n $ ...1     : num [1:30] 0 1 2 3 4 5 6 7 8 9 ...\n $ 男性...2 : num [1:30] 0.00081 0.00056 0.00036 0.00022 0.00014 0.0001 0.00009 0.00009 0.00009 0.00009 ...\n $ 女性...3 : num [1:30] 0.00078 0.00053 0.00033 0.00019 0.00011 0.00008 0.00008 0.00008 0.00007 0.00007 ...\n $ 男性...4 : num [1:30] 0.00053 0.00022 0.00015 0.00011 0.00008 0.00006 0.00006 0.00006 0.00005 0.00005 ...\n $ 女性...5 : num [1:30] 0.00052 0.0002 0.00014 0.00009 0.00007 0.00006 0.00005 0.00005 0.00004 0.00004 ...\n $ 男性...6 : num [1:30] 0.00108 0.00075 0.00049 0.00031 0.00021 0.00017 0.00016 0.00016 0.00016 0.00015 ...\n $ 女性...7 : num [1:30] 0.00096 0.00066 0.00042 0.00026 0.00016 0.00012 0.00012 0.00012 0.00011 0.0001 ...\n $ 男性...8 : num [1:30] 0.00058 0.00026 0.0002 0.00014 0.00011 0.00009 0.00009 0.00007 0.00006 0.00006 ...\n $ 女性...9 : num [1:30] 0.00047 0.00022 0.00015 0.0001 0.00007 0.00006 0.00006 0.00005 0.00004 0.00004 ...\n $ 男性...10: num [1:30] 0.00058 0.00041 0.00026 0.00017 0.00011 0.00009 0.00009 0.00008 0.00008 0.00007 ...\n $ 女性...11: num [1:30] 0.00051 0.00036 0.00023 0.00014 0.00009 0.00007 0.00007 0.00006 0.00006 0.00006 ...\n $ 男性...12: num [1:30] 0.0011 0.00076 0.0005 0.00033 0.00024 0.00022 0.00022 0.00021 0.00019 0.00017 ...\n $ 女性...13: num [1:30] 0.00094 0.00069 0.00048 0.00031 0.0002 0.00014 0.00013 0.00013 0.00013 0.00012 ...\n $ 男性...14: num [1:30] NA NA NA NA NA NA NA NA NA NA ...\n $ 女性...15: num [1:30] NA NA NA NA NA NA NA NA NA NA ...\n```\n\n\n:::\n:::\n\n\n\n\n詳細は @BIB_DOC_SHEET-GEOMETRY や @BIB_DOC_CELL-SPECIFICATION を参照してください。\n\n### 列名が複数行にわたる場合\n\nExcelのデータでは今回の標準生命表のように、列名が複数行にわたって表示されることがよくあります。\n\n事前にExcelのデータを修正しておくことも考えられますが、読み込む側の工夫でもある程度対処は可能なため、 参考までに一例を記載します。\n\n`readxl`パッケージの関数で一発でうまく読み取れるわけではないため、 まず列名がある箇所をいったんデータとして読み取り、Rで加工のうえ列名をリストに保持し、 改めてデータのある箇所を読み取るという流れで対処することになります。\n\nまず、列名がある部分(Excelシート上の3～4行目)をデータとして読み取ります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#col_names = FALSEとすることにより、1行目を(テーブルdf_colnamesの)列名ではなくデータとして読み取る\ndf_colnames <- read_excel(path_seimeihyo, sheet = \"標準生命表\", range = cell_rows(c(3:4)), col_names = FALSE)\nstr(df_colnames)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [2 × 15] (S3: tbl_df/tbl/data.frame)\n $ ...1 : chr [1:2] \"年齢\" NA\n $ ...2 : chr [1:2] \"生保標準生命表２０１８（死亡保険用）\" \"男性\"\n $ ...3 : chr [1:2] NA \"女性\"\n $ ...4 : chr [1:2] \"第三分野標準生命表２０１８\" \"男性\"\n $ ...5 : chr [1:2] NA \"女性\"\n $ ...6 : chr [1:2] \"生保標準生命表２００７（死亡保険用）\" \"男性\"\n $ ...7 : chr [1:2] NA \"女性\"\n $ ...8 : chr [1:2] \"生保標準生命表２００７（年金開始後用）\" \"男性\"\n $ ...9 : chr [1:2] NA \"女性\"\n $ ...10: chr [1:2] \"第三分野標準生命表２００７\" \"男性\"\n $ ...11: chr [1:2] NA \"女性\"\n $ ...12: chr [1:2] \"生保標準生命表１９９６（死亡保険用）\" \"男性\"\n $ ...13: chr [1:2] NA \"女性\"\n $ ...14: chr [1:2] \"生保標準生命表１９９６（年金開始後用）\" \"男性\"\n $ ...15: chr [1:2] NA \"女性\"\n```\n\n\n:::\n:::\n\n\n\n\n今回のデータでは1行目の「生保標準生命表２０１８（死亡保険用）」などがそれぞれ一番左の列（各「男性」の列）にしか入れられていないため、 残りの列（各「女性」の列）にもこれを補完します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(row in 1:(nrow(df_colnames))){\n  colname <- NA #1つ左の列の列名を保持する変数\n  for(col in 1:(ncol(df_colnames))){\n    if(row > 1 & col > 1){\n      if(is.na(df_colnames[row-1, col-1]) != is.na(df_colnames[row-1, col]) \n         || ( !is.na(df_colnames[row-1, col-1]) && !is.na(df_colnames[row-1, col])\n           && df_colnames[row-1, col-1] != df_colnames[row-1, col])){ #1つ上の階層の列名が変わった場合\n        colname <- NA #今の階層もクリア\n      }\n    }\n    if(is.na(df_colnames[row, col]))\n      df_colnames[row, col] <- colname\n    colname <- df_colnames[row, col]\n  }\n}\ndf_colnames\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output-jp\n# A tibble: 2 × 15\n  ...1  ...2   ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11 ...12 ...13\n  <chr> <chr>  <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n1 年齢  生保標準生… 生保標準… 第三分野… 第三分野… 生保標準… 生保標準… 生保標準… 生保標準… 第三分野… 第三分野… 生保標準… 生保標準…\n2 <NA>  男性   女性  男性  女性  男性  女性  男性  女性  男性  女性  男性  女性 \n# ℹ 2 more variables: ...14 <chr>, ...15 <chr>\n```\n\n\n:::\n:::\n\n\n\n\nそして、`NA`となっている箇所を読み飛ばしつつ、各列名を結合したリストを作成します。\n\n結合時の区切り文字は何でも指定可能ですが、今回は`\"/\"`にしてみます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls_colnames <- sapply(df_colnames, function(x) paste0(x[!is.na(x)], collapse = \"/\"))\nnames(ls_colnames) <- NULL\nls_colnames\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output-jp\n [1] \"年齢\"                                       \n [2] \"生保標準生命表２０１８（死亡保険用）/男性\"  \n [3] \"生保標準生命表２０１８（死亡保険用）/女性\"  \n [4] \"第三分野標準生命表２０１８/男性\"            \n [5] \"第三分野標準生命表２０１８/女性\"            \n [6] \"生保標準生命表２００７（死亡保険用）/男性\"  \n [7] \"生保標準生命表２００７（死亡保険用）/女性\"  \n [8] \"生保標準生命表２００７（年金開始後用）/男性\"\n [9] \"生保標準生命表２００７（年金開始後用）/女性\"\n[10] \"第三分野標準生命表２００７/男性\"            \n[11] \"第三分野標準生命表２００７/女性\"            \n[12] \"生保標準生命表１９９６（死亡保険用）/男性\"  \n[13] \"生保標準生命表１９９６（死亡保険用）/女性\"  \n[14] \"生保標準生命表１９９６（年金開始後用）/男性\"\n[15] \"生保標準生命表１９９６（年金開始後用）/女性\"\n```\n\n\n:::\n:::\n\n\n\n\nこうしてできた列名リストを引数`col_names`に与え、元のデータ(Excelシート上の5行目以降)を読み取ります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_all <- read_excel(path_seimeihyo, sheet = \"標準生命表\", range = cell_rows(c(5, NA)), col_names = ls_colnames)\nstr(df_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n``` output-jp\ntibble [131 × 15] (S3: tbl_df/tbl/data.frame)\n $ 年齢                                       : num [1:131] 0 1 2 3 4 5 6 7 8 9 ...\n $ 生保標準生命表２０１８（死亡保険用）/男性  : num [1:131] 0.00081 0.00056 0.00036 0.00022 0.00014 0.0001 0.00009 0.00009 0.00009 0.00009 ...\n $ 生保標準生命表２０１８（死亡保険用）/女性  : num [1:131] 0.00078 0.00053 0.00033 0.00019 0.00011 0.00008 0.00008 0.00008 0.00007 0.00007 ...\n $ 第三分野標準生命表２０１８/男性            : num [1:131] 0.00053 0.00022 0.00015 0.00011 0.00008 0.00006 0.00006 0.00006 0.00005 0.00005 ...\n $ 第三分野標準生命表２０１８/女性            : num [1:131] 0.00052 0.0002 0.00014 0.00009 0.00007 0.00006 0.00005 0.00005 0.00004 0.00004 ...\n $ 生保標準生命表２００７（死亡保険用）/男性  : num [1:131] 0.00108 0.00075 0.00049 0.00031 0.00021 0.00017 0.00016 0.00016 0.00016 0.00015 ...\n $ 生保標準生命表２００７（死亡保険用）/女性  : num [1:131] 0.00096 0.00066 0.00042 0.00026 0.00016 0.00012 0.00012 0.00012 0.00011 0.0001 ...\n $ 生保標準生命表２００７（年金開始後用）/男性: num [1:131] 0.00058 0.00026 0.0002 0.00014 0.00011 0.00009 0.00009 0.00007 0.00006 0.00006 ...\n $ 生保標準生命表２００７（年金開始後用）/女性: num [1:131] 0.00047 0.00022 0.00015 0.0001 0.00007 0.00006 0.00006 0.00005 0.00004 0.00004 ...\n $ 第三分野標準生命表２００７/男性            : num [1:131] 0.00058 0.00041 0.00026 0.00017 0.00011 0.00009 0.00009 0.00008 0.00008 0.00007 ...\n $ 第三分野標準生命表２００７/女性            : num [1:131] 0.00051 0.00036 0.00023 0.00014 0.00009 0.00007 0.00007 0.00006 0.00006 0.00006 ...\n $ 生保標準生命表１９９６（死亡保険用）/男性  : num [1:131] 0.0011 0.00076 0.0005 0.00033 0.00024 0.00022 0.00022 0.00021 0.00019 0.00017 ...\n $ 生保標準生命表１９９６（死亡保険用）/女性  : num [1:131] 0.00094 0.00069 0.00048 0.00031 0.0002 0.00014 0.00013 0.00013 0.00013 0.00012 ...\n $ 生保標準生命表１９９６（年金開始後用）/男性: num [1:131] NA NA NA NA NA NA NA NA NA NA ...\n $ 生保標準生命表１９９６（年金開始後用）/女性: num [1:131] NA NA NA NA NA NA NA NA NA NA ...\n```\n\n\n:::\n:::\n\n\n\n\n### 欠損値への対処\n\n`read_excel`関数の引数`na`に文字列を指定することで、その文字列があるセルを欠損値`NA`とみなして読み込むことが出来ます。 ベクトルを指定することで複数の文字列を指定することもできます。\n\n例えばchichwtsデータセットで文字列`\"horsebean\"`と`\"soybean\"`を`NA`とみなして読み込んでみましょう。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_chick <- read_excel(path_datasets, sheet = \"chickwts\")\ndf_chick$feed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"horsebean\" \"horsebean\" \"horsebean\" \"horsebean\" \"horsebean\" \"horsebean\"\n [7] \"horsebean\" \"horsebean\" \"horsebean\" \"horsebean\" \"linseed\"   \"linseed\"  \n[13] \"linseed\"   \"linseed\"   \"linseed\"   \"linseed\"   \"linseed\"   \"linseed\"  \n[19] \"linseed\"   \"linseed\"   \"linseed\"   \"linseed\"   \"soybean\"   \"soybean\"  \n[25] \"soybean\"   \"soybean\"   \"soybean\"   \"soybean\"   \"soybean\"   \"soybean\"  \n[31] \"soybean\"   \"soybean\"   \"soybean\"   \"soybean\"   \"soybean\"   \"soybean\"  \n[37] \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\"\n[43] \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\"\n[49] \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"meatmeal\" \n[55] \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"casein\"   \n[61] \"casein\"    \"casein\"    \"casein\"    \"casein\"    \"casein\"    \"casein\"   \n[67] \"casein\"    \"casein\"    \"casein\"    \"casein\"    \"casein\"   \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_chick_na <- read_excel(path_datasets, sheet = \"chickwts\", na = c(\"horsebean\", \"soybean\"))\ndf_chick_na$feed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] NA          NA          NA          NA          NA          NA         \n [7] NA          NA          NA          NA          \"linseed\"   \"linseed\"  \n[13] \"linseed\"   \"linseed\"   \"linseed\"   \"linseed\"   \"linseed\"   \"linseed\"  \n[19] \"linseed\"   \"linseed\"   \"linseed\"   \"linseed\"   NA          NA         \n[25] NA          NA          NA          NA          NA          NA         \n[31] NA          NA          NA          NA          NA          NA         \n[37] \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\"\n[43] \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\" \"sunflower\"\n[49] \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"meatmeal\" \n[55] \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"meatmeal\"  \"casein\"   \n[61] \"casein\"    \"casein\"    \"casein\"    \"casein\"    \"casein\"    \"casein\"   \n[67] \"casein\"    \"casein\"    \"casein\"    \"casein\"    \"casein\"   \n```\n\n\n:::\n:::\n\n\n\n\nこのように、一定の文字列を`NA`に変換するだけなら簡単に対処が可能です。\n\n## 参考\n\n::: {#refs}\n:::\n",
    "supporting": [
      "readxl_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}