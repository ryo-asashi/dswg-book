{
  "hash": "a5f130b42868329e8596faa9d81cb8d2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"distrEx\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\n#format: docx\nformat: html\nlang: ja\noutput:\n  word_document:\n    toc: yes\n    toc_depth: '3'\n    fig_width: 6\n    fig_height: 3\n---\n\n\n\n\n\n\n## パッケージの概要\n\ndistrExは、確率変数をS4クラスで扱うことのできるパッケージdistrの機能を拡張するパッケージです。 distrで生成した確率変数に対して期待値・分散を計算する関数、多変量確率分布のクラス、確率変数間の距離を計算する関数などを提供します。\n\n::: callout-note\n## distrパッケージの使用方法\n\ndistrExはdistrの拡張機能であるため、distrの使用が前提となっています。 本稿ではdistrExの機能に絞って解説を行いますので、distrの基本的な知識や使用方法はdistrのコード使用例をご参照ください。\n:::\n\n## パッケージの使用例\n\ndistrExの主な機能の使用例を紹介します。 一部の数値例にirisデータセットを用います。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(distr)\nlibrary(distrEx)\n\ndata(iris)\nspecies_num <- as.numeric(iris$Species)\nplot(x=iris$Sepal.Width, y=iris$Sepal.Length, \n     pch = species_num, col = species_num,\n     xlab = \"Sepal Width\", ylab = \"Sepal Length\")\nlegend(\"topright\", levels(iris$Species), pch = 1:3, col = 1:3)\n```\n\n::: {.cell-output-display}\n![](distrEx_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n### 期待値と分散\n\ndistrで生成した確率変数を引数にとり、当該確率変数の期待値を計算するE関数、および分散を計算するvar関数が用意されています。 以下にいくつかの例を示します。\n\n##### 正規分布\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX <- Norm(mean = 3, sd = 2)\ncat(sprintf(\"期待値:%.2f 分散:%.2f\", E(X), var(X)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n期待値:3.00 分散:4.00\n```\n\n\n:::\n:::\n\n\n\n\n##### ポアソン分布\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN <- Pois(lambda = 4)\ncat(sprintf(\"期待値:%.2f 分散:%.2f\", E(N), var(N)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n期待値:4.00 分散:4.00\n```\n\n\n:::\n:::\n\n\n\n\n##### 正規変数を変換した確率変数\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX_affine <- X * 2 + 5\ncat(sprintf(\"期待値:%.2f 分散:%.2f\", E(X_affine), var(X_affine)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n期待値:11.00 分散:16.00\n```\n\n\n:::\n:::\n\n\n\n\n##### 経験分布\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_setosa <- iris[iris$Species==\"setosa\",]\nn <- nrow(d_setosa)\n\nX_emp <- EmpiricalDistribution(data = d_setosa$Sepal.Length)\ncat(sprintf(\"期待値:%.5f 分散:%.5f\", E(X_emp), var(X_emp)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n期待値:5.00600 分散:0.12176\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(sprintf(\"(経験分布との比較用)実データ  平均:%.5f 分散:%.5f\", \n            mean(d_setosa$Sepal.Length), (n-1)/n*stats::var(d_setosa$Sepal.Length)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(経験分布との比較用)実データ  平均:5.00600 分散:0.12176\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-note\n## E関数およびvar関数の誤差\n\ndistrExのE関数とvar関数は、AbsContDistributionなどの一般の分布のクラスに対しては、内部的には数値積分で処理されています。 計算する確率変数の分布によっては数値的な誤差が無視できない大きさになる場合があるため、別の方法による計算結果との比較など、検証を行いながら使用することをおすすめします。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 例. 指数分布に従うXの二乗の期待値\n#X <- Norm(mean = 0, sd = 1)\nX <- Exp(rate = 1)\nX2 <- X^2\n\n## 計算方法(1) distrExのE関数を直接適用\nres_1 <- E(X2)\n\n## 計算方法(2) 分散 + 期待値の二乗で計算\nres_2 <- var(X) + E(X)^2\n\ncat(sprintf(\"(1):%.5f (2):%.5f\", res_1, res_2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(1):1.79658 (2):2.00000\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n\n\n\n\n\n\n### 多変量分布\n\ndistrExには多変量分布を表現するためのクラスが用意されています。 これらの分布についても、例えばE関数を適用して、変数ごとの期待値を計算することも可能です。 以下ではdistrExに用意されている多変量分布の例として、経験多変量分布と条件付分布のクラスを紹介します。\n\n##### 経験多変量分布\n\n多変量のデータを引数として与えることで、経験多変量分布を生成できます。 以下の例では、経験多変量分布を生成し、生成した多変量分布に対してE関数で期待値を算出しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX <- EmpiricalMVDistribution(\n  data = as.matrix(iris[iris$Species == \"setosa\", c(\"Sepal.Length\", \"Sepal.Width\")]))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in DiscreteMVDistribution(supp = data, Symmetry = Symmetry): collapsing\nto unique support values\n```\n\n\n:::\n\n```{.r .cell-code}\nE(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSepal.Length  Sepal.Width \n       5.006        3.428 \n```\n\n\n:::\n:::\n\n\n\n\n##### 条件付分布\n\ndistrExに用意されている条件付分布の一つが線形モデルです。 次の例では、比較用にR標準の線形モデルを構築したうえで、distrExのLMCondDistributionクラスを使用して、 Sepal.LengthをSepal.Widthで回帰した線形モデルに従う確率変数Xを生成しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R標準の線形モデル\nd_setosa <- iris[iris$Species == \"setosa\",]\nlm.model <- lm(Sepal.Length ~ Sepal.Width, data = d_setosa)\nplot(d_setosa$Sepal.Width, d_setosa$Sepal.Length, xlab=\"Sepal Width\", ylab=\"Sepal Length\")\nabline(lm.model)\n```\n\n::: {.cell-output-display}\n![](distrEx_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# distrExの確率変数として生成\nX <- LMCondDistribution(Error = Norm(sd = var(lm.model$residuals)), \n                   theta = lm.model$coefficients[2],\n                   intercept = lm.model$coefficients[1])\n```\n:::\n\n\n\n\n条件付分布に対しては、E関数の条件付期待値の機能が使用できます。 すなわちこの例の場合、線形モデルにおいて特定のSepal.Widthの値の下での、Sepal.lengthの期待値を計算します。 distrExのE関数で計算した条件付期待値は、R標準のpredict関数を線形モデルに適用した予測値とほぼ一致していることが確認できます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# distrExのE関数による条件付期待値と、R標準による線形モデルのpredict\ncat(sprintf(\"distrEx : %.5f\\nR標準 : %.5f\",\n            E(X, cond = 3.5), predict(lm.model, list(Sepal.Width = 3.5))))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ndistrEx : 5.05571\nR標準 : 5.05572\n```\n\n\n:::\n:::\n\n\n\n\n### 確率分布間の距離\n\ndistrExには確率変数が従う確率分布間の距離を計算する関数が用意されています。 以下はKolmogorovDist関数を使用した、Kolmogorov距離の計算例です。\\\n(二つの分布関数FとGに対して、$d(F,G) = sup|F(x)-G(x)|$)\\\nirisのSepal.Widthについて、Speceies間の経験分布の距離を計算しています。 グラフ上でも度数分布の重なりが大きいversicolorとvirginica間の経験分布の距離が、setosaとversicolor間の距離より小さい結果となっています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX_setosa <- EmpiricalDistribution(\n  data = as.matrix(iris[iris$Species == \"setosa\", \"Sepal.Width\"]))\nX_versicolor <- EmpiricalDistribution(\n  data = as.matrix(iris[iris$Species == \"versicolor\", \"Sepal.Width\"]))\nX_virginica <- EmpiricalDistribution(\n  data = as.matrix(iris[iris$Species == \"virginica\", \"Sepal.Width\"]))\n\ncols <- c(\"#FF00007F\", \"#0000FF7F\")\n\n# setosa vs versicolor\nhist(iris[iris$Species == \"setosa\", \"Sepal.Width\"], \n     breaks=seq(1, 5, 0.2), col=cols[1], main=\"\", xlab=\"Sepal Width\")\nhist(iris[iris$Species == \"versicolor\", \"Sepal.Width\"],\n     breaks=seq(1, 5, 0.2), col=cols[2], add=TRUE, main=\"\", xlab=\"\")\nlegend(\"topright\",legend=c(\"setosa\", \"versicolor\"), fill=cols, )\n```\n\n::: {.cell-output-display}\n![](distrEx_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Kolmogorov距離\nKolmogorovDist(X_setosa, X_versicolor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKolmogorov distance \n               0.68 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# versicolor vs virginica\nhist(iris[iris$Species == \"versicolor\", \"Sepal.Width\"], \n     breaks=seq(1, 5, 0.2), col=cols[1], main=\"\", xlab=\"Sepal Width\")\nhist(iris[iris$Species == \"virginica\", \"Sepal.Width\"],\n     breaks=seq(1, 5, 0.2), col=cols[2], add=TRUE, main=\"\", xlab=\"\")\nlegend(\"topright\",legend=c(\"versicolor\", \"virginica\"), fill=cols, )\n```\n\n::: {.cell-output-display}\n![](distrEx_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Kolmogorov距離\nKolmogorovDist(X_versicolor, X_virginica)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKolmogorov distance \n               0.26 \n```\n\n\n:::\n:::\n\n\n\n\nなお、紹介したKolmogorov距離以外にも様々な距離関数が用意されているため、詳細はマニュアル\\[1\\]をご参照ください。\n\n## 参考資料\n\n\\[1\\] Peter Ruckdeschel, Matthias Kohl, Thomas Stabla & Florian Camphausen. [S4 Classes for Distributions—a manual for packages](https://cran.r-project.org/web/packages/distrDoc/vignettes/distr.pdf).\n",
    "supporting": [
      "distrEx_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}