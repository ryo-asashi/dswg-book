{
  "hash": "a58d3ad7b967d4ddb74990793872d898",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"igraph\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    fig-width: 4\n    fig-height: 4\n---\n\n\n\n\n\n\n## パッケージの概要\n\n`igraph` は、グラフ（ネットワークグラフ）を扱うためのパッケージで、グラフ（`igraph` オブジェクト）の作成や基本的な分析を簡単なコードで実行することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(igraph)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'igraph' was built under R version 4.5.1\n```\n\n\n:::\n:::\n\n\n\n\n## グラフを作成する\n\n`make_graph` 関数の引数 `edges` に、グラフの頂点の名前を要素とするベクトルを渡すことで、`igraph` オブジェクトを作成することができます。`edges` に渡されたベクトルは c(1番目の辺の始点、1番目の辺の終点、2番目の辺の始点、2番目の辺の終点...) と解釈されます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng1 <- make_graph(edges = c(1,2, 1,3, 2,3, 3,4))\nplot(g1)\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/make_graph directed-1.png){width=384}\n:::\n:::\n\n\n\n\n引数 `directed` を `FALSE` にすることで、無向グラフを作成することができます。また、`plot` 関数の引数を指定することで、プロットの見た目を柔軟に変更することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng2 <- make_graph(edges = c(1,2, 1,3, 2,3, 3,4),\n                directed = FALSE)\nplot(g2, vertex.color = NA, vertex.size = 30,\n     vertex.label.cex = 1.5, vertex.label.color = \"#202020\")\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/make_graph undirected-1.png){width=384}\n:::\n:::\n\n\n\n\n`graph_from_literal` 関数では、`X---Y`, `X--+Y` などの直感的な記法によって、グラフの辺を指定することができます。ここで、`---` は無向辺を表します。`-` の数に制限はなく、`--` や `----` としても同じ結果を得られます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng3 <- graph_from_literal(W---X:Y, X---Y, Y---Z)\nplot(g3)\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/graph_from_literal undirected-1.png){width=384}\n:::\n:::\n\n\n\n\nまた、`--+` は有向辺を表します。`-` の数に制限はなく、`-+` や `---+` としても同じ結果を得られます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng4 <- graph_from_literal(W--+X:Y, X--+Y, Y--+Z)\nplot(g4, vertex.shape = \"none\", vertex.size = 30,\n     vertex.label.cex = 1.5, vertex.label.color = \"#202020\")\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/graph_from_literal directed-1.png){width=384}\n:::\n:::\n\n\n\n\n## データフレームからグラフを作成する\n\n`graph.data.frame` では、辺の情報を記録したデータフレームからグラフを作成することができます。第1引数 `x` に渡されたデータフレームの第1列と第2列が、辺の始点と終点として解釈されます。また、第3列目以降は、各辺の属性として用いられます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  tails = c(1, 1, 2, 3),\n  heads = c(2, 3, 3, 4),\n  label = c('w', 'x', 'y', 'z'),\n  label.color = rep(\"#151515\", 4),\n  )\ng5 <- graph_from_data_frame(df, directed = FALSE)\nplot(g5)\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/graph_from_data_frame-1.png){width=384}\n:::\n:::\n\n\n\n\n## 頂点や辺を追加する\n\n`add_vertices` 関数によって `igraph` オブジェクトに頂点を追加することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- make_empty_graph(directed=FALSE)\ng <- add_vertices(g, nv = 2, color = \"#303030\",\n                  label.color = \"white\")\ng <- add_vertices(g, nv = 2, color = \"#E03030\",\n                  label.color = \"white\")\nplot(g, vertex.size = 25)\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/unnamed-chunk-3-1.png){width=384}\n:::\n:::\n\n\n\n\n同様に、`add_edges` 関数によって `igraph` オブジェクトに辺を追加することができます。2つの頂点の間に2本以上の辺を張ることもできます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- add_edges(g, c(1,2, 2,3, 1,4), color = \"#303030\")\ng <- add_edges(g, c(3,4, 4,1, 3,2), color = \"#E03030\")\nplot(g, vertex.size = 25)\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/unnamed-chunk-4-1.png){width=384}\n:::\n:::\n\n\n\n\n##  頂点や辺を削除する\n\n`delete_vertices` 関数によって、頂点を削除することができます。なお、グラフに残される頂点の番号が連続になるように、削除された頂点より後ろの番号を持っていた頂点の番号が修正されます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- delete_vertices(g, 3)\nplot(g, vertex.size = 25)\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/unnamed-chunk-5-1.png){width=384}\n:::\n:::\n\n\n\n\n同様に、`delete_edges` 関数によって、辺を削除することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- delete_edges(g, \"1|2\")\nplot(g, vertex.size = 25)\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/unnamed-chunk-6-1.png){width=384}\n:::\n:::\n\n\n\n\n## 木や格子などの特別なグラフを作成する\n\n`make_tree` 関数によって、頂点数 `n`、各頂点の子の数が `children` であるような木を作成することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_tree <- make_tree(n = 15, children = 2, mode = 'undirected')\nplot(g_tree,\n     layout = layout_as_tree(g_tree),\n     vertex.size = 25)\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/tree-1.png){width=384}\n:::\n:::\n\n\n\n\n`make_lattice` 関数によって、格子グラフを作成することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng_lat <- make_lattice(c(3, 3))\nplot(g_lat, vertex.size = 25)\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/lattice-1.png){width=384}\n:::\n:::\n\n\n\n\n## プロットのレイアウトを調整する\n\n`plot.igraph`（`igraph` オブジェクトに `plot` を適用したときに呼び出される関数）では、`layout` を指定することで、グラフのレイアウトを指定することができます。レイアウトを作成するアルゴリズムは複数あり、`igraph` パッケージには `layout_with_kk` 関数や `layout_with_fr` 関数などが実装されています。`layout_nicely` 関数を用いると、グラフの特性に適したアルゴリズムによるレイアウトを出力することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(g_tree, layout = layout_nicely(g_tree), vertex.size = 25)\n```\n\n::: {.cell-output-display}\n![](igraph_files/figure-html/unnamed-chunk-7-1.png){width=384}\n:::\n:::\n",
    "supporting": [
      "igraph_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}