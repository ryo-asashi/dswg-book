{
  "hash": "b1804f07a81771d84c5aa2997496f364",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"forcats\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\noutput:\n  word_document:\n    toc: yes\n    toc_depth: '3'\n    fig_width: 6\n    fig_height: 3\n---\n\n\n\n\n\n\n### パッケージの概要\n\nforcatsは、factor型のデータを取り扱うための様々な関数を提供しているパッケージです。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(require(tidyverse))\nrequire(forcats)\n```\n:::\n\n\n\n\n### factor型について\n\nfactor型のベクトルは、ベクトルの要素に加えて、levelsという情報を持っています。例えば、a,b,cの要素を持つcharacter型のベクトルに対して、factor関数を適用するとfactor型のベクトルが得られます。\n\nなお、ベクトル内の要素が重複している場合、Levelsではまとめて表示されます。以下の例では、「c」が重複していますが、Levelsで表示されるcは１つだけになっています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"a\", \"c\", \"b\", \"c\")\nfactor(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a c b c\nLevels: a b c\n```\n\n\n:::\n:::\n\n\n\n### factor型の活用方法\n\nfactor型のlevelsは、例えば、データを可視化する際に活用できます。\n\n具体例を確認するために、まず、Rのiris（あやめのがく片、花弁の幅・長さに関するデータセット）を用いて、あやめの種類（Species）別のがく片の幅の平均値をmean_Sepal_Widthに格納し、その結果を棒グラフで表示します。この際、iris_mean_by_speciesのSpeciesカラムはfactor型になっていることに注意してください。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_mean_by_species <- iris %>%\n  group_by(Species) %>%\n  summarise(across(everything(), mean))\niris_mean_by_species\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  Species    Sepal.Length Sepal.Width Petal.Length Petal.Width\n  <fct>             <dbl>       <dbl>        <dbl>       <dbl>\n1 setosa             5.01        3.43         1.46       0.246\n2 versicolor         5.94        2.77         4.26       1.33 \n3 virginica          6.59        2.97         5.55       2.03 \n```\n\n\n:::\n\n```{.r .cell-code}\niris_mean_by_species |>\n  ggplot(aes(x = Species, y = Sepal.Width, fill = Species)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Mean Values by Species\", x = \"Species\", y = \"Mean Sepal.Width\")\n```\n\n::: {.cell-output-display}\n![](forcats_files/figure-html/forcats--factor2-1.png){width=672}\n:::\n:::\n\n\n\n\nデータを可視化した際、結果をSepal.Widthが大きい順（つまり、setosa、versicolor、virginicaの順）に並べたいとします。\n\nまず、可視化するデータセットをSpela.Widthが大きい順に並べ替えた結果を表示してみます。結果は以下の通り、元の結果と変わりません。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_mean_by_species$Species\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] setosa     versicolor virginica \nLevels: setosa versicolor virginica\n```\n\n\n:::\n\n```{.r .cell-code}\ndesc_iris_mean_by_species <- iris_mean_by_species |>\n  arrange(desc(Sepal.Width))\ndesc_iris_mean_by_species\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  Species    Sepal.Length Sepal.Width Petal.Length Petal.Width\n  <fct>             <dbl>       <dbl>        <dbl>       <dbl>\n1 setosa             5.01        3.43         1.46       0.246\n2 virginica          6.59        2.97         5.55       2.03 \n3 versicolor         5.94        2.77         4.26       1.33 \n```\n\n\n:::\n\n```{.r .cell-code}\ndesc_iris_mean_by_species |>\n  ggplot(aes(x = Species, y = Sepal.Width, fill = Species)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Mean Values by Species\", x = \"Species\", y = \"Mean Sepal.Width\")\n```\n\n::: {.cell-output-display}\n![](forcats_files/figure-html/forcats--factor3-1.png){width=672}\n:::\n:::\n\n\n\n\n次に、iris_mean_by_speciesのSpeciesのlevelsをsetosa、virginica、verscolorの順番に変更します。その後、これまでと同様に棒グラフを作成すると、結果がSepal.Widthが大きい順番に表示されます。\n\nlevelsの変更に利用したfct_relevel関数は、forcatsパッケージの関数で指定した順番でlevelsを設定できます。なお、全ての要素を指定する必要はありません。（指定しなかった要素は後ろに回されます）\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndesc_iris_mean_by_species_2 <- iris_mean_by_species\ndesc_iris_mean_by_species_2$Species <- desc_iris_mean_by_species_2$Species |>\n  fct_relevel(\"setosa\", \"virginica\")\ndesc_iris_mean_by_species_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  Species    Sepal.Length Sepal.Width Petal.Length Petal.Width\n  <fct>             <dbl>       <dbl>        <dbl>       <dbl>\n1 setosa             5.01        3.43         1.46       0.246\n2 versicolor         5.94        2.77         4.26       1.33 \n3 virginica          6.59        2.97         5.55       2.03 \n```\n\n\n:::\n\n```{.r .cell-code}\ndesc_iris_mean_by_species_2 |>\n  ggplot(aes(x = Species, y = Sepal.Width, fill = Species)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Mean Values by Species\", x = \"Species\", y = \"Mean Sepal.Width\")\n```\n\n::: {.cell-output-display}\n![](forcats_files/figure-html/forcats--factor4-1.png){width=672}\n:::\n:::\n\n\n\n\n### factor型のlevelsの順序を変更する関数\n\nforcatsパッケージには、factor型のlevelsの順序を変更する関数が提供されています。以下で、いくつか利用例を示します。\n\nfct_infreq関数は、登場頻度が多い要素の順番にlevelsを整理します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- factor(c(\"c\", \"c\", \"a\"))\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] c c a\nLevels: a c\n```\n\n\n:::\n\n```{.r .cell-code}\nfct_infreq(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] c c a\nLevels: c a\n```\n\n\n:::\n:::\n\n\n\n\nfct_inorder関数は、要素の登場した順番でlevelsを整理します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- factor(c(\"b\", \"a\"))\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] b a\nLevels: a b\n```\n\n\n:::\n\n```{.r .cell-code}\nfct_inorder(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] b a\nLevels: b a\n```\n\n\n:::\n:::\n\n\n\n\nfct_rev関数は、levelsを反転させます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- factor(c(\"a\", \"b\", \"c\"))\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a b c\nLevels: a b c\n```\n\n\n:::\n\n```{.r .cell-code}\nfct_rev(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a b c\nLevels: c b a\n```\n\n\n:::\n:::\n\n\n\n\nfct_shift関数は、levelsをずらします。デフォルトでは、levelsが１つ左にずれます（最初のlevelsは最後に回ります）が、引数で指定することで、ずれる大きさを変更可能です。また、引数に負の値を指定した場合は右にずれます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- factor(c(\"a\", \"b\", \"c\", \"d\"))\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a b c d\nLevels: a b c d\n```\n\n\n:::\n\n```{.r .cell-code}\nfct_shift(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a b c d\nLevels: b c d a\n```\n\n\n:::\n\n```{.r .cell-code}\nfct_shift(f, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a b c d\nLevels: c d a b\n```\n\n\n:::\n\n```{.r .cell-code}\nfct_shift(f, -1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a b c d\nLevels: d a b c\n```\n\n\n:::\n:::\n\n\n\n\nfct_reorder関数は、他の変数を使って、levelsを並べ替えることが可能です。\n\nfactor型の活用方法で実施した「Sepal.Widthの平均値が大きい順に並べ替える」対応をfct_reorder関数で実施するには、以下のように記載します。\n\nfct_reorder(Species, Sepal.Width, .fun = mean, .desc = TRUE)は、SpeciesのlevelsをSepal.Widthの平均値で変更しています。デフォルトは昇順ですが、「.desc = TRUE」と指定すると降順となります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_mean_by_species |>\n  ggplot(aes(x = Species, y = Sepal.Width, fill = Species)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Mean Values by Species\", x = \"Species\", y = \"Mean Sepal.Width\")\n```\n\n::: {.cell-output-display}\n![](forcats_files/figure-html/forcats--fct_reorder-1.png){width=672}\n:::\n\n```{.r .cell-code}\niris_mean_by_species |>\n  ggplot(aes(x = fct_reorder(Species, Sepal.Width, .fun = mean, .desc = TRUE), y = Sepal.Width, fill = Species)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Mean Values by Species\", x = \"Species\", y = \"Mean Sepal.Width\")\n```\n\n::: {.cell-output-display}\n![](forcats_files/figure-html/forcats--fct_reorder-2.png){width=672}\n:::\n:::",
    "supporting": [
      "forcats_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}