{
  "hash": "13fe74d15d1bdb8d37172d921261d795",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"lifecontingencies\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    fig-width: 6\n    fig-height: 5\n---\n\n\n\n\n\n\n## パッケージの概要\n\nlifecontingenciesは、ファイナンスや人口統計、保険数理の標準的な計算を実行することができるパッケージです。生命保険のリスク評価を実行するための包括的なツールセットとなっています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lifecontingencies)\n```\n:::\n\n\n\n\n## データの取得\n\nlifecontingenciesにはたくさんのデータセットが含まれています。以下にパッケージに含まれるデータセットの一覧を出力します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# データセット一覧を取得\ndatasets_info <- as.data.frame(data(package=\"lifecontingencies\")$results[,c(\"Item\",\"Title\")])\n# 各データセットの型を取得し、一覧に追加\ndatasets_info$Class <- sapply(datasets_info$Item, function(x) class(get(x)))\n# データセット一覧を出力\ncat(apply(datasets_info, 1, function(x) paste(x, collapse = \" : \")), sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAF92Lt : Uk AM AF 92 life tables : lifetable\nAM92Lt : Uk AM AF 92 life tables : lifetable\nSoAISTdata : SoA illustrative service table : data.frame\nde_angelis_di_falco : Italian Health Insurance Data : list\ndemoCanada : Canada Mortality Rates for UP94 Series : data.frame\ndemoChina : China Mortality Rates for life table construction : data.frame\ndemoFrance : French population life tables : data.frame\ndemoGermany : German population life tables : data.frame\ndemoIta : Italian population life tables for males and females : data.frame\ndemoJapan : Japan Mortality Rates for life table construction : data.frame\ndemoUk : UK life tables : data.frame\ndemoUsa : United States Social Security life tables : data.frame\nsoa08 : Society of Actuaries Illustrative Life Table object. : lifetable\nsoa08Act : Society of Actuaries Illustrative Life Table with interest rate at 6 : actuarialtable\nsoaLt : Society of Actuaries life table : data.frame\n```\n\n\n:::\n:::\n\n\n\n例えば、soaLtは古典的書籍『Actuarial Mathematics (Second Edition)』から参照された、年齢$x$と生存数$I_x$の2列から成るデータフレームです。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(soaLt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x       Ix\n1 0 10000000\n2 1  9949901\n3 2  9899801\n4 3  9849702\n5 4  9799602\n6 5  9749503\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(soaLt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      x   Ix\n106 105 1668\n107 106  727\n108 107  292\n109 108  108\n110 109   36\n111 110   11\n```\n\n\n:::\n:::\n\n\n\n\n##  lifetable-class\n\nlifetable型のオブジェクトは、年齢と各年齢に対応する生存数があれば作成でき、生存確率$p_x$と平均余命$e_x$を保持しています。\n\ndata.frame型であるsoaLtのデータセットから、with関数およびnew関数を利用してlifetable型のオブジェクトを作成し、このオブジェクトをもう一度data.frame型に変換し直すと、生存確率$p_x$と平均余命$e_x$の情報が追加されていることがわかります。  \n\nなお、lifecontingenciesにはsoa08というlifetable型のデータセットが含まれていますが、こちらは『Actuarial Mathematics (Second Edition)』のAppendix 2Aに掲載されているIllustrative life tableより作成されたもので、soaLtとは数値が異なります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# soaLtの先頭行を出力。年齢xと生存数Ixの情報のみ。\nhead(soaLt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x       Ix\n1 0 10000000\n2 1  9949901\n3 2  9899801\n4 3  9849702\n5 4  9799602\n6 5  9749503\n```\n\n\n:::\n\n```{.r .cell-code}\n# soaLtからlifetable型のオブジェクトsoaLt_lifetableを作成。\nsoaLt_lifetable <- with(soaLt, new(\"lifetable\",x=x,lx=Ix,name=\"lifetable\"))\nstr(soaLt_lifetable)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFormal class 'lifetable' [package \"lifecontingencies\"] with 3 slots\n  ..@ x   : int [1:111] 0 1 2 3 4 5 6 7 8 9 ...\n  ..@ lx  : num [1:111] 10000000 9949901 9899801 9849702 9799602 ...\n  ..@ name: chr \"lifetable\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# soaLt_lifetableをdata.frame型に変換（head関数を使用できるようにするため）。\nsoaLt_df <- as(soaLt_lifetable, \"data.frame\")\n\n# 再び先頭行を出力。lifetable型のオブジェクトを作成したことで生存確率pxと平均余命exが取得できた。\nhead(soaLt_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x       lx        px       ex\n1 0 10000000 0.9949901 71.34692\n2 1  9949901 0.9949648 70.70616\n3 2  9899801 0.9949394 70.06398\n4 3  9849702 0.9949136 69.42035\n5 4  9799602 0.9948876 68.77526\n6 5  9749503 0.9990991 68.12867\n```\n\n\n:::\n:::\n\n\n\n##  actuarialtable-class\n\nactuarialtable型のオブジェクトは、年齢と各年齢に対応する生存数に加えて予定利率を設定すれば作成でき、計算基数を保持しています。\n\n上述のlifetable型と同様の方法で、soaLtのデータセットからactuarialtable型のオブジェクトを作成し、計算基数の情報が追加されることを確認します。なお、ここでは予定利率を2.0%とします。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# soaLtの先頭行を出力。年齢xと生存数Ixの情報のみ。\nhead(soaLt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x       Ix\n1 0 10000000\n2 1  9949901\n3 2  9899801\n4 3  9849702\n5 4  9799602\n6 5  9749503\n```\n\n\n:::\n\n```{.r .cell-code}\n# soaLtからactuarialtable型のオブジェクトsoaLt_actuarialtableを作成。\nsoaLt_actuarialtable <- with(soaLt, new(\"actuarialtable\",interest=0.02,\n                                        x=x,lx=Ix,name=\"actuarialtable\"))\nstr(soaLt_actuarialtable)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFormal class 'actuarialtable' [package \"lifecontingencies\"] with 4 slots\n  ..@ interest: num 0.02\n  ..@ x       : int [1:111] 0 1 2 3 4 5 6 7 8 9 ...\n  ..@ lx      : num [1:111] 10000000 9949901 9899801 9849702 9799602 ...\n  ..@ name    : chr \"actuarialtable\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# soaLt_actuarialtableをdata.frame型に変換（head関数を使用できるようにするため）。\nsoaLt_df2 <- as(soaLt_actuarialtable, \"data.frame\")\n\n# 再び先頭行を出力。actuarialtable型のオブジェクトを作成したことで計算基数が取得できた。\nhead(soaLt_df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x       lx       Dx        Nx        Cx      Mx        Rx\n1 0 10000000 10000000 376393655 49117.059 2619732 161974034\n2 1  9949901  9754805 366393655 48153.979 2570615 159354301\n3 2  9899801  9515380 356638851 47209.784 2522461 156783686\n4 3  9849702  9281594 347123471 46284.102 2475251 154261225\n5 4  9799602  9053318 337841877 45376.570 2428967 151785974\n6 5  9749503  8830425 328788559  7799.053 2383591 149357006\n```\n\n\n:::\n:::\n\n\n\n\n## 生命年金の年金現価\n\nlifecontingenciesに含まれているactuarialtable型のデータセットであるsoa08Actを用いて、様々な生命年金の年金現価を計算してみます。このデータセットはsoaLtと同じ生存数によるものですが、予定利率は6.0%です。なお、予定利率はaxn関数の引数にて新たに設定することも可能ですが、ここでは6.0%のままとします（以下に紹介する関数も同様）。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 70歳開始の期始払終身年金の年金現価\naxn(soa08Act, x=70, payment=\"advance\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8.569251\n```\n\n\n:::\n\n```{.r .cell-code}\n# 60歳開始の期末払有期年金（10年）の年金現価\naxn(soa08Act, x=60, n=10, payment=\"arrears\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.730136\n```\n\n\n:::\n\n```{.r .cell-code}\n# 65歳開始（5年据置して70歳に初回支払）の期始払有期年金（15年）の年金現価\naxn(soa08Act, x=65, n=15, m=5, payment=\"advance\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.164831\n```\n\n\n:::\n:::\n\n\n\nまた、x、n、mの引数はベクトルで設定することも可能です。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 60～70歳開始の期始払終身年金の年金現価\naxn(soa08Act, x=c(60:70), payment=\"advance\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 11.145352 10.904118 10.658363 10.408367 10.154442  9.896928  9.636190\n [8]  9.372622  9.106643  8.838698  8.569251\n```\n\n\n:::\n\n```{.r .cell-code}\n# 60歳開始の期末払有期年金（5,10,15,20年）の年金現価\naxn(soa08Act, x=60, n=c(5,10,15,20), payment=\"arrears\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4.028154 6.730136 8.435766 9.414205\n```\n\n\n:::\n:::\n\n\n\n## 生命保険の一時払保険料\n\n同様に、soa08Actを用いて、様々な生命保険の一時払保険料を計算してみます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 30歳加入、保険期間10年の定期保険の一時払保険料\nAxn(soa08Act, x=30, n=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.01418541\n```\n\n\n:::\n\n```{.r .cell-code}\n# 60歳開始、保険期間5年の養老保険の一時払保険料\nAExn(soa08Act, x=60, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7543062\n```\n\n\n:::\n:::\n\n\n\n生命年金と同様に、引数はベクトルで設定することも可能です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 30歳加入、保険期間1～10年の定期保険の一時払保険料\nAxn(soa08Act, x=30, n=c(1:10))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.001442374 0.002872079 0.004292064 0.005705164 0.007114111 0.008521538\n [7] 0.009929980 0.011341881 0.012759600 0.014185406\n```\n\n\n:::\n:::\n\n\n\n## 生命保険の責任準備金\n\n上記で紹介した関数を利用して、定期保険の純保険料式責任準備金を経過別に算出してみましょう。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 40歳加入、保険期間20年の定期保険の年払純保険料\nP <- Axn(soa08Act, x=40, n=20) / axn(soa08Act, x=40, n=20, payment=\"advance\")\nprint(P)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.005112706\n```\n\n\n:::\n\n```{.r .cell-code}\n# 40歳加入、保険期間20年の定期保険の純保険料式責任準備金\nV <- data.frame(t = numeric(21), Reserve = numeric(21))\nfor (t in 0:20){\n  V[t+1, 1] <- t\n  V[t+1, 2] <- Axn(soa08Act, x=40+t, n=20-t) - P * axn(soa08Act, x=40+t, n=20-t, payment=\"advance\")\n}\nprint(V)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    t     Reserve\n1   0 0.000000000\n2   1 0.002645617\n3   2 0.005257705\n4   3 0.007815974\n5   4 0.010297115\n6   5 0.012674419\n7   6 0.014917344\n8   7 0.016991027\n9   8 0.018855721\n10  9 0.020466160\n11 10 0.021770822\n12 11 0.022711085\n13 12 0.023220254\n14 13 0.023222423\n15 14 0.022631158\n16 15 0.021347950\n17 16 0.019260396\n18 17 0.016240051\n19 18 0.012139873\n20 19 0.006791181\n21 20 0.000000000\n```\n\n\n:::\n\n```{.r .cell-code}\n# ggplotを使って責任準備金をプロット\nlibrary(ggplot2)\n\nggplot(V, aes(x = t, y = Reserve)) +\n  geom_line() +\n  labs(x = \"t\", y = \"Reserve\") \n```\n\n::: {.cell-output-display}\n![](lifecontingencies_files/figure-html/reserve-1.png){width=576}\n:::\n:::\n",
    "supporting": [
      "lifecontingencies_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}