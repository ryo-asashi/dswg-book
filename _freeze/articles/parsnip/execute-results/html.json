{
  "hash": "5414e5dce19a6f742e9f0c794b676011",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"parsnip\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    toc: true\n    toc_depth: '3'\n    fig_width: 6\n    fig_height: 3\n---\n\n\n\n\n\n\n## パッケージの概要\n\nparsnipは、機械学習や予測モデリングを行うパッケージ群tidymodelsに含まれるパッケージで、様々なモデルを統一的な記法で使用するためのインターフェースを提供します。\n一つのアルゴリズム、例えばランダムフォレストのモデルを構築しようとしたときに、パッケージはranger、randomForest等複数の選択肢が存在し、その実行方法やパラメータの名称、設定方法は微妙に異なっていることもあるかもしれません。\nparsnipは、これらのパッケージ間の実行方法の違いを吸収してくれるパッケージです。  \n  \nparsnipの概要を示す例として、ランダムフォレストによる回帰モデルを作成します。\nサンプルデータとして、modeldataパッケージに含まれているカリフォルニア州サクラメント市の住宅価格のデータSacramentoを用います。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(parsnip)\nlibrary(modeldata)\nlibrary(dplyr)\n\nset.seed(1234)\n\ndata(\"Sacramento\", package=\"modeldata\") \n# 今回はカーディナリティの高い(レコード数に対して取り得る値が多い)特徴量は除外\nd <- Sacramento[, !(colnames(Sacramento) %in% \n                      c(\"city\", \"zip\", \"latitude\", \"longitude\"))] \nstr(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [932 × 5] (S3: tbl_df/tbl/data.frame)\n $ beds : int [1:932] 2 3 2 2 2 3 3 3 2 3 ...\n $ baths: num [1:932] 1 1 1 1 1 1 2 1 2 2 ...\n $ sqft : int [1:932] 836 1167 796 852 797 1122 1104 1177 941 1146 ...\n $ type : Factor w/ 3 levels \"Condo\",\"Multi_Family\",..: 3 3 3 3 3 1 3 3 1 3 ...\n $ price: int [1:932] 59222 68212 68880 69307 81900 89921 90895 91002 94905 98937 ...\n```\n\n\n:::\n:::\n\n\n\nまずはrandomForestパッケージを使用します。\nここでは各パッケージをそのまま使用する場合とparsnipを使用する場合との違いを示すことが目的ですので詳細は割愛しますが、Sacramentoデータのpriceを目的変数として、他の変数で回帰するランダムフォレストモデルを構築しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# From randomForest\nlibrary(randomForest)\nrf_1 <- randomForest(\n  price ~ ., \n  data = d, \n  mtry = 3, \n  ntree = 200, \n  nodesize = 3,\n  importance = TRUE\n)\nrf_1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\n randomForest(formula = price ~ ., data = d, mtry = 3, ntree = 200,      nodesize = 3, importance = TRUE) \n               Type of random forest: regression\n                     Number of trees: 200\nNo. of variables tried at each split: 3\n\n          Mean of squared residuals: 7646314367\n                    % Var explained: 55.48\n```\n\n\n:::\n:::\n\n\n\n次にrangerパッケージで同じ内容のランダムフォレストモデルを構築します。\nこの二つのパッケージの例では実行方法に大きな違いはありませんが、それでもなお、指定するハイパーパラメータの変数名が一部異なっていることがわかります。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# From ranger\nlibrary(ranger)\nrf_2 <- ranger(\n  price ~ ., \n  data = d, \n  mtry = 3, \n  num.trees = 200, \n  min.node.size = 3,\n  importance = \"impurity\"\n)\nrf_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(price ~ ., data = d, mtry = 3, num.trees = 200, min.node.size = 3,      importance = \"impurity\") \n\nType:                             Regression \nNumber of trees:                  200 \nSample size:                      932 \nNumber of independent variables:  4 \nMtry:                             3 \nTarget node size:                 3 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       7674868879 \nR squared (OOB):                  0.5536376 \n```\n\n\n:::\n:::\n\n\n\n今度はparsnipを通して両パッケージのランダムフォレストを実行します。\n二つの実行例のコードを見比べるとわかるように、parsnipを通して実行することで多くのパラメータが同じ変数名で指定できるようになります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# From randomForest\nrand_forest(mtry = 3, trees = 200, min_n = 3) %>%\n  set_mode(\"regression\") %>%\n  set_engine(\"randomForest\", importance = TRUE) %>%\n  fit(price ~ ., data = d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:\n randomForest(x = maybe_data_frame(x), y = y, ntree = ~200, mtry = min_cols(~3,      x), nodesize = min_rows(~3, x), importance = ~TRUE) \n               Type of random forest: regression\n                     Number of trees: 200\nNo. of variables tried at each split: 3\n\n          Mean of squared residuals: 7633083891\n                    % Var explained: 55.56\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# From ranger\nrand_forest(mtry = 3, trees = 200, min_n = 3) %>%\n  set_mode(\"regression\") %>%\n  set_engine(\"ranger\", importance = \"impurity\") %>%\n  fit(price ~ ., data = d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\nRanger result\n\nCall:\n ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~3,      x), num.trees = ~200, min.node.size = min_rows(~3, x), importance = ~\"impurity\",      num.threads = 1, verbose = FALSE, seed = sample.int(10^5,          1)) \n\nType:                             Regression \nNumber of trees:                  200 \nSample size:                      932 \nNumber of independent variables:  4 \nMtry:                             3 \nTarget node size:                 3 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       7655884183 \nR squared (OOB):                  0.5547417 \n```\n\n\n:::\n:::\n\n\n\nこの例のように、ランダムフォレストという同じモデルの同じハイパーパラメータであっても、パッケージによって変数名は異なっている場合があります。\nまた、パッケージによっては、目的変数と説明変数をformula形式(y ~ xのような形式)ではなく、それぞれを引数で与える方式を採用しているかもしれません。\nparsnipはそのような差異を吸収し、統一的な記法でモデルを構築する仕組みを提供するパッケージです。\n\n## 基本的な使用例１ - 回帰モデル\n\n前項で示したランダムフォレストの例について、１ステップごとに解説しながら、parsnipの基本的な使用方法を紹介します。  \n  \n**(1) モデルの生成**  \nまずは作成したいモデルの種類(例えば線形回帰、SVM、ランダムフォレスト等。parsnipではこれをmodel typeと呼ぶ。)に応じた関数を呼び出して、モデルを生成します。\nこれらの関数を呼び出すと、model_specという形式のデータでモデルが生成されます。\nmodel_specはモデルに関する各種の情報を保持するparsnipのデータ形式で、モデルの種類に加えて、後述するモード、エンジン、パラメータといった情報を付加していきます。  \n  \nランダムフォレストの場合、モデル生成関数はrand_forest関数を使用します。\n次のコードで、rand_forest関数にハイパーパラメータを与えて実行し、ランダムフォレストのmodel_specオブジェクトが作成されています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- rand_forest(mtry = 3, trees = 200)\nrf_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRandom Forest Model Specification (unknown mode)\n\nMain Arguments:\n  mtry = 3\n  trees = 200\n\nComputational engine: ranger \n```\n\n\n:::\n:::\n\n\n\nparsnipでは、モデルに与える引数は大きく、メイン引数(main arguments)とエンジン引数(engine arguments)に分けられます。\nメイン引数は、ある特定のモデルにおいて、パッケージの種類によらずどのパッケージでも指定する必要があるような基本的なモデルのパラメータを指し、モデルの種類(およびその生成関数)によって決められています。  \n  \nメイン引数は、モデルの生成関数を呼び出す際に引数として渡します。\n上の例ではランダムフォレストの生成関数であるrand_forest関数に、メイン引数として二つの引数(一つ一つの決定木を作成する際に用いる特徴量の数\"mtry\"、および決定木の数\"trees\")を渡しています。\nこの二つのパラメータは、パッケージによって変数名は異なる場合があるものの、ランダムフォレストを実行するためにはどのパッケージでも指定しなければならないような基本的なパラメータです。(省略した場合、デフォルトの値が設定されます。)  \n  \nこれに対してエンジン引数は、エンジンに指定したパッケージで使用できる引数のうち、メイン引数以外のものを指しています。\nエンジン引数はモデルのパッケージ(エンジン)を指定する際に合わせて引数として指定するので、「エンジンの設定」の項で解説します。\n\n**(2) モードの設定**  \nモデルをどのような課題に対して使用するかをset_mode関数で指定しますが、parsnipではこれをモードと呼びます。\n今回はランダムフォレストを回帰モデルとして使用するため、モードとして\"regression\"を指定します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- set_mode(rf_spec, mode = \"regression\")\nrf_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRandom Forest Model Specification (regression)\n\nMain Arguments:\n  mtry = 3\n  trees = 200\n\nComputational engine: ranger \n```\n\n\n:::\n:::\n\n\n\n実行結果を見ると、1行目の(unknown)となっていた箇所が、(regression)に更新されたことが確認できます。  \n  \n指定できるモードの種類はモデルの種類ごとに決まっています。\nランダムフォレストでは、回帰に用いる場合の\"regression\"以外にも、分類に用いる場合の\"classification\"および生存時間分析に用いる場合の“censored regression”が指定できます。\nまた、モデルの種類によっては、教師なし学習のモデルに用いる\"clustering”、生存時間分析のモデルに用いる“risk regression”といったモードが用意されています。\n\n**(3) エンジンの設定**  \n生成したモデルの具体的な実装について、set_engine関数でパッケージ(エンジン)を指定します。\nランダムフォレストのパッケージとして、例えば\"randomForest\"を指定します。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- set_engine(rf_spec, engine = \"randomForest\", importance = TRUE)\nrf_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRandom Forest Model Specification (regression)\n\nMain Arguments:\n  mtry = 3\n  trees = 200\n\nEngine-Specific Arguments:\n  importance = TRUE\n\nComputational engine: randomForest \n```\n\n\n:::\n:::\n\n\n\n実行結果を見ると、最終行に表示されているエンジンの指定が、デフォルトの\"ranger\"から\"randomForest\"に更新されたことが確認できます。  \n  \n上の例では、set_engine関数に\"importance\"という引数も渡しています。\nこのimportance引数は、randomForestパッケージでランダムフォレストを実行する際に使用する引数で、特徴量重要度を算出するかどうかを制御するためのものです。\nrandomForestパッケージで使用されている引数でありながら、parsnipのrand_forest関数ではメイン引数となっていない引数なので、先に述べた「エンジン引数」に該当します。\nこのようにエンジン引数は、使用するエンジンの指定と併せて、エンジンとして使用するパッケージ内での引数名のまま、set_engine関数に引き渡して使用することができます。  \n  \n**(4) モデルのフィッティング**  \nここまででモデルの設定が完了したので、データによる学習(フィッティング)を行います。\nモード、エンジンおよびパラメータを設定済みのmodel_spec、学習用のデータ、および目的変数と説明変数の関係を表す式(formula。R標準のlm等で使用するものと同じです。)をfit関数に渡します。\nfit関数を実行すると、学習済のparsnipモデルとしてmodel_fitという形式のデータが返ります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# train dataとtest dataに分割\nn_train <- floor(nrow(d) * 0.75)\nd_train <- d[1:n_train,]\nd_test <- d[(n_train+1):nrow(d),]\n\n# モデルのフィッティング\nrf_fit <- fit(rf_spec, price ~ ., data = d_train)\nrf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:\n randomForest(x = maybe_data_frame(x), y = y, ntree = ~200, mtry = min_cols(~3,      x), importance = ~TRUE) \n               Type of random forest: regression\n                     Number of trees: 200\nNo. of variables tried at each split: 3\n\n          Mean of squared residuals: 7699846058\n                    % Var explained: 51.66\n```\n\n\n:::\n:::\n\n\n\nなお、説明変数と目的変数の関係をformula形式で指定する方法以外にも、説明変数と目的変数をそれぞれ引数xとyで直接指定する方式のfit_xy関数が用意されています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_fit <- fit_xy(rf_spec, \n                 x = d_train[, names(d_train)[names(d_train) != \"price\"]], \n                 y = d_train$price)\nrf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:\n randomForest(x = maybe_data_frame(x), y = y, ntree = ~200, mtry = min_cols(~3,      x), importance = ~TRUE) \n               Type of random forest: regression\n                     Number of trees: 200\nNo. of variables tried at each split: 3\n\n          Mean of squared residuals: 7671604694\n                    % Var explained: 51.83\n```\n\n\n:::\n:::\n\n\n\n  \nさて、(1)から(4)では解説のために、モデルの生成から学習までの一連の処理を、一つ一つのステップへと分解して実行してきました。\n実際に使用する際は、以下のようにパイプ演算子でつなぎながら実行することで流れがわかりやすくなります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_fit <- rand_forest(mtry = 3, trees = 200) %>%\n  set_mode(mode = \"regression\") %>%\n  set_engine(engine = \"randomForest\", importance = TRUE) %>%\n  fit(price ~ ., data = d_train)\n```\n:::\n\n\n\n\n**(補足) モデルスペックの様々な設定方法**  \nモデルスペックの設定について、ここまでの例で示したものと異なる設定方法を紹介します。  \n  \nまずは、モデルのモードとエンジンはそれぞれset_mode関数およびset_engine関数を使用して設定しましたが、モデル生成関数の引数に指定して設定することもできます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# モデル生成用の関数(この例ではrand_forest)でモードとエンジンを設定する方式\nrf_spec <- rand_forest(\n  mode = \"regression\",\n  engine = \"ranger\",\n  mtry = 3, \n  trees = 200\n)\n```\n:::\n\n\n\n\n続いて、一度作成したmodel_specのメイン引数(ハイパーパラメータ)を更新するupdate関数を紹介します。\n次のコードは、上の例で作成したランダムフォレストのmodel_specについて、mtryの更新および設定していなかったmin_nを新たに設定しています。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- update(rf_spec, mtry = 5, min_n = 3, fresh = FALSE) \n# fresh=TRUEにするとパラメータ全体を入れ替える\n# (この場合、update関数で指定していないtreesパラメータの設定は初期化される)\n```\n:::\n\n\n\n\n最後に、model_specのモードとパラメータを維持したまま他のエンジンに変換する、translate関数を紹介します。\n次の例では、上で生成したランダムフォレストのmodel_specを、rangerエンジンからrandomForestエンジンに変換しています。\nなお、エンジン引数を設定している場合、エンジン引数もそのまま引き継がれますが、前述のようにエンジン引数は本来的にパッケージごとに異なるパラメータですので、変換後のパッケージでは使用できないこともある点に注意が必要です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntranslate(rf_spec, engine = \"randomForest\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRandom Forest Model Specification (regression)\n\nMain Arguments:\n  mtry = 5\n  trees = 200\n  min_n = 3\n\nComputational engine: randomForest \n\nModel fit template:\nrandomForest::randomForest(x = missing_arg(), y = missing_arg(), \n    mtry = min_cols(~5, x), ntree = 200, nodesize = min_rows(~3, \n        x))\n```\n\n\n:::\n:::\n\n\n\n**(5) モデルによる予測**  \n学習済のモデルをテストデータに適用して、テストデータに対する予測値を算出します。\nR標準のlm等のモデルと同じように、predict関数を使用することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny_pred = predict(rf_fit, d_test)[[1]]\ny_true = d_test$price\nplot(x = y_pred, y = y_true)\nabline(a=0, b=1, col=\"red\")\n```\n\n::: {.cell-output-display}\n![](parsnip_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\nなお予測値を取得する関数として、predict関数以外にも、parsnipではaugment関数が用意されています。\naugment関数は学習済のモデルと予測対象のデータを引数にとり、データに対して予測値と残差のカラムを追加したデータセットを返します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(rf_fit, d_test)[1:10,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n     .pred   .resid  beds baths  sqft type         price\n     <dbl>    <dbl> <int> <dbl> <int> <fct>        <int>\n 1 189186.   70814.     3   2    1196 Residential 260000\n 2 302809.  -42809.     3   2    1621 Residential 260000\n 3 303272.  -39772.     3   2    1811 Residential 263500\n 4 249206.   17304.     3   2    1540 Residential 266510\n 5 390607. -122857.     4   2.5  2647 Residential 267750\n 6 393610. -123610.     2   2    2750 Residential 270000\n 7 363463.  -92463.     3   2.5  1910 Residential 271000\n 8 261279.   11421.     4   2.5  1846 Residential 272700\n 9 244198.   30802.     3   2    1543 Residential 275000\n10 299032.  -23032.     5   3    2494 Residential 276000\n```\n\n\n:::\n:::\n\n\n\n\n## 基本的な使用例２ - 分類モデル\n\nここまでは、ランダムフォレストの回帰モデルを構築する例を通して、parsnipの基本的な使用方法を解説してきました。\n本項では、parsnipの別の使用例として、勾配ブースティング決定木(GBM)を分類問題に適用する例を紹介します。  \n  \nこの使用例を通じて、モデルの種類やモードが異なる場合でも、parsnipでは同じ流れでモデル構築ができることを示します。\nまた、学習済のparsnipモデルから情報を取り出して、更なる分析に使用する方法を紹介します。  \n  \nサンプルデータとして、modeldataパッケージに含まれるcredit_dataを使用します。\n顧客の信用度を示すStatus変数について、goodとbadを分類します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 <- na.omit(credit_data)\n\n# factor型の説明変数は数値に変換(ラベルエンコーディング)する。\n# ※factor型のままでも自動的にone-hotエンコーディングされるためモデルの構築は可能。\n# 　今回は後続の説明上の理由からラベルエンコーディングしている。\nfct_vars <- c('Home', 'Marital', 'Records', 'Job')\nd2[, fct_vars] <- (sapply(d2[, fct_vars], as.integer))\n\nstr(d2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t4039 obs. of  14 variables:\n $ Status   : Factor w/ 2 levels \"bad\",\"good\": 2 2 1 2 2 2 2 2 2 1 ...\n $ Seniority: int  9 17 10 0 0 1 29 9 0 0 ...\n $ Home     : int  6 6 3 6 6 3 3 4 3 4 ...\n $ Time     : int  60 60 36 60 36 60 60 12 60 48 ...\n $ Age      : int  30 58 46 24 26 36 44 27 32 41 ...\n $ Marital  : int  2 5 2 4 4 2 2 4 2 2 ...\n $ Records  : int  1 1 2 1 1 1 1 1 1 1 ...\n $ Job      : int  2 1 2 1 1 1 1 1 2 4 ...\n $ Expenses : int  73 48 90 63 46 75 75 35 90 90 ...\n $ Income   : int  129 131 200 182 107 214 125 80 107 80 ...\n $ Assets   : int  0 0 3000 2500 0 3500 10000 0 15000 0 ...\n $ Debt     : int  0 0 0 0 0 0 0 0 0 0 ...\n $ Amount   : int  800 1000 2000 900 310 650 1600 200 1200 1200 ...\n $ Price    : int  846 1658 2985 1325 910 1645 1800 1093 1957 1468 ...\n - attr(*, \"na.action\")= 'omit' Named int [1:415] 30 114 144 153 158 177 195 206 240 241 ...\n  ..- attr(*, \"names\")= chr [1:415] \"30\" \"114\" \"144\" \"153\" ...\n```\n\n\n:::\n:::\n\n\n\n**(1) モデルの生成～学習**  \nparsnipを通してGBMによる分類モデルを構築します。\n次の例では、GBM用のモデル生成関数boost_treeを用いて、モードには分類用の\"classification\"、使用するGBMパッケージとして\"xgboost\"をエンジンに指定しています。\nここではGBMのハイパーパラメータ等の詳細は割愛しますが、モデルの生成、モードとエンジンの設定、学習という流れ自体は、ランダムフォレストと同じであることがわかると思います。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# train dataとtest dataに分割\nn_train <- floor(nrow(d2) * 0.75)\nd_train <- d2[1:n_train,]\nd_test <- d2[(n_train+1):nrow(d2),]\n\n# モデルの生成～フィッティング\ngbm_fit <- \n  boost_tree(\n    mtry = 0.8,        # 木ごとに特徴量をサンプリングする割合\n    trees = 2000,      # 作成する木の本数\n    min_n = 1,         # 葉を分岐するために必要な最小のサンプル数\n    tree_depth = 5,    # 木ごとの最大の深さ\n    learn_rate = 0.05, # 学習率\n    sample_size = 0.8, # 木ごとにデータをサンプリングする割合\n    stop_iter = 300    # アーリーストッピング(一定のラウンド数で精度が上がらなければ打ち切る)を判定するラウンド数\n  ) %>%\n  set_mode(mode = \"classification\") %>%\n  set_engine(engine = \"xgboost\",       \n             eval_metric = \"logloss\",  # 損失関数の種類を指定\n             counts = FALSE,           # mtryを割合で指定するオプション\n             validation = 0.25) %>%    # アーリーストッピングの判定に用いるデータの割合\n  fit(Status ~ ., data = d_train)\ngbm_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n##### xgb.Booster\nraw: 799.2 Kb \ncall:\n  xgboost::xgb.train(params = list(eta = 0.05, max_depth = 5, gamma = 0, \n    colsample_bytree = 1, colsample_bynode = 0.8, min_child_weight = 1, \n    subsample = 0.8), data = x$data, nrounds = 2000, watchlist = x$watchlist, \n    verbose = 0, early_stopping_rounds = 300, eval_metric = \"logloss\", \n    nthread = 1, objective = \"binary:logistic\")\nparams (as set within xgb.train):\n  eta = \"0.05\", max_depth = \"5\", gamma = \"0\", colsample_bytree = \"1\", colsample_bynode = \"0.8\", min_child_weight = \"1\", subsample = \"0.8\", eval_metric = \"logloss\", nthread = \"1\", objective = \"binary:logistic\", validate_parameters = \"TRUE\"\nxgb.attributes:\n  best_iteration, best_msg, best_ntreelimit, best_score, niter\ncallbacks:\n  cb.evaluation.log()\n  cb.early.stop(stopping_rounds = early_stopping_rounds, maximize = maximize, \n    verbose = verbose)\n# of features: 13 \nniter: 386\nbest_iteration : 86 \nbest_ntreelimit : 86 \nbest_score : 0.4452538 \nbest_msg : [86]\tvalidation-logloss:0.445254 \nnfeatures : 13 \nevaluation_log:\n  iter validation_logloss\n <num>              <num>\n     1          0.6733157\n     2          0.6546558\n   ---                ---\n   385          0.4888858\n   386          0.4891175\n```\n\n\n:::\n:::\n\n\n\n\n学習済のモデルをテストデータに適用し、テストデータに対する分類結果とその正解率を算出します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny_pred <- predict(gbm_fit, d_test)[[1]]\ny_true <- d_test$Status\nsprintf(\"accuracy : %.4f\", sum(y_pred==y_true)/length(y_true))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"accuracy : 0.7921\"\n```\n\n\n:::\n:::\n\n\n\n\n**(2) モデル情報の利用**  \nparsnipを通して学習させたモデルからより多くの情報を取得するため、parsnipのオブジェクトとしてではなく、エンジンに指定したパッケージのオブジェクトとして扱いたい場合があるかもしれません。\n例えば、xgboostパッケージの学習済モデルであれば、xgboostのxgb.importance関数で特徴量重要度が計算できるので、parsnipで学習させたモデルをxgboostのモデルとして扱うことができれば都合がいいです。  \n  \nparsnipではextract_fit_engine関数が、そのような機能を提供します。\n次の例では、上で学習させたparsnipモデルから、extract_fit_engine関数でxgboostモデルとしての情報を取り出し、xgb.importance関数に渡しています。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimportance_gbm <- gbm_fit %>%\n  extract_fit_engine() %>%\n  xgb.importance(model = .)\nimportance_gbm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Feature        Gain      Cover  Frequency\n       <char>       <num>      <num>      <num>\n 1:    Income 0.162361809 0.15308392 0.15144738\n 2:     Price 0.152862530 0.19189145 0.18225867\n 3:    Amount 0.134619300 0.13369218 0.13318425\n 4: Seniority 0.118221478 0.10297003 0.08957634\n 5:       Age 0.081321036 0.08125753 0.11454839\n 6:   Records 0.077957485 0.05251855 0.02633868\n 7:    Assets 0.066155159 0.06963897 0.07764940\n 8:  Expenses 0.062748185 0.05693741 0.06994658\n 9:       Job 0.041249101 0.03177091 0.03093552\n10:      Time 0.036138501 0.03563342 0.04149584\n11:      Home 0.032315613 0.03410136 0.03640204\n12:      Debt 0.024199277 0.03237239 0.02932041\n13:   Marital 0.009850526 0.02413188 0.01689651\n```\n\n\n:::\n:::\n\n\n\n\nこの特徴量重要度の情報を利用して、重要度が上位の変数のみを使用した一般化線形モデル(ロジスティック回帰)によるモデルを構築することを考えます。\n特徴量重要度(Gain)の数値が、ある一定の値を超えている変数のみを使用して、parsnipを通したロジスティック回帰モデルを作成します。\nロジスティック回帰はlogistic_reg関数を使用しますが、モデル構築から予測までの流れはやはり、ランダムフォレストやGBMと同じです。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3 <- na.omit(credit_data)\nd_train <- d3[1:n_train,]\nd_test <- d3[(n_train+1):nrow(d3),]\n\nglm_fit <- \n  logistic_reg() %>%\n  set_mode(\"classification\") %>%\n  set_engine(\"glm\") %>%  # エンジンとしてR標準のglmを使用\n  fit_xy(x=d_train[, importance_gbm[importance_gbm$Gain > 0.05,][[\"Feature\"]]], \n         y=d_train$Status)\nglm_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n\nCoefficients:\n(Intercept)       Income        Price       Amount    Seniority          Age  \n  1.094e+00    7.647e-03    1.310e-03   -2.288e-03    1.075e-01   -6.543e-03  \n Recordsyes       Assets     Expenses  \n -1.846e+00    2.478e-05   -1.219e-02  \n\nDegrees of Freedom: 3028 Total (i.e. Null);  3020 Residual\nNull Deviance:\t    3410 \nResidual Deviance: 2683 \tAIC: 2701\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny_pred <- predict(glm_fit, d_test)[[1]]\ny_true <- d_test$Status\nsprintf(\"accuracy : %.4f\", sum(y_pred==y_true)/length(y_true))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"accuracy : 0.7752\"\n```\n\n\n:::\n:::\n\n\n\nここではロジスティック回帰のエンジンとしてR標準のglmを使用していますが、glmのモデルは、summary関数で各説明変数の標準誤差等のより詳細な情報が確認できます。\nそこで再度extract_fit_engine関数を使用して、parsnipモデルからglmモデルとしての情報を取り出し、summary関数に渡します。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_fit %>% \n  extract_fit_engine() %>%\n  summary(.)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nstats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n\nCoefficients:\n              Estimate Std. Error z value Pr(>|z|)    \n(Intercept)  1.094e+00  2.274e-01   4.811 1.50e-06 ***\nIncome       7.647e-03  8.305e-04   9.207  < 2e-16 ***\nPrice        1.310e-03  1.634e-04   8.021 1.05e-15 ***\nAmount      -2.288e-03  1.966e-04 -11.641  < 2e-16 ***\nSeniority    1.075e-01  9.039e-03  11.890  < 2e-16 ***\nAge         -6.543e-03  5.264e-03  -1.243  0.21388    \nRecordsyes  -1.846e+00  1.287e-01 -14.340  < 2e-16 ***\nAssets       2.478e-05  7.969e-06   3.109  0.00188 ** \nExpenses    -1.219e-02  2.582e-03  -4.722 2.33e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 3410.5  on 3028  degrees of freedom\nResidual deviance: 2682.8  on 3020  degrees of freedom\nAIC: 2700.8\n\nNumber of Fisher Scoring iterations: 5\n```\n\n\n:::\n:::\n\n\n\n\n## parsnipで様々なモデルを使用する\n\nここまでの例で示してきたように、parsnipではモデルの種類、エンジン、モードの組み合わせでモデルを特定します。\nあるモデルの種類に関して、parsnipが対応しているパッケージ(エンジン)とモードの組み合わせを表示するshow_engines関数が用意されています。\n例えばGBMについてこれらの情報を知りたい場合、show_engines関数に、GBMの生成関数の名称である\"boost_tree\"を引数として渡して実行します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow_engines(\"boost_tree\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  engine  mode          \n  <chr>   <chr>         \n1 xgboost classification\n2 xgboost regression    \n3 C5.0    classification\n4 spark   classification\n5 spark   regression    \n```\n\n\n:::\n:::\n\n\n\ntidymodelsの公式サイトではparsnipが対応しているモデル、エンジン、モードの全ての組み合わせが一覧化されているので、そちらもご参照ください。  \n  \n - **Search parsnip models**. [https://www.tidymodels.org/find/parsnip/](https://www.tidymodels.org/find/parsnip/).  \n  \nまた、更に発展的な使用方法として、parsnipに用意されていないモデルを新たに登録し、parsnipのインターフェースで実行できるようにする方法も用意されています。\nこれにより、parsnipベースで記述したコードを再利用できたり、tidymodelsの他のパッケージとの連携が可能になるといった利点が考えられます。\nモデルの追加はparsnipのディベロッパー・ツールとして用意されている関数を使用します。\n次のコードは新たなモデルとそのモード、エンジンとなるパッケージを登録しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 架空のnewpkgパッケージをnew_modelの回帰モデルとして登録する\nset_new_model(\"new_model\")\nset_model_mode(model = \"new_model\", mode = \"regression\")\nset_model_engine(\n  model = \"new_model\",\n  mode = \"regression\",\n  eng = \"newpkg\"\n)\nset_dependency(\"new_model\", eng = \"newpkg\", pkg = \"newpkg\")\nshow_model_info(\"new_model\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nInformation for `new_model`\n modes: unknown, regression \n\n engines: \n   regression: newpkgNA\n\n\n no registered arguments.\n\n no registered fit modules.\n\n no registered prediction modules.\n```\n\n\n:::\n:::\n\n\n\n実際に使用するには更に、モデル生成関数の作成、引数の設定、fit関数及びpreditct関数に対する動作の設定等が必要になります。\n内容はやや高度になりますので、興味がある方はtidymodels公式サイトの以下記事をご参照ください。  \n  \n - **How to build a parsnip model**. [https://www.tidymodels.org/learn/develop/models/](https://www.tidymodels.org/learn/develop/models/).  \n  \n## 参考資料\n\n[1] Kuhn et al., (2020). Tidymodels: a collection of packages for modeling and machine learning using tidyverse principles. [https://www.tidymodels.org](https://www.tidymodels.org).  \n[2] Kuhn M, Vaughan D (2025). parsnip: A Common API to Modeling and Analysis Functions. R package version 1.3.1, [https://parsnip.tidymodels.org/](https://parsnip.tidymodels.org/), [https://github.com/tidymodels/parsnip](https://github.com/tidymodels/parsnip).  \n",
    "supporting": [
      "parsnip_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}