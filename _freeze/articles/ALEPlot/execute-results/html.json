{
  "hash": "bdd346e1e2f4a9d68ff65f47deed3e4b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ALEPlot\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    fig-width: 6\n    fig-height: 4\n---\n\n\n\n\n\n\n## パッケージの概要\n\nALEPlot パッケージは、予測モデルとデータをもとに、ALE (Accumulated Local Effects、累積局所効果) を可視化する機能を実装したパッケージです。\n\nなお、ALE は、関心のある説明変数 $X$ について、それが取りうる値の分割 $[x_{[0]}, x_{[1]}), [x_{[1]}, x_{[2]}), ...$ を考え、各区間について、そこに含まれるデータの $X$ の値を区間の両端の値に置き換えたときの予測値の増分の平均値をその区間の局所効果とみなし、区間ごとの局所効果を累積させることで、変数 $X$ の影響を $X$ に関する1変数関数として表現する手法です。\n\n手法の詳細については、たとえば、「解釈可能な機械学習」に関するウェブ版書籍（Molnar著、株式会社HACARUS訳）の解説 [https://hacarus.github.io/interpretable-ml-book-ja/ale.html](#0){style=\"font-size: 13pt;\"} などをご参照ください。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(Boston, package = \"MASS\")\nlibrary(parsnip) # 予測モデルの構築\nlibrary(dplyr) # データフレームの操作\n\n# ランダムシードを固定する\nset.seed(42)\n\n# 予測モデルを構築する\nmodel <- boost_tree() %>%\n  set_mode('regression') %>%\n  fit(medv~., data = Boston)\n\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             Length Class       Mode   \nlvl          0      -none-      NULL   \nordered      1      -none-      logical\nspec         7      boost_tree  list   \nfit          9      xgb.Booster list   \npreproc      4      -none-      list   \nelapsed      2      -none-      list   \ncensor_probs 0      -none-      list   \n```\n\n\n:::\n:::\n\n\n\n\n## ALEプロットを作成する（ALEPlot）\n\n`ALEPlot()` 関数を使えば、ALE プロットを描画することができます。\n\nここで、`pred.fun` に渡す予測用の関数は、`X.model` と `newdata` を入力すると予測値を数値ベクトルとして出力するようなものであることが必要です。`lm` を含む多くのモデルでは、モデルに対応する `predict` 関数のメソッドが数値ベクトルを出力するため、`pred.fun = predict` としておけば動作します。`predict` の返り値がベクトルでないようなクラスのモデルでは、以下のように適切に定義することが必要です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ALEPlot)\n\n# ALEPlot関数の `X` に渡す説明変数Xを用意する\nX <- select(Boston, -medv)\n\n# ALEPlot関数の `pred.fun` に渡す予測のための関数を定義する\npred_parsnip = function(X.model, newdata){\n  predict(X.model, new_data = newdata)$.pred\n  # 予測値をベクトルとして抽出\n}\n\n# ALEPlotを描画する\nale <- ALEPlot(X, model, pred_parsnip, J = \"rm\", K = 50)\n```\n\n::: {.cell-output-display}\n![](ALEPlot_files/figure-html/ALEPlot-1.png){width=576}\n:::\n:::\n\n\n\n\nDALEXパッケージがインストール済みの場合は、DALEX::yhat() 関数を利用することもできます。この関数は、ALEPlot() 関数が要求するのと同じ引数名で定義されており、しかも、かなり広範な種類の予測モデルに対応しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2次元ALEPlotを描画する\nale.2d <- ALEPlot(X, model, DALEX::yhat, c(\"rm\", \"dis\"))\n```\n\n::: {.cell-output-display}\n![](ALEPlot_files/figure-html/unnamed-chunk-2-1.png){width=576}\n:::\n:::\n\n\n\n\n標準のプロットは R のグラフィックス関数で作成されますが、返り値をデータフレーム化することで、ggplot2 パッケージで ALE を可視化することもできます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data = as.data.frame(ale[2:3]),\n       aes(x = x.values, y = f.values)) +\n  geom_line() + geom_point()\n```\n\n::: {.cell-output-display}\n![](ALEPlot_files/figure-html/aleplot_gg-1.png){width=576}\n:::\n:::\n\n\n\n\n## PDプロットを作成する（PDPlot）\n\nPD プロットを作成するための関数 `PDPlot()` を用いれば、PD を描画することもできます。基本的な使い方は `ALEPlot()` 関数と同じです。\n\nなお、PD は、ALE と同様に、予測モデルにおける特定の特徴量の効果を解釈するための手法です。詳細については、前掲のウェブ書籍の解説 <https://hacarus.github.io/interpretable-ml-book-ja/pdp.html> などをご参照ください。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# PDPlotを描画する\npdp <- PDPlot(X, model, pred_parsnip, \"rm\", 20)\n```\n\n::: {.cell-output-display}\n![](ALEPlot_files/figure-html/PDPlot-1.png){width=576}\n:::\n:::\n",
    "supporting": [
      "ALEPlot_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}