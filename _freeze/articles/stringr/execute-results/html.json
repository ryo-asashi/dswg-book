{
  "hash": "a3af4403ffe516c182115d86d0824f29",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"stringr\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    toc: true\n    toc_depth: '3'\n    fig_width: 6\n    fig_height: 3\n---\n\n\n\n\n\n\n## パッケージの概要\n\nstringrは、文字列を操作するための関数群を提供するパッケージです。また、このパッケージは、Rでモダンな分析環境を構築するためのパッケージ群である「tidyverse」に含まれています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(dplyr) #パイプ処理の例に利用\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n:::\n\n\n\n\n## R標準の関数との比較\n\nR標準の関数と比較すると、stringrパッケージの関数は、基本的には関数の名称がstrから始まり、最初の引数は文字列になるなど、命名規則・引数の取扱いに一貫性があります。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 比較するベクトルを作成\nx <- c(\"apple\", \"banana\", NA, \"\", \"あいう\") \n\n# strから始まる関数がstringrパッケージの関数\n# 文字数の確認\nstr_length(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5  6 NA  0  3\n```\n\n\n:::\n\n```{.r .cell-code}\nnchar(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5  6 NA  0  3\n```\n\n\n:::\n\n```{.r .cell-code}\n# 小文字（a）を大文字（A）に変換\nstr_replace_all(x, \"a\", \"A\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Apple\"  \"bAnAnA\" NA       \"\"       \"あいう\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngsub(\"a\", \"A\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Apple\"  \"bAnAnA\" NA       \"\"       \"あいう\"\n```\n\n\n:::\n:::\n\n\n\n\nまた、stringrパッケージはtidyverseに含まれるパッケージであるため、パイプ処理（%>%）と一緒に利用しやすくなっています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 比較するベクトルを作成\nx <- c(\"apple\", \"banana\", NA, \"\", \"あいう\") \n\n# パイプ処理の例（R標準）\nx %>%\n  { gsub(\"a\", \"A\", .) }\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Apple\"  \"bAnAnA\" NA       \"\"       \"あいう\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# パイプ処理の例(stringr)\n# 最初の引数が文字列となるため、自然な記載が可能\nx %>%\n  str_replace_all(\"a\", \"A\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Apple\"  \"bAnAnA\" NA       \"\"       \"あいう\"\n```\n\n\n:::\n:::\n\n\n\n\n## 関数の紹介\nstringrパッケージの関数の実行例をいくつか紹介します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 文字列の一部を抽出\nstr_sub(\"abcdef\", 2, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"bcd\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 文字列の連結\nstr_c(\"a\", \"b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ab\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 指定したパターンに合致するかを判定。正規表現も利用可能\nX <- c(\"apple\", \"banana\")\nstr_detect(X, \"a\")  # 文字列にaが含まれるかどうかを判定\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_detect(X, \"^a\") # 文字列がaから始まるかどうかを判定\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# 指定したパターンに合致する最初の文字を置換\nstr_replace(\"apple\", \"p\", \"P\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aPple\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 指定した区切り文字で分割\nstr_split(\"a,b,c\", \",\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"a\" \"b\" \"c\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 文字列の先頭・末尾の空白を削除\nstr_trim(\" hello world \")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hello world\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# 大文字に変換\nstr_to_upper(\"abc\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ABC\"\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}