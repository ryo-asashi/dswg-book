{
  "hash": "e0637fb8aa2e761af3fc0bd6a86ef06e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"DALEX\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    fig-width: 6\n    fig-height: 3\n---\n\n\n\n\n\n\n## パッケージの概要\n\nDALEX パッケージは、予測モデルを解釈するために開発された可視化手法を統一的な記法で実行するためのパッケージです。DALEX パッケージでは、予測モデルに explain() 関数を適用することで、explainer オブジェクトが作成されます。この explainer オブジェクトに対して、DALEX パッケージのさまざまな関数を適用することで、PDP、ICE、SHAP などのプロットを簡単に作成することができます。\n\nそれぞれの手法の詳細については、たとえば、解釈可能な機械学習に関するウェブ書籍 [*Interpretable Machine Learning*](https://christophm.github.io/interpretable-ml-book/)（[邦訳](https://hacarus.github.io/interpretable-ml-book-ja/index.html)）などをご参照ください。\n\nここでは、例として、trees データセットの Volume を Girth と Height から予測するモデルを作成し、そのモデルに対して解釈手法を適用してみましょう。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# treesデータセットを読み込み、ランダムフォレストモデルを作成する。\nlibrary(ranger)\ndata(trees, package = \"datasets\")\nmodel_rf <- ranger(Volume~., trees)\n```\n:::\n\n\n\n\n## モデル解釈のためのオブジェクトを作成する\n\nexplain() 関数は、さまざまなパッケージのもとで作成された予測モデルを、DALEX パッケージの他の関数に対応するように加工するための関数です。加工後の予測モデルは explainer オブジェクトと呼ばれます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(DALEX)\nexplainer <- explain(model_rf,\n                     data = select(trees, -Volume),\n                     y = trees$Volume,\n                     quietly = TRUE,\n                     verbose = FALSE)\n```\n:::\n\n\n\n\n## 個別の予測における特徴量と予測値の関係を解釈する\n\nexplainer オブジェクトに predict_profile() 関数を適用すると、ICE（Individual Conditional Expectation）プロットを作図することができます。ICE プロットは、注目している特徴量の値だけが違っていた場合に予測値がどのように変化するかを、個々の予測ごとに可視化するものです。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nice <- explainer %>% predict_profile(new_observation = trees)\nplot(ice)\n```\n\n::: {.cell-output-display}\n![](DALEX_files/figure-html/DALEX--predict_profile-1.png){width=576}\n:::\n:::\n\n\n\n\n## モデルにおける特徴量と予測値の関係を解釈する\n\nexplainer オブジェクトにmodel_profile() 関数を適用すると、PD（Partial Dependence）プロットを作図することができます。PD プロットは、データ全体の ICE プロットを平均したものにほかならず、注目している特徴量の値が変化したときに予測値が平均的にどのように変化するかを表していると解釈できます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdp <- explainer %>% model_profile()\nplot(pdp, geom = 'profiles') + theme_gray()\n```\n\n::: {.cell-output-display}\n![](DALEX_files/figure-html/DALEX--model_profile-1.png){width=576}\n:::\n:::\n\n\n\n\nまた、model_profile() 関数や plot() 関数用のメソッドの引数 geom を調整することで、ALE（Accumulated Local Effects）プロットを作成したり、実際のデータ点を表示したりするほか、さまざまな変更を加えることが可能です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nale <- explainer %>% model_profile(type = \"accumulated\")\nplot(ale, geom = 'points') + theme_bw()\n```\n\n::: {.cell-output-display}\n![](DALEX_files/figure-html/DALEX--model_profile for ale-1.png){width=576}\n:::\n:::\n\n\n\n\n## 個別の予測における特徴量の寄与を解釈する\n\nexplainer オブジェクトに predict_parts() 関数を適用すると、SHAP（SHapley Additive exPlanation）プロットを作図することができます。SHAP は、個別の予測値と平均的な予測値との差を、ゲーム理論的手法によって特徴量ごとの寄与に分解したものです。ここでは、5 番目のインスタンスに対する予測への特徴量ごとの寄与を表示してみます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshap <- explainer %>% predict_parts(trees[5,], type = 'shap')\nplot(shap) + theme_light() + theme(legend.position = 'null')\n```\n\n::: {.cell-output-display}\n![](DALEX_files/figure-html/DALEX--predict_parts-1.png){width=576}\n:::\n:::\n\n\n\n\n## SHAPをウォーターフォール図として描く\n\npredict_parts() 関数が出力したオブジェクト（predict_parts オブジェクト）を shapviz パ ッケージの shapviz() 関数で shapviz オブジェクトに変換することで、ウォーターフォール図を描くことも可能です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shapviz)\nsv_waterfall(shapviz(shap)) + theme_light()\n```\n\n::: {.cell-output-display}\n![](DALEX_files/figure-html/shapviz--sv_waterfall-1.png){width=576}\n:::\n:::\n\n\n\n\n## モデルにおける特徴量の重要度を解釈する\n\nexplainer オブジェクトに model_parts() 関数を適用すると、PFI（Permutation Feature Importance）プロットを作図することができます。PFI は、「データの中で特定の特徴量だけをランダムに並び替えたときに、予測精度がどの程度低下するか」をその特徴量の重要度として解釈するものです。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npfi <- explainer %>% model_parts()\nplot(pfi) + theme_bw() + theme(legend.position = 'none')\n```\n\n::: {.cell-output-display}\n![](DALEX_files/figure-html/DALEX--model_parts-1.png){width=576}\n:::\n:::\n\n\n\n\n## 参考資料\n\nDALEX パッケージには、ここで紹介した手法以外にもさまざまな便利な関数が用意されています。以下のウェブ書籍には、それらの手法の説明だけでなく、R と Python の具体的なコード例も紹介されており、大変有用です。\n\nPrzemyslaw Biecek and Tomasz Burzykowski, *Explanatory Model Analysis Explore, Explain, and Examine Predictive Models. With examples in R and Python*. <https://ema.drwhy.ai/>\n",
    "supporting": [
      "DALEX_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}