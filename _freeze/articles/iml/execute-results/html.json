{
  "hash": "9a9994d0c82f16d5cb1db01cc6704674",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"iml\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2025-08-01\"\nformat:\n  html:\n    fig-width: 6\n    fig-height: 3\n---\n\n\n\n\n\n\n## パッケージの概要\n\nimlパッケージは、予測モデルを解釈するために開発された可視化手法を統一的な記法で実行するためのパッケージです。imlパッケージでは、予測モデルにPredictor\\$new関数を適用することで、Predictorオブジェクトが作成されます。このPredictorオブジェクトに対して、imlパッケージのさまざまな関数を適用することで、PDP、ICE、SHAPなどのプロットを簡単に作成することができます。\n\nここに挙げた機械学習の解釈手法については、パッケージの作者 Christoph Molnar 氏によるウェブ書籍 [*Interpretable Machine Learning*](https://christophm.github.io/interpretable-ml-book/)（[邦訳](https://hacarus.github.io/interpretable-ml-book-ja/agnostic.html)） をご参照ください。\n\nここでは、非常に簡単な例として、treesデータセットのVolumeを、GirthとHeightという二つの特徴量から予測するモデルを作成し、そのモデルに対して解釈手法を適用してみましょう。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# treesデータセットを読み込み、ランダムフォレストモデルを作成する。\ndata(trees)\nmodel_rf <- ranger::ranger(Volume~., trees)\nX <- dplyr::select(trees, -Volume)\n```\n:::\n\n\n\n\n## モデル解釈のためのPredictorオブジェクトを生成する\n\nPredictor\\$new()関数は、さまざまなパッケージのもとで作成された予測モデルを、imlパッケージの他のクラスや関数に対応するように加工するための関数です。加工後の予測モデルは、Predictorオブジェクトと呼ばれます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(iml)\npredictor <- (\n  (Predictor$new(model_rf, data = X, y = trees$Volume))\n  )\n```\n:::\n\n\n\n\n## 特徴量と予測値の関係を解釈する\n\nPredictorオブジェクトにFeatureEffect\\$new()関数を適用すると、ICEプロット、PDプロット、ALEプロットなどを作図することができます。\n\n-   ICE（Individual Conditional Expectation）プロットは、注目している特徴量の値だけが違っていた場合に予測値がどのように変化するかを、個々の予測ごとに可視化するものです。\n\n-   PD（Partial Dependence）プロットは、データ全体のICEプロットを平均したものにほかならず、注目している特徴量の値が変化したときに予測値が平均的にどのように変化するかを表していると解釈できます。\n\n-   ALE（Accumulated Local Effects）プロットは、PDと同様、注目している特徴量の変化に対応する予測値の変化を表します。PDでは、注目している特徴量の値 x によらずにデータ全体の分布を使って予測値の変化を平均しますが、ALEでは、特徴量の値が x であるときの効果を、データの中でその特徴量の値が x に近いものだけを抽出した部分データにおける予測値の変化を平均することによって計算します。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # データ処理に利用\nlibrary(ggplot2) # プロットの作成や調整に利用\n\n# iceプロットを作図する。\nice <- predictor %>%\n  FeatureEffect$new(feature = \"Girth\", method = \"ice\")\nice$plot() + labs(title = \"ICE plot\")\n```\n\n::: {.cell-output-display}\n![](iml_files/figure-html/iml--FeatureEffect$new-1.png){width=576}\n:::\n\n```{.r .cell-code}\n# pdプロットを作図する。\npdp <- predictor %>%\n  FeatureEffect$new(feature = \"Girth\", method = \"pdp+ice\")\npdp$plot() + labs(title = \"PDP plot\")\n```\n\n::: {.cell-output-display}\n![](iml_files/figure-html/iml--FeatureEffect$new-2.png){width=576}\n:::\n\n```{.r .cell-code}\n# aleプロットを作図する。\nale <- predictor %>%\n  FeatureEffect$new(feature = \"Girth\", method = \"ale\")\nale$plot() + labs(title = \"ALE plot\")\n```\n\n::: {.cell-output-display}\n![](iml_files/figure-html/iml--FeatureEffect$new-3.png){width=576}\n:::\n:::\n\n\n\n\n## 個別の予測における特徴量の寄与を解釈する\n\nPredictorオブジェクトにShapley\\$new()関数を適用すると、SHAP（SHapley Additive exPlanation）プロットを作図することができます。SHAP は、個別の予測値と平均的な予測値との差を、ゲーム理論的手法によって特徴量ごとの寄与に分解したものです。ここでは、5 番目のインスタンスに対する予測への特徴量ごとの寄与を表示してみます。HAPプロットを作図することができます。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshap <- predictor %>%\n  Shapley$new(x.interest = X[5, ])\nshap$plot() + theme_light() + theme(legend.position='null')\n```\n\n::: {.cell-output-display}\n![](iml_files/figure-html/iml--Shapley$new-1.png){width=576}\n:::\n:::\n\n\n\n\n## モデルにおける特徴量の重要度を解釈する\n\nPredictorオブジェクトにFeatureImp\\$new()関数を適用すると、PFI（Permutation Feature Importance）プロットを作図することができます。PFI は、「データの中で特定の特徴量だけをランダムに並び替えたときに、予測精度がどの程度低下するか」をその特徴量の重要度として解釈するものです。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npfi <- predictor %>% FeatureImp$new(loss=\"rmse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'renv' was built under R version 4.5.1\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(pfi) + theme_light()\n```\n\n::: {.cell-output-display}\n![](iml_files/figure-html/iml--FeatureImp$new-1.png){width=576}\n:::\n:::\n\n\n\n\n## サロゲートモデルを構築する\n\nPredictorオブジェクトにTreeSurrogate\\$new()関数を適用すると、決定木によるサロゲートモデルを構築することができます。サロゲートモデルとは、予測モデルを理解しやすいシンプルな関数で近似することによって得られる予測モデルのことで、ここでは、深さ2の決定木という非常に簡単な予測モデルに変換しています。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree <- predictor %>% TreeSurrogate$new(maxdepth = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: partykit\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'partykit' was built under R version 4.5.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: libcoin\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'libcoin' was built under R version 4.5.1\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: mvtnorm\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'mvtnorm' was built under R version 4.5.1\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(tree)\n```\n\n::: {.cell-output-display}\n![](iml_files/figure-html/surrogate-1.png){width=576}\n:::\n:::\n\n\n\n\nPredictorオブジェクトにLocalModel\\$new()関数を適用すると、特定の予測に関して LIME（Local Interpretable Model-agnostic Explanations）による局所的なサロゲートモデルを構築し、各特徴量の寄与を分解することができます。なお、LIMEは、注目するデータとその近傍データ（または近いデータを重視する加重データ）を用いて、正則化回帰などによって解釈しやすい予測モデルを構築する手法です。\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlime <- predictor %>% LocalModel$new(x.interest = X[5, ], k = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: glmnet\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoaded glmnet 4.1-8\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: gower\n```\n\n\n:::\n\n```{.r .cell-code}\nlime$results[, c(\"feature.value\", \"beta\", \"effect\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       feature.value      beta   effect\nGirth     Girth=10.7 4.0613365 43.45630\nHeight     Height=81 0.3714726 30.08928\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(lime)\n```\n\n::: {.cell-output-display}\n![](iml_files/figure-html/LIME-1.png){width=576}\n:::\n:::\n\n\n\n\n## 参考資料\n\niml パッケージには、ここで紹介した手法以外にもさまざまな手法が実装されています。以下のウェブ書籍は、機械学習の解釈手法を紹介するものとして非常に有名です。 Christoph Molnar, *Interpretable Machine Learning, A Guide for Making Black Box Models Explainable*. <https://christophm.github.io/interpretable-ml-book/>（[邦訳](https://hacarus.github.io/interpretable-ml-book-ja/index.html)）\n",
    "supporting": [
      "iml_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}