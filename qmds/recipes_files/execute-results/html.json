{
  "hash": "4b6a924f8bb7e0202e25146561f5cbea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"recipes\"\nauthor: \"データサイエンス関連基礎調査WG\"\ndate: \"2024-10-16\"\nformat:\n  html:\n    toc: true\n    toc-depth: 4\n    fig-width: 6\n    fig-height: 5\n    df-print: \"paged\"\nreferences:\n- id: BIB_RECIPES_SELECT_VARS\n  type: article\n  title: \"Selecting variables • recipes\"\n  URL: https://recipes.tidymodels.org/articles/Selecting_Variables.html\n  author:\n    - Max Kuhn\n    - Hadley Wickham\n    - Emil Hvitfeldt\n  issued:\n    - year: 2024\n  accessed:\n    - year: 2024\n      month: 7\n      day: 16\n- id: BIB_RECIPES_FUNCTION_REFERENCE\n  type: article\n  title: \"Function reference • recipes\"\n  URL: https://recipes.tidymodels.org/reference/index.html\n  author:\n    - Max Kuhn\n    - Hadley Wickham\n    - Emil Hvitfeldt\n  issued:\n    - year: 2024\n  accessed:\n    - year: 2024\n      month: 7\n      day: 16\n- id: BIB_TIDYMODELS_CREATE_STEP\n  type: article\n  title: \"Create your own recipe step function - tidymodels\"\n  URL: https://www.tidymodels.org/learn/develop/recipes/\n  accessed:\n    - year: 2024\n      month: 7\n      day: 16\n- id: BIB_TIDYMODELS_FIND_RECIPES\n  type: article\n  title: \"Search recipe steps – tidymodels\"\n  URL: https://www.tidymodels.org/find/recipes/\n  accessed:\n    - year: 2024\n      month: 7\n      day: 16\n- id: BIB_NYCFLIGHTS13\n  type: article\n  title: \"nycflights13: Flights that Departed NYC in 2013 / Flights data\"\n  URL: https://nycflights13.tidyverse.org/reference/flights.html\n  author:\n    - Hadley Wickham\n  issued:\n    - year: 2021\n  accessed:\n    - year: 2024\n      month: 7\n      day: 13\n- id: BIB_MATSUMURA_TIDYMODELS\n  type: book\n  publisher: 技術評論社\n  title: Rユーザのためのtidymodels[実践]入門〜モダンな統計・機械学習モデリングの世界\n  author:\n    - 松村優哉\n    - 瓜生真也\n    - 吉村広志\n  issued:\n    date-parts: #こういう書き方も可能な模様\n    - - 2023\n      - 1\n      - 6\nnocite: |\n  @*\n---\n\n\n\n::: {.cell}\n<style type=\"text/css\">\n.test { /*実行結果にスクロールバーをつけるためのもの*/\n  font-size: 8px;\n}\n\n</style>\n:::\n\n\n\n\n\n## パッケージの概要\n\nrecipesはtidymodelsに含まれるパッケージのうちのひとつで、データの前処理に関する機能を提供します。 データ型の変換（エンコーディング含む）や欠損値補完、正規化、高次項の追加、PCA等、\nデータクレンジングや特徴量エンジニアリングでよく用いられるデータ処理に対応しているのは勿論ですが、 前処理のtidyな記述（特に、前処理手順のオブジェクト化）が可能になるという点が最大の特徴です。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13) #今回使用するデータセット\nlibrary(recipes)\n#以下、tidyverse, tidymodelsから必要なパッケージを追加\nlibrary(tibble) #data.frame拡張版\nlibrary(rsample) #データ分割\nlibrary(parsnip) #モデル構築\nlibrary(yardstick) #精度評価\nlibrary(workflows) #学習過程のオブジェクト化\nlibrary(ggplot2) #可視化\n#その他のパッケージ\nlibrary(patchwork) #ggplotの図を複数並べる\nlibrary(embed) #factor型変数に関するrecipesパッケージの拡張\nlibrary(corrplot) #相関係数の可視化\n```\n:::\n\n\n\n\n\n\n## データセットの準備\n\n今回使用するデータセットnycflights13は2013年にニューヨークを出発した航空機に関するデータです。\n\n変数`arr_delay`は到着時の遅延時間（分）を表しており、 これを他の説明変数（出発日、離発着地点とその距離、航空会社コード等）から予測するモデルを構築することを考えます。\n\nデータセットの詳細は @BIB_NYCFLIGHTS13 を参照してください。\n\nなお、以下ではmagrittrパッケージによるパイプ演算子`%>%`[^1]と、 dplyrパッケージによるデータ操作関数を使用しています。\nまた、データの分割にはrsampleパッケージを使用しています。\n\n[^1]: 右辺の関数の第1引数に左辺を渡すという演算子で、たとえば`a %>% f %>% g(b)`という記述は`g(f(a),b)`と同等です。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_all_raw <- flights #flightsのほかにいくつかデータセットがあるが、それらは今回使用しない\n\n#文字列のfactor型への変換、目的変数がNAとなっているレコードの補完、予測に用いない説明変数の除去\ndf_all <- mutate(df_all_raw, across(where(is.character), as.factor)) %>%\n  mutate(arr_delay = if_else(is.na(arr_delay), mean(df_all_raw$arr_delay, na.rm = TRUE), arr_delay)) %>%\n  select(-time_hour, -tailnum, -arr_time)\n#time_hourはPOSIXct型で表した予定出発日時で、sched_dep_timeと意味合いは同じ。他のデータセットの結合に用いるもの。\n#tailnumは機体番号。カテゴリ数が多すぎて予測に利用するのが難しく、例として取り扱うには向かないため取り除く。\n#arr_timeは実際の到着時刻。予定到着時刻と合わせると目的変数(遅延時間)が判明してしまうため取り除く。\nsummary(df_all)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      year          month             day           dep_time    sched_dep_time\n Min.   :2013   Min.   : 1.000   Min.   : 1.00   Min.   :   1   Min.   : 106  \n 1st Qu.:2013   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.: 907   1st Qu.: 906  \n Median :2013   Median : 7.000   Median :16.00   Median :1401   Median :1359  \n Mean   :2013   Mean   : 6.549   Mean   :15.71   Mean   :1349   Mean   :1344  \n 3rd Qu.:2013   3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.:1744   3rd Qu.:1729  \n Max.   :2013   Max.   :12.000   Max.   :31.00   Max.   :2400   Max.   :2359  \n                                                 NA's   :8255                 \n   dep_delay       sched_arr_time   arr_delay           carrier     \n Min.   : -43.00   Min.   :   1   Min.   : -86.000   UA     :58665  \n 1st Qu.:  -5.00   1st Qu.:1124   1st Qu.: -16.000   B6     :54635  \n Median :  -2.00   Median :1556   Median :  -4.000   EV     :54173  \n Mean   :  12.64   Mean   :1536   Mean   :   6.895   DL     :48110  \n 3rd Qu.:  11.00   3rd Qu.:1945   3rd Qu.:  13.000   AA     :32729  \n Max.   :1301.00   Max.   :2359   Max.   :1272.000   MQ     :26397  \n NA's   :8255                                        (Other):62067  \n     flight     origin            dest           air_time        distance   \n Min.   :   1   EWR:120835   ORD    : 17283   Min.   : 20.0   Min.   :  17  \n 1st Qu.: 553   JFK:111279   ATL    : 17215   1st Qu.: 82.0   1st Qu.: 502  \n Median :1496   LGA:104662   LAX    : 16174   Median :129.0   Median : 872  \n Mean   :1972                BOS    : 15508   Mean   :150.7   Mean   :1040  \n 3rd Qu.:3465                MCO    : 14082   3rd Qu.:192.0   3rd Qu.:1389  \n Max.   :8500                CLT    : 14064   Max.   :695.0   Max.   :4983  \n                             (Other):242450   NA's   :9430                  \n      hour           minute     \n Min.   : 1.00   Min.   : 0.00  \n 1st Qu.: 9.00   1st Qu.: 8.00  \n Median :13.00   Median :29.00  \n Mean   :13.18   Mean   :26.23  \n 3rd Qu.:17.00   3rd Qu.:44.00  \n Max.   :23.00   Max.   :59.00  \n                                \n```\n\n\n:::\n\n```{.r .cell-code}\n#学習データと評価データの分割\n#モデルの精度向上よりも使用例の実行時間短縮を優先するため、以下では件数を減らしておく。\nset.seed(2024)\ndf_small <- testing(initial_split(df_all, prop = 0.98)) #336776件から2%分の6736件を取り出す\n\nset.seed(2024)\nsplit_df_small <- initial_split(df_small, prop = 0.9)\ndf_train <- training(split_df_small)\ndf_test <- testing(split_df_small)\n\nsplit_df_small\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Training/Testing/Total>\n<6062/674/6736>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## 基本的な使い方\n\n最初に、recipesパッケージを用いて前処理を行うコードを例示します。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- recipe(df_small, formula = arr_delay ~ .) %>%\n    step_impute_mean(all_numeric_predictors()) %>% #数値型のNAをその平均値で置換\n    step_dummy(all_factor()) #factor型変数をダミー変数化\n\nrecp <- rec %>% prep(training = df_train, fresh = TRUE)\n\ndf_train_baked <- recp %>% bake(new_data = NULL)\ndf_test_baked <- recp %>% bake(new_data = df_test)\n```\n:::\n\n\n\n\n\n\n大まかなステップは次のとおりです。\n\n1.  `recipe`関数で、`recipe`オブジェクトを作成する。\n2.  `step_*`関数で、そのデータに適用したい前処理の手続きを定義する。\n3.  `prep`関数+`bake`関数で、学習データにその前処理を適用する。\n4.  `bake`関数で、3.と同じ前処理を評価データに適用する。\n\n以下、上記の流れに沿ってそれぞれのコードの意味を解説します。\n\n### 手順1. `recipe`関数で、`recipe`オブジェクトを作成する。\n\nrecipesパッケージの最大の特徴は、**前処理手順をオブジェクト化できること**にあります。 最初に○という前処理を行う、次に△という前処理を行う...という手順書を変数に格納して、 実際に適用するときは「この手順書通りに前処理せよ」という関数だけを書くことで、わかりやすいコードが書けるというものです。\n\n本パッケージでは、この手順書のことをrecipeオブジェクトと呼びます。 その最初のステップとして、まずは空のrecipeオブジェクトを作るのがこの手順1です。\n\nその際に、引数にデータと`formula`を指定することで、データにどのような変数があり、\nどれが説明変数でどれが目的変数かを指定することが出来ます。\n\nなお、「どれが説明変数でどれが目的変数か」を表すものをroleといい、後から変更することも可能ですが、\n通常はこの例のようにrecipe作成時の`formula`指定で行います。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- recipe(df_small, formula = arr_delay ~ .)\n```\n:::\n\n\n\n\n\n\nこれで、`arr_delay`が目的変数、それ以外が説明変数という指定を行いました。\n\n### 手順2. `step_*`関数で、そのデータに適用したい前処理の手続きを定義する。\n\n続いて、この空のrecipeオブジェクトに手順を追加していきます。 手順を追加する関数は`step_*`という名前になっており、これを順々に適用していくことになります。\n\nパイプ演算子`%>%`を用いると、次のようにわかりやすく手順を示しながら追加していくことが出来ます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- rec %>%\n    step_impute_mean(all_numeric_predictors()) %>% #数値型のNAをその平均値で置換\n    step_dummy(all_factor()) #factor型変数をダミー変数化\n```\n:::\n\n\n\n\n\n\n### 手順3. `prep`関数+`bake`関数で、学習データにその前処理を適用する。\n\n次は定義した手順どおりに実際にデータを処理します。 `prep`関数で実際に前処理を行い、その結果を`bake`関数で取り出すことができます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecp <- rec %>% prep(training = df_train, fresh = TRUE)\n\ndf_train_baked <- recp %>% bake(new_data = NULL)\n```\n:::\n\n\n\n\n\n\n`prep`と`bake`という2つもの関数を介さないと前処理ができないのはここでは冗長に感じますが、 その理由は後で説明します。\n\n### 手順4. `bake`関数で、3.と同じ前処理を評価データに適用する。\n\n手順3で用いた`bake`関数で、`new_data`引数に適用したいデータを指定することで、 同じ前処理をそのデータに行うことができます。これでrecipesパッケージによる前処理は完了です。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_test_baked <- recp %>% bake(new_data = df_test)\n```\n:::\n\n\n\n\n\n\n出来上がりは次のとおり。確かにfactor型変数がダミー変数に変換されていることがわかります。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_train_baked %>% names() %>% head(40) #多いため省略\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"sched_arr_time\" \"flight\"        \n [9] \"air_time\"       \"distance\"       \"hour\"           \"minute\"        \n[13] \"arr_delay\"      \"carrier_AA\"     \"carrier_AS\"     \"carrier_B6\"    \n[17] \"carrier_DL\"     \"carrier_EV\"     \"carrier_F9\"     \"carrier_FL\"    \n[21] \"carrier_HA\"     \"carrier_MQ\"     \"carrier_OO\"     \"carrier_UA\"    \n[25] \"carrier_US\"     \"carrier_VX\"     \"carrier_WN\"     \"carrier_YV\"    \n[29] \"origin_JFK\"     \"origin_LGA\"     \"dest_ACK\"       \"dest_ALB\"      \n[33] \"dest_ANC\"       \"dest_ATL\"       \"dest_AUS\"       \"dest_AVL\"      \n[37] \"dest_BDL\"       \"dest_BGR\"       \"dest_BHM\"       \"dest_BNA\"      \n```\n\n\n:::\n\n```{.r .cell-code}\ndf_train_baked %>% select(carrier_AA,carrier_AS,carrier_B6,carrier_DL,carrier_EV) %>% head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"carrier_AA\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carrier_AS\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carrier_B6\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carrier_DL\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carrier_EV\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0\",\"2\":\"0\",\"3\":\"1\",\"4\":\"0\",\"5\":\"0\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"1\",\"4\":\"0\",\"5\":\"0\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"1\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"1\",\"5\":\"0\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\"},{\"1\":\"1\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n### `prep`関数の役割\n\n手順3. 以降のコードは一見冗長に見えるかもしれませんが、 一般的なモデリングにおける前処理の手順上はむしろこれが合理的といえます。\n\n今回、`step_impute_mean()`という関数を用いて、数値型のNAをその平均値で置換しました。 さて、その平均とはどの平均をとっているでしょうか？\n\n例として、`dep_time`がNAとなるレコードを1つ見てみます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrow_na_train <- min(which(is.na(df_train$dep_time)))\nrow_na_test <- min(which(is.na(df_test$dep_time)))\n\ndf_train[row_na_train, ]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"year\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"month\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"day\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"dep_time\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sched_dep_time\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"dep_delay\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sched_arr_time\"],\"name\":[7],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"arr_delay\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carrier\"],\"name\":[9],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"flight\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"origin\"],\"name\":[11],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"dest\"],\"name\":[12],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"air_time\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"distance\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hour\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"minute\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2013\",\"2\":\"1\",\"3\":\"27\",\"4\":\"NA\",\"5\":\"1855\",\"6\":\"NA\",\"7\":\"2100\",\"8\":\"6.895377\",\"9\":\"MQ\",\"10\":\"4649\",\"11\":\"LGA\",\"12\":\"MSP\",\"13\":\"NA\",\"14\":\"1020\",\"15\":\"18\",\"16\":\"55\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ndf_test[row_na_test, ]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"year\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"month\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"day\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"dep_time\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sched_dep_time\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"dep_delay\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"sched_arr_time\"],\"name\":[7],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"arr_delay\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carrier\"],\"name\":[9],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"flight\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"origin\"],\"name\":[11],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"dest\"],\"name\":[12],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"air_time\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"distance\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hour\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"minute\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2013\",\"2\":\"12\",\"3\":\"10\",\"4\":\"NA\",\"5\":\"1329\",\"6\":\"NA\",\"7\":\"1545\",\"8\":\"6.895377\",\"9\":\"EV\",\"10\":\"4395\",\"11\":\"EWR\",\"12\":\"IND\",\"13\":\"NA\",\"14\":\"645\",\"15\":\"13\",\"16\":\"29\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n分割前データ、学習データ、評価データそれぞれの平均値は次のとおり。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"平均値…分割前データ:\", mean(df_small$dep_time, na.rm = TRUE),\n\", 学習データ:\", mean(df_train$dep_time, na.rm = TRUE),\n\", 評価データ:\", mean(df_test$dep_time, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n平均値…分割前データ: 1349.004 , 学習データ: 1348.381 , 評価データ: 1354.624\n```\n\n\n:::\n:::\n\n\n\n\n\n\n一方、前述のNAとなっていた行の前処理結果は次のとおり。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"NA前処理後…学習データ:\", df_train_baked$dep_time[[row_na_train]],\n\", 評価データ:\",df_test_baked$dep_time[[row_na_test]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA前処理後…学習データ: 1348 , 評価データ: 1348\n```\n\n\n:::\n:::\n\n\n\n\n\n\nこのように、いずれも**学習データ**の平均値で補完されていることがわかりました。\n\nNAへの対処などの前処理もモデル構築手順のひとつであり、 \nその効果を正当に評価するためには、学習データに含まれる情報だけを使って対処するべきです。 \n評価データの情報も含めてしまった場合は「カンニング」してしまっていることになり、 \n評価データによる精度評価が歪められてしまいます。 \nこれを**リーケージ**（あるいはリーク）といい、前処理の際には注意を払うべき事項です。\n\n今回のデータでもそのような事情から、敢えて学習データの平均値で評価データを補完しました。\n\nこの「学習データの平均値」のような情報は、 続く評価データへの適用に備えてrecipeオブジェクトの中に記憶しておく必要があります。 そのための関数が`prep`で、この際に何を学習データに用いるかを明示的に指定することになります。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecp <- rec %>% prep(training = df_train, fresh = TRUE)\n```\n:::\n\n\n\n\n\n\nこの`prep`関数では、学習データに実際に前処理を適用しています。\n\nその前処理適用結果がrecipeオブジェクトに保存されるので、 ここでは適用前のオブジェクトを`rec`、適用後のオブジェクトを`recp`と名付けて区別してみました。\n\nこの結果は`bake`関数で`new_data = NULL`とすることで取り出すことが出来ます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_train_baked <- recp %>% bake(new_data = NULL)\n```\n:::\n\n\n\n\n\n\nそして、`bake`関数で引数`new_data`にデータを指定することで、 異なるデータに「学習データの平均値」のような情報を適用して前処理することができます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_test_baked <- recp %>% bake(new_data = df_test)\n```\n:::\n\n\n\n\n\n\n\nここで最初のコード（手順1.～3.の途中）に戻りますが、\n実はここまでの説明のために敢えて冗長にしていた部分があります。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- recipe(df_small, formula = arr_delay ~ .) %>%\n    step_impute_mean(all_numeric_predictors()) %>% #数値型のNAをその平均値で置換\n    step_dummy(all_factor()) #factor型変数をダミー変数化\n\nrecp <- rec %>% prep(training = df_train, fresh = TRUE)\n```\n:::\n\n\n\n\n\n\nより単純にできる点は次のとおりです。\n\n-   recipeオブジェクト作成時に`df_small`ではなく学習データ`df_train`を最初から指定。 `prep`関数は引数`training`を省略するとrecipeオブジェクト作成時のデータを参照する仕様のため、こうすることで`prep`関数の引数が省略できる。\n-   `prep`関数適用前のrecipeオブジェクトを使いまわす予定がないので、パイプ演算子でまとめて`prep`関数まで適用。\n\nこれらを反映すると次のようになります。\nここまでの事項を把握したうえであれば、このように記述してもよいでしょう。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecp <- recipe(df_train, formula = arr_delay ~ .) %>%\n    step_impute_mean(all_numeric_predictors()) %>% #数値型のNAをその平均値で置換\n    step_dummy(all_factor()) %>% #factor型変数をダミー変数化\n    prep()\n```\n:::\n\n\n\n\n\n\nあわせて次のような点にも注意しましょう。\n\n-   レコード全体を取り除くタイプの前処理には細心の注意を払う。\n    -   学習データと同じルールでレコードを取り除くべきかはケースバイケースです。\n    与えられた評価データすべてへの予測を行いたいなら、1件たりとも取り除くべきではありません。\n    -   `step_*`関数に備わる`skip`引数（`bake`時に手順をスキップするかどうかを指定）は\n    このような観点で設けられているもののため、使用の際は留意してください。\n-   文字列型からfactor型への変換など、評価データを含めた全体に対して一度だけ行えばよい前処理は、\nrecipeオブジェクトに含めずに前もって実施する。\n    -   ここでfactor型への変換に評価データを含める理由は、評価データにしかないカテゴリというのが存在しうるからです。\n    そのようなものも学習データだけを用いてうまく対処できるならばこの限りではありません。\n    -   本稿では「データセットの準備」の節でrecipesパッケージに頼ることなく（dplyrパッケージのみで）まとめて行っていますが、\n    ここまでの事項を把握しているのであればrecipesパッケージを使用しても問題はありません。\n\n## `step_*`関数の基本\n\n前処理の手順を記述するのに使用する`step_*`関数について、基本的な使い方を説明します。\n\n基本的な構文は次のとおりです。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- df_train %>% recipe(arr_delay ~ .) %>%\n  step_relu(dep_time, sched_dep_time, #前処理を行う変数の指定\n            role = \"predictor\", #新たに追加される変数のrole\n            trained = FALSE, #本パッケージの仕様上すべてのstep_*関数に存在する引数　通常使用する際は指定不要\n            #step_relu固有の引数↓\n            shift = 1200,\n            prefix = \"right_relu_\",\n            #step_relu固有の引数↑\n            skip = FALSE, #new_dataがNULLでないときにスキップするかどうか\n            id = \"relu_deptime1200\")#各stepを判別するためのid\n\n#前処理を適用して冒頭だけを表示\nrec %>% prep() %>% bake(new_data = NULL) %>% \n  select(dep_time, sched_dep_time, right_relu_dep_time, right_relu_sched_dep_time) %>% head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"dep_time\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sched_dep_time\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"right_relu_dep_time\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"right_relu_sched_dep_time\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2358\",\"2\":\"2359\",\"3\":\"1158\",\"4\":\"1159\"},{\"1\":\"937\",\"2\":\"945\",\"3\":\"0\",\"4\":\"0\"},{\"1\":\"926\",\"2\":\"929\",\"3\":\"0\",\"4\":\"0\"},{\"1\":\"1456\",\"2\":\"1459\",\"3\":\"256\",\"4\":\"259\"},{\"1\":\"1447\",\"2\":\"1455\",\"3\":\"247\",\"4\":\"255\"},{\"1\":\"1604\",\"2\":\"1605\",\"3\":\"404\",\"4\":\"405\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n全`step_*`関数で共通する引数について説明すると次のとおりです。\n\n| 引数                                    | 説明                                                                                                                                                                                                                                                                    |\n|--------------------|---------------------------------------------------|\n| 第1引数                                 | recipeオブジェクトです。通常はパイプ演算子`%>%`で記述されるため、コードには現れません。                                                                                                                                                                                 |\n| 第2引数以降（以下に記載がある引数以外） | 前処理を行う変数を指定します。 ここでは上の例のように変数名を単純に指定するだけでなく、 `all_numeric_predictors()`等のようなselectorを用いることで、変数の型やrole等に基づく条件指定も可能です。                                                                        |\n| `role`                                    | 追加される変数のroleを指定するものです。 デフォルトで`\"predictor\"`、すなわち説明変数の扱いとなっているため通常は指定する必要はありませんが、 `\"predictor\"`以外のroleを使用している場合、目的変数を加工する場合は注意が必要です。                                        |\n| `trained`                                 | 仕様上存在している引数というだけで、通常は指定する必要はありません。                                                                                                                                                                                                    |\n| （各stepの固有の引数）                  |                                                                                                                                                                                                                                                                         |\n| `skip`                                    | `bake`関数で`new_data`が`NULL`でないときにスキップするかどうかを指定します。 通常、デフォルト値は`FALSE`となっていますが、一部のレコードを削除するタイプのstepでは`TRUE`がデフォルトになっており、 評価データのレコードを誤って取り除くことが無いよう配慮されています。 |\n| `id`                                      | recipeオブジェクトに組み込まれた各々のstepを識別するための文字列を指定します。 デフォルトでランダムな文字列が付与されるため指定しなくとも問題はありませんが、 多数のstepを取り扱っていてそれらをうまく識別したいような場合には指定することも考えられます。              |\n\n### role\n\nここまで解説したとおり、roleとは基本的には説明変数か目的変数かを識別するためのものです。\n\n`summary`関数でrecipeオブジェクトの内容を確認すると、\n各変数にroleとして`\"predictor\"`か`\"outcome\"`のどちらかが割り当てられているということがわかります。\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec %>% summary()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"variable\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"role\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"source\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"year\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"month\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"day\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"dep_time\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"sched_dep_time\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"dep_delay\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"sched_arr_time\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"carrier\",\"2\":\"<chr [3]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"flight\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"origin\",\"2\":\"<chr [3]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"dest\",\"2\":\"<chr [3]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"air_time\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"distance\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"hour\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"minute\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"arr_delay\",\"2\":\"<chr [2]>\",\"3\":\"outcome\",\"4\":\"original\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n`update_role`関数などで任意の文字列を割り当てることも可能です。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec %>% update_role(year, new_role = \"test\") %>% summary() %>% head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"variable\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"role\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"source\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"year\",\"2\":\"<chr [2]>\",\"3\":\"test\",\"4\":\"original\"},{\"1\":\"month\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"day\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"dep_time\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"sched_dep_time\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"dep_delay\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\nレコードを特定するためだけに使われるID列のようなものを、目的変数でも説明変数でもないとして特別扱いする場合に使用されることがあります。\nしかしこれはやや発展的な使い方になるため、roleに割り当てられた文字列で説明変数かどうかを識別している、ということだけ把握しておけばよいでしょう。\n\n### 前処理を行う変数の選択方法（selector）\n\n`step_*`関数の適用時にはどの変数に前処理を行うかを指定する必要がありました。\n\n指定方法には大きく2通りがあり、単純に変数名を記述する方法と、selectorを使う方法があります。\nここでselectorとは、前処理を行う変数を条件指定で選択するものです。\n\n代表的な方法を挙げると次のとおりです。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_tmp <- df_train %>% recipe(arr_delay ~ .)\n#指定した変数を抜き出すstep\nrec_tmp %>% step_select(year, month, day) %>% \n  prep() %>% bake(new_data = NULL) %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"year\"  \"month\" \"day\"  \n```\n\n\n:::\n\n```{.r .cell-code}\n#マイナス指定でその変数以外を取り出すことが可能　目的変数も含まれてしまうことには注意\nrec_tmp %>% step_select(-year) %>% \n  prep() %>% bake(new_data = NULL) %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"month\"          \"day\"            \"dep_time\"       \"sched_dep_time\"\n [5] \"dep_delay\"      \"sched_arr_time\" \"carrier\"        \"flight\"        \n [9] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[13] \"hour\"           \"minute\"         \"arr_delay\"     \n```\n\n\n:::\n\n```{.r .cell-code}\n#tidyselectによる文字列検索での指定が可能\nrec_tmp %>% step_select(tidyselect::starts_with(\"dep_\"), -tidyselect::contains(\"delay\")) %>% \n  prep() %>% bake(new_data = NULL) %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"dep_time\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#正規表現での指定も可能\nrec_tmp %>% step_select(tidyselect::matches(\"(dep|arr)_(delay|time)\")) %>% \n  prep() %>% bake(new_data = NULL) %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"dep_time\"       \"sched_dep_time\" \"dep_delay\"      \"sched_arr_time\"\n[5] \"arr_delay\"     \n```\n\n\n:::\n\n```{.r .cell-code}\n#型による指定\nrec_tmp %>% step_select(all_numeric()) %>% \n  prep() %>% bake(new_data = NULL) %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"sched_arr_time\" \"flight\"        \n [9] \"air_time\"       \"distance\"       \"hour\"           \"minute\"        \n[13] \"arr_delay\"     \n```\n\n\n:::\n\n```{.r .cell-code}\n#roleによる指定\nrec_tmp %>% step_select(-all_outcomes()) %>% \n  prep() %>% bake(new_data = NULL) %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"sched_arr_time\" \"carrier\"       \n [9] \"flight\"         \"origin\"         \"dest\"           \"air_time\"      \n[13] \"distance\"       \"hour\"           \"minute\"        \n```\n\n\n:::\n\n```{.r .cell-code}\n#特定の型の目的変数(predictor)を指定\nrec_tmp %>% step_select(all_numeric_predictors()) %>% \n  prep() %>% bake(new_data = NULL) %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"sched_arr_time\" \"flight\"        \n [9] \"air_time\"       \"distance\"       \"hour\"           \"minute\"        \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n詳細は @BIB_RECIPES_SELECT_VARS を参照してください。\n\n## 前処理の紹介\n\n本パッケージで対応している前処理は @BIB_RECIPES_FUNCTION_REFERENCE に記載があります。\n\nその中から代表的なものを抽出して紹介します。\n\n### レコードの抽出・削除\n\n本パッケージの関数でレコードの抽出・削除を行うことも可能ですが、\n前述したように学習データと評価データで同じルールでレコードを抽出・削除してしまうと\n不都合が生じうることから、多くは`skip`引数がデフォルトで`TRUE`にセットされています。\n\n#### dplyrの関数による操作\n\n本パッケージでは、dplyrの関数を用いてレコードの抽出・削除を行うものが用意されています。\n\n| 関数名 | 説明 |\n|----|----|\n| `step_filter` | 条件指定によるレコード抽出 |\n| `step_slice` | 行番号指定によるレコード抽出 |\n| `step_sample` | ランダム抽出（割合指定または件数指定） |\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#条件指定による抽出…dplyr::filterと同等\nrec_tmp %>% step_filter(month >= 11, carrier == \"AA\") %>%\n  prep() %>% bake(new_data = NULL) %>% select(month, carrier, air_time) %>% head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"month\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"carrier\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"air_time\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"12\",\"2\":\"AA\",\"3\":\"338\"},{\"1\":\"12\",\"2\":\"AA\",\"3\":\"157\"},{\"1\":\"12\",\"2\":\"AA\",\"3\":\"132\"},{\"1\":\"11\",\"2\":\"AA\",\"3\":\"117\"},{\"1\":\"11\",\"2\":\"AA\",\"3\":\"153\"},{\"1\":\"11\",\"2\":\"AA\",\"3\":\"145\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#行番号指定による抽出…dplyr::sliceと同等\nrec_tmp %>% step_slice(1000:1003) %>%\n  prep() %>% bake(new_data = NULL) %>% select(month, carrier, air_time)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"month\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"carrier\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"air_time\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"4\",\"2\":\"B6\",\"3\":\"37\"},{\"1\":\"4\",\"2\":\"EV\",\"3\":\"117\"},{\"1\":\"10\",\"2\":\"VX\",\"3\":\"332\"},{\"1\":\"3\",\"2\":\"UA\",\"3\":\"151\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#ランダム抽出（件数指定）…dplyr::sample_nと同等\nset.seed(2024)\nrec_tmp %>% step_sample(size = 3) %>%\n  prep() %>% bake(new_data = NULL) %>% select(month, carrier, air_time)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"month\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"carrier\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"air_time\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"12\",\"2\":\"WN\",\"3\":\"122\"},{\"1\":\"10\",\"2\":\"AA\",\"3\":\"122\"},{\"1\":\"10\",\"2\":\"DL\",\"3\":\"138\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n#ランダム抽出（割合指定）…dplyr::sample_fracと同等\nset.seed(2024)\nrec_tmp %>% step_sample(size = 0.0008) %>% #sizeに1より小さな数値を入力する\n  prep() %>% bake(new_data = NULL) %>% select(month, carrier, air_time)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"month\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"carrier\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"air_time\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"12\",\"2\":\"WN\",\"3\":\"122\"},{\"1\":\"10\",\"2\":\"AA\",\"3\":\"122\"},{\"1\":\"10\",\"2\":\"DL\",\"3\":\"138\"},{\"1\":\"4\",\"2\":\"DL\",\"3\":\"108\"},{\"1\":\"11\",\"2\":\"UA\",\"3\":\"216\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n#### 欠損値の削除\n\n`step_naomit`関数により、欠損値が含まれるレコードを削除することができます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"元のNA値の個数: \", df_train %>% is.na %>% sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"元のNA値の個数:  569\"\n```\n\n\n:::\n\n```{.r .cell-code}\npaste(\"処理後のNA値の個数: \", \n  rec_tmp %>% step_naomit(all_predictors()) %>%\n    prep() %>% bake(new_data = NULL) %>% is.na %>% sum\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"処理後のNA値の個数:  0\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### factor型変数関係の操作\n\n#### factor変数化\n\n`step_num2factor`関数で、数値型変数をfactor型変数に変換できます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tmp <- rec_tmp %>%\n  step_num2factor(month,\n                  levels = as.character(1:12), #カテゴリ名を文字列のベクトルで与える\n                  ordered = TRUE) %>% #順序付きにする\n  prep() %>% bake(new_data = NULL) %>% select(month_ord = month)\n\nbind_cols(df_train[,\"month\"], df_tmp) %>% head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"month\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"month_ord\"],\"name\":[2],\"type\":[\"ord\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"8\",\"2\":\"8\"},{\"1\":\"6\",\"2\":\"6\"},{\"1\":\"4\",\"2\":\"4\"},{\"1\":\"6\",\"2\":\"6\"},{\"1\":\"7\",\"2\":\"7\"},{\"1\":\"7\",\"2\":\"7\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\nビニング（いくつかの区間に分ける）を行うならば`step_cut`関数を使用したほうが簡単でしょう。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tmp <- rec_tmp %>%\n  step_cut(month,\n           breaks = seq(3,9,3), #分割ポイント\n           include_outside_range  = FALSE) %>%\n          #FALSEの場合、学習データの範囲を外れるデータが評価データ等に現れた場合はNA扱いになる\n  prep() %>% bake(new_data = NULL) %>% select(month_ord = month)\n\nbind_cols(df_train[,\"month\"], df_tmp) %>% head(10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"month\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"month_ord\"],\"name\":[2],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"8\",\"2\":\"(6,9]\"},{\"1\":\"6\",\"2\":\"(3,6]\"},{\"1\":\"4\",\"2\":\"(3,6]\"},{\"1\":\"6\",\"2\":\"(3,6]\"},{\"1\":\"7\",\"2\":\"(6,9]\"},{\"1\":\"7\",\"2\":\"(6,9]\"},{\"1\":\"2\",\"2\":\"[1,3]\"},{\"1\":\"4\",\"2\":\"(3,6]\"},{\"1\":\"1\",\"2\":\"[1,3]\"},{\"1\":\"12\",\"2\":\"(9,12]\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n\n#### 第1カテゴリの変更（`step_relevel`）\n\n`step_relevel`関数で、factor型変数の第1カテゴリの変更ができます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#変更前\ndf_train$origin %>% levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"EWR\" \"JFK\" \"LGA\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#変更後\nrec_tmp %>% step_relevel(origin, ref_level = \"LGA\") %>%\n  prep() %>% bake(new_data = NULL) %>% select(origin) %>% unlist() %>% levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"LGA\" \"EWR\" \"JFK\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### 出現頻度の少ないカテゴリの統合（`step_other`）\n\n`step_other`関数で、出現頻度の少ないカテゴリを「その他」に統合することができます\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#変更前\ntable(df_train$carrier)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  9E   AA   AS   B6   DL   EV   F9   FL   HA   MQ   OO   UA   US   VX   WN   YV \n 325  602   17  971  807  998   15   68    6  491    0 1077  371  110  193   11 \n```\n\n\n:::\n\n```{.r .cell-code}\n#変更後\nrec_tmp %>% step_other(carrier,\n                       threshold = 0.05, #出現率がこれを下回るカテゴリを「その他」に含める\n                       other = \"other\") %>% #「その他」のカテゴリ名\n  prep() %>% bake(new_data = NULL) %>% select(carrier) %>% table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncarrier\n   9E    AA    B6    DL    EV    MQ    UA    US other \n  325   602   971   807   998   491  1077   371   420 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n#### ダミー変数化（`step_dummy`）\n\n`step_dummy`関数でダミー変数に変換できます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tmp <- rec_tmp %>% step_dummy(origin) %>%\n  prep() %>% bake(new_data = NULL) %>% select(tidyselect::starts_with(\"origin\"))\n\nbind_cols(df_train[,\"origin\"], df_tmp) %>% head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"origin\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"origin_JFK\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"origin_LGA\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"JFK\",\"2\":\"1\",\"3\":\"0\"},{\"1\":\"LGA\",\"2\":\"0\",\"3\":\"1\"},{\"1\":\"EWR\",\"2\":\"0\",\"3\":\"0\"},{\"1\":\"LGA\",\"2\":\"0\",\"3\":\"1\"},{\"1\":\"JFK\",\"2\":\"1\",\"3\":\"0\"},{\"1\":\"JFK\",\"2\":\"1\",\"3\":\"0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n`step_dummy`関数の引数として`one_hot = TRUE`を与えると、第1カテゴリに対応するダミー変数も作られます。\n（いわゆるワンホットエンコーディング）\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_tmp %>% step_dummy(origin, one_hot = TRUE) %>%\n  prep() %>% bake(new_data = NULL) %>% select(tidyselect::starts_with(\"origin\")) %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"origin_EWR\" \"origin_JFK\" \"origin_LGA\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### 欠損値の補完\n\n欠損値の補完には`step_impute_*`シリーズを使用します。\n\n#### 平均値で補完（`step_impute_mean`）\n\n例えば、平均値で補完する場合は`step_impute_mean`を使用します。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrow_na_train <- min(which(is.na(df_train$dep_time))) #NAとなっているレコード\npaste(\"補完前:\", df_train %>% slice(row_na_train) %>% select(dep_time), collapse='')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"補完前: NA\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntmp <- rec_tmp %>% step_impute_mean(all_numeric_predictors()) %>%\n  prep() %>% bake(new_data = NULL) %>% slice(row_na_train) %>% select(dep_time)\n\n#dep_timeがint型のため、平均値もint型に変換される\npaste(\"補完後:\", tmp,\n      \", 実際の平均値:\", df_train %>% summarize(mean(dep_time, na.rm = TRUE)), collapse='')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"補完後: 1348 , 実際の平均値: 1348.38129251701\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n#### 線形回帰で補完（`step_impute_linear`）\n\n予測モデルを用いて補完するものもあります。\n\n例えば`step_impute_linear`では線形回帰に基づいて補完されます。\n以下の例では`carrier`を説明変数として`dep_delay`を予測する線形回帰モデルを構築し、これに基づき`dep_delay`の欠損値を補完します。\nこの場合は`carrier`がfactor型変数であるため、単純に`carrier`ごとの`dep_delay`の平均値で補完するのと同じです。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#引数impute_withにimp_vars(変数名)を渡すことで、欠損値補完に用いるモデルの説明変数を指定\n#複数個指定やselectorによる指定も可能\ndf_tmp <- rec_tmp %>% step_impute_linear(dep_delay, impute_with = imp_vars(carrier)) %>%\n  prep() %>% bake(new_data = NULL)\n#横軸にcarrier、縦軸にdep_delay、小さな点はもともとあった値、大きな点は欠損値に対して補完された値\ndf_tmp2 <- bind_cols(carrier = df_train$carrier, dep_delay = df_tmp$dep_delay, isna = is.na(df_train$dep_delay))\nggplot() +\n  geom_point(data = df_tmp2 %>% filter(!isna), mapping = aes(x = carrier, y = dep_delay, color = isna),\n             position = position_jitter(width = 0.2, height = 0, seed = 2024), alpha = 0.25, size = 1) +\n  geom_point(data = df_tmp2 %>% filter(isna), mapping = aes(x = carrier, y = dep_delay, color = isna),\n             position = position_jitter(width = 0.2, height = 0, seed = 2024), alpha = 0.5, size = 2) +\n  coord_cartesian(ylim = c(-10, 200))\n```\n\n::: {.cell-output-display}\n![](recipes_files/figure-html/stepref_impute_linear-1.png){width=576}\n:::\n:::\n\n\n\n\n\n\n\n#### その他の関数\n\nそのほか、詳細な説明は割愛しますが、以下のような関数が用意されています。（これで全てではありません）\n\n| 関数名 | 欠損値の補完方法 |\n|--------|------------------|\n| `step_impute_median` | 中央値 |\n| `step_impute_mode` | 最頻値 |\n| `step_unknown` | カテゴリ`\"unknown\"` |\n| `step_impute_knn` | k近傍法 |\n| `step_impute_bag` | バギングされた決定木 |\n\n### 数値型データのスケール変換\n\n数値型データのスケール変換を行う関数を紹介します。\n\n\n#### 標準化\n\nまず標準化に関係するものとして、\n中心化（平均値が0となるように平行移動）を行う`step_center`関数、\n標準偏差が1となるようなスケール変換を行う`step_scale`関数、\nそしてその両方を行う`step_normalize`関数があります。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tmp_c <- rec_tmp %>% step_center(distance) %>% prep() %>% bake(new_data = NULL)\ndf_tmp_s <- rec_tmp %>% step_scale(distance) %>% prep() %>% bake(new_data = NULL)\ndf_tmp_n <- rec_tmp %>% step_normalize(distance) %>% prep() %>% bake(new_data = NULL)\ndf_tmp2 <- bind_cols(raw = df_train$distance, centered = df_tmp_c$distance, \n                     scaled = df_tmp_s$distance, normalized = df_tmp_n$distance)\ng <- ggplot() + geom_histogram(data = df_tmp2, mapping = aes(x = raw), bins = 25)\ngc <- ggplot() + geom_histogram(data = df_tmp2, mapping = aes(x = centered), bins = 25)\ngs <- ggplot() + geom_histogram(data = df_tmp2, mapping = aes(x = scaled), bins = 25)\ngn <- ggplot() + geom_histogram(data = df_tmp2, mapping = aes(x = normalized), bins = 25)\n(g + gc)/(gs + gn)\n```\n\n::: {.cell-output-display}\n![](recipes_files/figure-html/stepref_normalize-1.png){width=576}\n:::\n:::\n\n\n\n\n\n\n\n#### 正規化（`step_range`）\n\n数値データに対してはこのような標準化以外にも、特定の範囲に数値を収める正規化という処理も行われることがあります。\n\n`step_range`関数でこれを実現することができます。以下では0から1の範囲に収めるようにスケール変換を行っています。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tmp <- rec_tmp %>% step_range(hour, min = 0, max = 1) %>% prep() %>% bake(new_data = NULL)\ndf_tmp2 <- bind_cols(raw = df_train$hour, transformed = df_tmp$hour)\ng1 <- ggplot() + geom_histogram(data = df_tmp2, mapping = aes(x = raw), bins = max(df_train$hour)-min(df_train$hour)+1)\ng2 <- ggplot() + geom_histogram(data = df_tmp2, mapping = aes(x = transformed), bins = max(df_train$hour)-min(df_train$hour)+1)\ng1 + g2\n```\n\n::: {.cell-output-display}\n![](recipes_files/figure-html/stepref_range-1.png){width=576}\n:::\n:::\n\n\n\n\n\n\n#### 対数変換（`step_log`）\n\n標準化・正規化とは異なるものとして、分布の形状自体を変更するような変換も行われることがあります。\n\nその代表的なものとして対数変換がありますが、これを行うには`step_log`関数を使用します。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tmp <- rec_tmp %>% step_log(air_time) %>% prep() %>% bake(new_data = NULL)\ndf_tmp2 <- bind_cols(transformed = df_tmp$air_time, raw = df_train$air_time)\ng1 <- ggplot() + geom_point(data = df_tmp2 %>% filter(!is.na(raw)), mapping = aes(x = raw, y = transformed))\ng2 <- ggplot() + geom_histogram(data = df_tmp2 %>% filter(!is.na(raw)), mapping = aes(x = raw), bins = 25)\ng3 <- ggplot() + geom_histogram(data = df_tmp2 %>% filter(!is.na(transformed)), mapping = aes(x = transformed), bins = 25)\ng1 + (g2 / g3)\n```\n\n::: {.cell-output-display}\n![](recipes_files/figure-html/stepref_log-1.png){width=576}\n:::\n:::\n\n\n\n\n\n\n\n#### Box-Cox変換（`step_BoxCox`）\n\nBox-Cox変換は対数変換を一般化したもので、\n定数$\\lambda$を用いて以下のような式で記述されます。\n主に分布を正規分布に近づけるために用いられます。\n\n$$\nf(x) = \n\\begin{cases}\n\\frac{x^\\lambda-1}{\\lambda} & \\text{if  } \\lambda \\neq 0 \\\\\n\\ln{x} & \\text{if  } \\lambda = 0\n\\end{cases}\n$$\n\n`step_BoxCox`関数により、このBox-Cox変換を行うことができます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecp_tmp <- rec_tmp %>% step_impute_mean(air_time) %>% step_BoxCox(air_time) %>% prep()\ndf_tmp <- recp_tmp %>% bake(new_data = NULL)\ndf_tmp2 <- bind_cols(transformed = df_tmp$air_time, raw = df_train$air_time)\ng1 <- ggplot() + geom_point(data = df_tmp2 %>% filter(!is.na(raw)), mapping = aes(x = raw, y = transformed))\ng2 <- ggplot() + geom_histogram(data = df_tmp2 %>% filter(!is.na(raw)), mapping = aes(x = raw), bins = 25)\ng3 <- ggplot() + geom_histogram(data = df_tmp2 %>% filter(!is.na(transformed)), mapping = aes(x = transformed), bins = 25)\ng1 + (g2 / g3)\n```\n\n::: {.cell-output-display}\n![](recipes_files/figure-html/stepref_BoxCox-1.png){width=576}\n:::\n:::\n\n\n\n\n\n\n\n\nこの`step_BoxCox`関数の優れているところは、正規分布に近づくような定数$\\lambda$を自動的に設定してくれる点です。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"Box-Cox変換のλ:\", recp_tmp$steps[[2]]$lambdas)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBox-Cox変換のλ: 0.1335944\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### その他の関数\n\nそのほか、詳細な説明は割愛しますが、以下のような関数が用意されています。（これで全てではありません）\n\n| 関数名 | 変換方法 |\n|--------|------------------|\n| `step_percentile` | パーセンタイル点 |\n| `step_sqrt` | 平方根 |\n| `step_inverse` | 逆数（$\\frac1{x+c}$） |\n| `step_logit` | logit変換（$\\log (x) - \\log (1-x)$）|\n| `step_invlogit` | 逆logit変換（$\\frac1{1+\\exp(-x)}$） |\n| `step_relu` | ReLU関数（$\\max (0,x-c)$）等 |\n| `step_YeoJohnson` | Yeo-Johnson変換[^YJ] |\n\n[^YJ]:詳細は割愛しますが、こちらはBox-Cox変換と比べて負値を取ることが出来るという点が特徴です。\n\n\n### 日付・時刻型データの加工\n\n日付型や時刻型（`Date`型、`POSIXct`型）の変数に対して年や月などの情報を抜き出す場合は\n`step_date`関数や`step_time`関数を使用することが出来ます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_sliced <- df_all_raw %>% slice(seq(1, 100000, 10000))\ndf_tmp <- recipe(df_sliced, arr_delay ~ .) %>%\n  step_date(time_hour,\n            features = c(\"year\", \"decimal\", \"month\", \"week\", \"doy\", \"dow\")) %>%\n  #doy: day of year, dow: day of week\n  prep() %>% bake(new_data = NULL)\ndf_tmp %>% select(time_hour, time_hour_year, time_hour_decimal, time_hour_month) %>% head() %>% print(width = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  time_hour           time_hour_year time_hour_decimal time_hour_month\n  <dttm>                       <int>             <dbl> <fct>          \n1 2013-01-01 05:00:00           2013             2013. Jan            \n2 2013-01-12 10:00:00           2013             2013. Jan            \n3 2013-01-23 23:00:00           2013             2013. Jan            \n4 2013-10-04 06:00:00           2013             2014. Oct            \n5 2013-10-14 20:00:00           2013             2014. Oct            \n6 2013-10-25 14:00:00           2013             2014. Oct            \n```\n\n\n:::\n\n```{.r .cell-code}\ndf_tmp %>% select(time_hour, time_hour_week, time_hour_doy, time_hour_dow) %>% head() %>% print(width = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  time_hour           time_hour_week time_hour_doy time_hour_dow\n  <dttm>                       <int>         <int> <fct>        \n1 2013-01-01 05:00:00              1             1 Tue          \n2 2013-01-12 10:00:00              2            12 Sat          \n3 2013-01-23 23:00:00              4            23 Wed          \n4 2013-10-04 06:00:00             40           277 Fri          \n5 2013-10-14 20:00:00             41           287 Mon          \n6 2013-10-25 14:00:00             43           298 Fri          \n```\n\n\n:::\n\n```{.r .cell-code}\nrecipe(df_sliced, arr_delay ~ .) %>%\n  step_time(time_hour,\n            features = c(\"decimal_day\", \"hour\", \"hour12\")) %>%\n  prep() %>% bake(new_data = NULL) %>% select(tidyselect::starts_with(\"time_hour\")) %>% head() %>% print(width = Inf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  time_hour           time_hour_decimal_day time_hour_hour time_hour_hour12\n  <dttm>                              <dbl>          <int>            <int>\n1 2013-01-01 05:00:00                     5              5                5\n2 2013-01-12 10:00:00                    10             10               10\n3 2013-01-23 23:00:00                    23             23               11\n4 2013-10-04 06:00:00                     6              6                6\n5 2013-10-14 20:00:00                    20             20                8\n6 2013-10-25 14:00:00                    14             14                2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### 変数の抽出・削除\n\n#### `step_select`, `step_rm`による抽出・削除\n\n`step_select`で指定した変数を抽出できます。\n逆に、`step_rm`で指定した変数を削除できます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#数値型の説明変数をすべて選択\nrec_tmp %>% step_select(all_numeric_predictors()) %>%\n  prep() %>% bake(new_data = NULL) %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"sched_arr_time\" \"flight\"        \n [9] \"air_time\"       \"distance\"       \"hour\"           \"minute\"        \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#数値型の説明変数をすべて削除\nrec_tmp %>% step_rm(all_numeric_predictors()) %>%\n  prep() %>% bake(new_data = NULL) %>% names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"carrier\"   \"origin\"    \"dest\"      \"arr_delay\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### 相関の高い変数の削除\n\n`step_corr`関数により、相関の高い変数を削除することができます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#もとの変数名\ntmp_names1 <- df_train %>% names()\n#削除後の変数名\ntmp_names2 <- rec_tmp %>%\n  step_corr(all_numeric_predictors(), -year,\n            threshold = 0.9) %>% #相関係数0.9以上の組があれば変数を削除\n  prep() %>% bake(new_data = NULL) %>% names()\n\ncat(\"削除された変数：\", paste(setdiff(tmp_names1,tmp_names2), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n削除された変数： dep_time, sched_dep_time, air_time\n```\n\n\n:::\n:::\n\n\n\n\n\n\n実際に相関行列を確認してみると次のとおり。\n\n`dep_time`と`sched_dep_time`は`hour`と相関が高いため、\n`air_time`は`distance`と相関が高いため削除されました。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat_cor <- cor(rec_tmp %>% step_select(all_numeric_predictors(), -year) %>% prep() %>% bake(new_data = NULL), \n               method = 'pearson',\n               use = 'pairwise.complete.obs')\ncorrplot::corrplot(mat_cor)\n```\n\n::: {.cell-output-display}\n![](recipes_files/figure-html/stepref_corr_corrplot-1.png){width=576}\n:::\n:::\n\n\n\n\n\n\n#### 分散がゼロの変数の削除\n\n`step_zv`関数で、分散がゼロ（すべての観測値が同一）の変数を削除できます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#もとの変数名\ntmp_names1 <- df_train %>% names()\n#削除後の変数名\ntmp_names2 <- rec_tmp %>% step_zv(all_numeric_predictors()) %>%\n  prep() %>% bake(new_data = NULL) %>% names()\n\ncat(\"削除された変数：\", paste(setdiff(tmp_names1,tmp_names2), collapse=\", \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n削除された変数： year\n```\n\n\n:::\n:::\n\n\n\n\n\n  \n\n### 変数の追加\n\n変数を加工するものだけでなく、追加するものもあります。\n\n\n#### 交互作用項の追加（`step_interact`）\n\n例えば、`step_interact`関数を用いることで交互作用項（2つ以上の変数の積）を追加することが出来ます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#他のstep_*関数とは異なり、引数termsにformulaを与える必要がある\ndf_tmp <- rec_tmp %>% step_interact(terms = ~ air_time*dep_delay + air_time*origin) %>%\n  prep() %>% bake(new_data = NULL)\n\n#factor型変数はダミー変数化した状態で作成される\ndf_tmp %>% select(dep_delay, tidyselect::starts_with(\"air_time\")) %>% head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"dep_delay\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"air_time\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"air_time_x_dep_delay\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"air_time_x_originJFK\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"air_time_x_originLGA\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-1\",\"2\":\"195\",\"3\":\"-195\",\"4\":\"195\",\"5\":\"0\"},{\"1\":\"-8\",\"2\":\"118\",\"3\":\"-944\",\"4\":\"0\",\"5\":\"118\"},{\"1\":\"-3\",\"2\":\"120\",\"3\":\"-360\",\"4\":\"0\",\"5\":\"0\"},{\"1\":\"-3\",\"2\":\"108\",\"3\":\"-324\",\"4\":\"0\",\"5\":\"108\"},{\"1\":\"-8\",\"2\":\"68\",\"3\":\"-544\",\"4\":\"68\",\"5\":\"0\"},{\"1\":\"-1\",\"2\":\"49\",\"3\":\"-49\",\"4\":\"49\",\"5\":\"0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nnames(df_tmp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"                 \"month\"                \"day\"                 \n [4] \"dep_time\"             \"sched_dep_time\"       \"dep_delay\"           \n [7] \"sched_arr_time\"       \"carrier\"              \"flight\"              \n[10] \"origin\"               \"dest\"                 \"air_time\"            \n[13] \"distance\"             \"hour\"                 \"minute\"              \n[16] \"arr_delay\"            \"air_time_x_dep_delay\" \"air_time_x_originJFK\"\n[19] \"air_time_x_originLGA\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#formulaに与える変数名にtidyselectを使用することも可能\ndf_tmp <- rec_tmp %>% step_dummy(origin) %>% #事前にダミー変数化している場合\n  step_interact(terms = ~ tidyselect::starts_with(\"origin_\")*air_time,\n                sep = \":\") %>%　#変数名を○:○にする\n  prep() %>% bake(new_data = NULL)\nnames(df_tmp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"year\"                \"month\"               \"day\"                \n [4] \"dep_time\"            \"sched_dep_time\"      \"dep_delay\"          \n [7] \"sched_arr_time\"      \"carrier\"             \"flight\"             \n[10] \"dest\"                \"air_time\"            \"distance\"           \n[13] \"hour\"                \"minute\"              \"arr_delay\"          \n[16] \"origin_JFK\"          \"origin_LGA\"          \"origin_JFK:air_time\"\n[19] \"origin_LGA:air_time\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n#### 高次の項の追加（`step_poly`）\n\nまた、`step_poly`関数により、数値型変数に対して2乗や3乗の項を追加することができます。\n線形モデルで非線形な作用を捉える際に役立ちます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tmp <- rec_tmp  %>% step_impute_mean(dep_delay) %>%\n  step_poly(dep_delay, degree = 3, #3次の項まで追加\n            options = list(raw = TRUE)) %>%\n  prep() %>% bake(new_data = NULL)\n\ndf_tmp %>% select(tidyselect::starts_with(\"dep_delay\")) %>% head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"dep_delay_poly_1\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"dep_delay_poly_2\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"dep_delay_poly_3\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-1\",\"2\":\"1\",\"3\":\"-1\"},{\"1\":\"-8\",\"2\":\"64\",\"3\":\"-512\"},{\"1\":\"-3\",\"2\":\"9\",\"3\":\"-27\"},{\"1\":\"-3\",\"2\":\"9\",\"3\":\"-27\"},{\"1\":\"-8\",\"2\":\"64\",\"3\":\"-512\"},{\"1\":\"-1\",\"2\":\"1\",\"3\":\"-1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ng2 <- ggplot() + geom_point(data = df_tmp, mapping = aes(x = dep_delay_poly_1, y = dep_delay_poly_2))\ng3 <- ggplot() + geom_point(data = df_tmp, mapping = aes(x = dep_delay_poly_1, y = dep_delay_poly_3))\ng2 + g3\n```\n\n::: {.cell-output-display}\n![](recipes_files/figure-html/stepref_poly-1.png){width=576}\n:::\n:::\n\n\n\n\n\n\nなお、`options = list(raw = TRUE)`という指定が無い場合は代わりに直交多項式が用いられます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecp_tmp <- rec_tmp %>% step_impute_mean(dep_delay) %>% \n  step_poly(dep_delay, degree = 3) %>% prep()\ndf_tmp <- recp_tmp %>% bake(new_data = NULL)\ndf_tmp %>% select(tidyselect::starts_with(\"dep_delay\")) %>% head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"dep_delay_poly_1\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"dep_delay_poly_2\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"dep_delay_poly_3\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-0.004484240\",\"2\":\"0.002192071\",\"3\":\"-0.001675236\"},{\"1\":\"-0.006738298\",\"2\":\"0.004877948\",\"3\":\"-0.006453440\"},{\"1\":\"-0.005128257\",\"2\":\"0.002942724\",\"3\":\"-0.002984287\"},{\"1\":\"-0.005128257\",\"2\":\"0.002942724\",\"3\":\"-0.002984287\"},{\"1\":\"-0.006738298\",\"2\":\"0.004877948\",\"3\":\"-0.006453440\"},{\"1\":\"-0.004484240\",\"2\":\"0.002192071\",\"3\":\"-0.001675236\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ng2 <- ggplot() + geom_point(data = df_tmp, mapping = aes(x = dep_delay_poly_1, y = dep_delay_poly_2))\ng3 <- ggplot() + geom_point(data = df_tmp, mapping = aes(x = dep_delay_poly_1, y = dep_delay_poly_3))\ng2 + g3\n```\n\n::: {.cell-output-display}\n![](recipes_files/figure-html/stepref_poly_orth1-1.png){width=576}\n:::\n:::\n\n\n\n\n\n\nここで「直交」とは、新しい3変数について学習データにおける積の和（内積）がゼロになるということです。\n\nこの条件が満たされるように1次式、2次式、3次式の順で係数を決定していきます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#浮動小数点演算の誤差によりぴったりゼロにはならないが、ほぼゼロ\ncat(\"内積の値:\",\n    sum(df_tmp$dep_delay_poly_1 * df_tmp$dep_delay_poly_2),\n    sum(df_tmp$dep_delay_poly_1 * df_tmp$dep_delay_poly_3),\n    sum(df_tmp$dep_delay_poly_2 * df_tmp$dep_delay_poly_3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n内積の値: 7.617431e-17 3.648652e-16 -1.503762e-15\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n#### dplyrパッケージの`mutate`（`step_mutate`）\n\n最も強力なのはdplyrパッケージの`mutate`関数と同じことができる`step_mutate`関数で、\nこれを用いればたいていの変換は実装可能でしょう。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#変数の加工と追加を同時に行う\nrec_tmp  %>%\n  step_mutate(air_time = 0.01 * air_time, hm = hour*60 + minute) %>%\n  prep() %>% bake(new_data = NULL) %>%\n  select(air_time, hour, minute, hm) %>% head()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"air_time\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hour\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"minute\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hm\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1.95\",\"2\":\"23\",\"3\":\"59\",\"4\":\"1439\"},{\"1\":\"1.18\",\"2\":\"9\",\"3\":\"45\",\"4\":\"585\"},{\"1\":\"1.20\",\"2\":\"9\",\"3\":\"29\",\"4\":\"569\"},{\"1\":\"1.08\",\"2\":\"14\",\"3\":\"59\",\"4\":\"899\"},{\"1\":\"0.68\",\"2\":\"14\",\"3\":\"55\",\"4\":\"895\"},{\"1\":\"0.49\",\"2\":\"16\",\"3\":\"5\",\"4\":\"965\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\nただし、`group_by`関数と`summarize`関数による、グループ化しての集計に相当する操作はできません。\nこれは安直にこのような操作を実装してしまうと、リーケージの問題がつきまとうためだと考えられます。\n\n実際、（グループ化はしていませんが）ある変数の平均値を格納する変数を`step_mutate`関数を用いて追加してみたところ、\n学習データでは学習データでの、評価データでは評価データでの平均値が格納されました。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecp_tmp <- rec_tmp  %>% step_mutate(mean_arr_delay = mean(arr_delay)) %>% prep()\nbind_cols(\n  recp_tmp %>% bake(new_data = NULL) %>% select(mean_arr_delay_train = mean_arr_delay) %>% slice(1),\n  recp_tmp %>% bake(new_data = df_test) %>% select(mean_arr_delay_test = mean_arr_delay) %>% slice(1)\n)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mean_arr_delay_train\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mean_arr_delay_test\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"7.030774\",\"2\":\"6.660963\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n\nターゲットエンコーディング（学習データのカテゴリ別の目的変数平均値を特徴量として追加）を実装することを意図して、\nこの例を単純に別のfactor型変数でグループ化したようなものを実装してしまった場合、\n**評価データの平均値を使用するというリーケージ**が発生することになります。\n\n#### その他の関数\n\nそのほか、詳細な説明は割愛しますが、以下のような関数が用意されています。（これで全てではありません）\n\n| 関数名 | 変換方法 |\n|--------|------------------|\n| `step_harmonic` | 調和分析に基づき三角関数による分解を行う |\n| `step_spline_b` | B-スプライン基底関数による分解を行う |\n| `step_spline_natural` | 自然スプライン基底関数による分解を行う |\n\n### 主成分分析\n\n複数の特徴量を要約する手法として、主成分分析（Principal Component Analysis; PCA）と呼ばれるものがあります。\n\n主成分分析とは、ベクトル値の観測が複数与えられた時に、\nその分散が最大となる向きを選び、その方向の成分をPC1、\nそれと直交する中で分散が最大となる向きを選び、方向の成分をPC2、…\nとなるような変数変換（回転）を行うものです。この変換で得られるものを主成分といいます。\n\n`step_pca`関数を用いることで、この主成分分析で得られた主成分をデータに追加することができます。\n\n以下の例では相関の非常に強い`distance`, `air_time`の2変数に、\nあまり相関のなさそうな`hour`を加えた3変数による主成分分析を行い、\n主成分を`PC1`、`PC2`、`PC3`という変数名で追加します。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecp_tmp <- rec_tmp %>%\n  step_naomit(distance, air_time, hour) %>% #欠損値があるとエラーになるため取り除いておく\n  step_pca(distance, air_time, hour,\n           options = c(center = TRUE, scale. = TRUE), #主成分分析の際に正規化を行う\n           prefix = \"PC\",\n           keep_original_cols = TRUE) %>% #元の変数を残す\n  prep()\ndf_tmp <- recp_tmp %>% bake(new_data = NULL)\n\ng1 <- ggplot() + geom_point(data = df_tmp, mapping = aes(x = distance, y = air_time, colour = hour))\ng2 <- ggplot() + geom_point(data = df_tmp, mapping = aes(x = PC1, y = PC3, colour = PC2))\ng1/g2\n```\n\n::: {.cell-output-display}\n![](recipes_files/figure-html/stepref_pca-1.png){width=576}\n:::\n:::\n\n\n\n\n\n\nPC1としては「短いフライトである」ことを表すもの、PC2はほぼ`-hour`、\nPC3は（正規化した）距離と時間の長さの差分にあたるものが抽出されていることがわかります。\n\nこのことは、回転行列を抽出することでも確かめられます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- recp_tmp$steps[[2]]$res\ncenter <- res$center #中心化に用いたオフセット\nscale <- res$scale #分散を1にするための倍率\nrotation <- res$rotation #回転行列\n\ni <- 1\nrow <- (df_tmp[i,])\nrow_raw <- row %>% select(distance, air_time, hour) %>% unlist()\nrow_pca <- row %>% select(PC1, PC2, PC3)%>% unlist()\nnormalized <- (row_raw - center)/scale\n#正規化後ベクトル\nprint(normalized)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n distance  air_time      hour \n0.6951339 0.4325819 2.1172241 \n```\n\n\n:::\n\n```{.r .cell-code}\n#回転行列\"\nprint(rotation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  PC1          PC2          PC3\ndistance -0.707094303 -0.003771914 -0.707109199\nair_time -0.707088307 -0.005584539  0.707103202\nhour     -0.006616012  0.999977293  0.001281719\n```\n\n\n:::\n\n```{.r .cell-code}\n#両者の積\"\nprint(normalized  %*%  rotation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            PC1      PC2        PC3\n[1,] -0.8114064 2.112138 -0.1829419\n```\n\n\n:::\n\n```{.r .cell-code}\n#step_pca で生成された変数…上記と一致\nprint(row_pca)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       PC1        PC2        PC3 \n-0.8114064  2.1121383 -0.1829419 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n説明は割愛しますが、`step_ica`関数により独立成分分析（Independent Component Analysis; ICA）を行うこともできます。\n\n\n## オリジナルの`step_*`関数の作成\n\n`step_mutate`関数の存在によりたいていの前処理はこなせてしまいますが、\n少し複雑な前処理を行う場合には本パッケージに付属しているものだけでは不十分なこともあります。\n\n無理に本パッケージを使用する必要はないかもしれませんが、\n自前の`step_*`関数を作成することも可能なため、簡単に紹介します。\nこれにより、前処理手順のオブジェクト化等のメリットを享受することができます。\n\nたとえば、指定したfactor型変数に対してカウントエンコーディング[^cenc]を行う`step_*`関数を追加してみましょう。\n\n[^cenc]:カウントエンコーディングとは、あるカテゴリ変数に対してカテゴリごとの出現数を特徴量とするものです。\n\n最初に、`step_*`関数本体を実装します。\n\nその中身は前処理そのものではなく前処理の手順を追加するという処理に対応しており、\n`add_step`関数を記述することで実装します。\n\nなお、学習データにおける出現数を評価データ等他のデータのエンコードにも利用するという特性上、\n学習データにおける出現数をrecipeオブジェクト内に保存しておく必要があるので、\nそのためにこの関数独自の引数`dfs_table`を追加しています。\nこれ以外の引数は、全`step_*`関数で共通の引数です。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstep_encode_count <- function(recipe, ..., role = \"predictor\", trained = FALSE, \n                              dfs_table = NULL, skip = FALSE, id = rand_id(\"encode_count\")) {\n  add_step(\n    recipe, step_encode_count_new(\n      terms = enquos(...), trained = trained, role = role, \n      dfs_table = dfs_table, skip = skip, id = id\n    )\n  )\n}\n```\n:::\n\n\n\n\n\n\nあわせて、`step_*`関数によって追加される手順そのものを表すstepオブジェクトを作成する関数を実装します。\nこの関数は、上の`add_step`関数の中で呼び出されます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstep_encode_count_new <- function(terms, role, trained, dfs_table, skip, id) {\n  step(\n    subclass = \"encode_count\", terms = terms, role = role, trained = trained,\n    dfs_table = dfs_table, skip = skip, id = id\n  )\n}\n```\n:::\n\n\n\n\n\n\nここでは単にデータを格納するための箱を用意しているだけで、まだ前処理自体の実装は行いません。\n\n前処理はS3メソッド`prep`と`bake`によって呼び出されるので、`prep.(クラス名)`のような関数を用意することで実装します。\nここで、クラス名はstepオブジェクトを作成する`step`関数の引数`subclass`によって与えられるため、\nこれと一致させるように注意します。\n今回の例では`\"encode_count\"`が指定されていますが、実際のクラス名は`step_encode_count`になります。\n\n\n関数に`prep.(クラス名)`には、recipeオブジェクトの`prep`で呼び出される部分を実装します。\n\nここでは引数`training`で与えられる学習データにおいて、カテゴリごとの出現数を`table`関数で調べ、\nそれをデータフレームに格納して`dfs_table`に格納する部分を実装します。\nデータの加工そのものは、続く`bake.(クラス名)`に実装します。\n\nなお、冒頭の`recipes_eval_select`関数により、\n`step_*`関数が呼び出されたときに指定された変数名を取り出すことができます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprep.step_encode_count <- function(x, training, info = NULL, ...) {\n  col_names <- recipes_eval_select(x$terms, training, info)\n  dfs_table = list()\n  for(col_name in col_names){\n    tb <- table(training[[col_name]])\n    col_name_new <- paste0(col_name, \"_enc_count\")\n    dfs_table[[col_name]] <- tibble(!!col_name := names(tb), !!col_name_new := as.integer(tb))\n  }\n  step_encode_count_new(terms = x$terms, role = x$role, trained = TRUE, dfs_table = dfs_table, skip = x$skip, id = x$id)\n}\n```\n:::\n\n\n\n\n\n\n関数`bake.(クラス名)`に、実際にデータを加工する部分を実装します。\n`dfs_table`と`left_join`することで、出現数をデータフレームに格納することができます。\n\nなお、冒頭の`check_new_data`関数ではエンコーディングを行う変数が実在しているかを確かめています。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbake.step_encode_count <- function(object, new_data, ...) {\n  dfs_table <- object$dfs_table\n  col_names <- names(dfs_table)\n  check_new_data(col_names, object, new_data)\n  for (col_name in col_names) {\n    col_name_new <- paste0(col_name, \"_enc_count\")\n    new_col <- new_data %>% dplyr::left_join(dfs_table[[col_name]], by = col_name) %>% dplyr::select(!!col_name_new)\n    new_data <- bind_cols(new_data, new_col)\n  }\n  new_data\n}\n```\n:::\n\n\n\n\n\n\nさて、実際にこれを使用してみましょう。\n使用方法は多くの`step_*`関数と全く同じです。\n\n学習データ、評価データとも、新たに追加された変数`dest_enc_count`に学習データにおける出現数が格納されています。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecp <- rec_tmp %>% step_encode_count(dest) %>% prep()\ndf_tmp_train <- recp %>% bake(new_data = NULL)\ndf_tmp_test <- recp %>% bake(new_data = df_test)\n#学習データにおける\"MIA\"の件数\ntable(df_train$dest)[\"MIA\"]\n## MIA \n## 208\n\ndf_tmp_train %>% filter(dest == \"MIA\") %>% select(dest_enc_count) %>% head()\n## # A tibble: 6 × 1\n##   dest_enc_count\n##            <int>\n## 1            208\n## 2            208\n## 3            208\n## 4            208\n## 5            208\n## 6            208\ndf_tmp_test %>% filter(dest == \"MIA\") %>% select(dest_enc_count) %>% head()\n## # A tibble: 6 × 1\n##   dest_enc_count\n##            <int>\n## 1            208\n## 2            208\n## 3            208\n## 4            208\n## 5            208\n## 6            208\n```\n:::\n\n\n\n\n\n\n\n\n今回は`recipes_eval_select`関数の機能を用いて、第2引数に列名を指定できるように実装しました。\n多くの`step_*`関数と同じように、selectorを用いた柔軟な指定も行うことができます。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_tmp %>% step_encode_count(all_factor_predictors()) %>%\n  prep() %>% bake(new_data = NULL) %>% names()\n##  [1] \"year\"              \"month\"             \"day\"              \n##  [4] \"dep_time\"          \"sched_dep_time\"    \"dep_delay\"        \n##  [7] \"sched_arr_time\"    \"carrier\"           \"flight\"           \n## [10] \"origin\"            \"dest\"              \"air_time\"         \n## [13] \"distance\"          \"hour\"              \"minute\"           \n## [16] \"arr_delay\"         \"carrier_enc_count\" \"origin_enc_count\" \n## [19] \"dest_enc_count\"\n```\n:::\n\n\n\n\n\n\nなお、本稿における実装例はあくまで動作に必要な最低限の実装にとどめており、例えばエラー処理等が不十分です。\nパッケージにして配布すること等を検討する際には留意してください。\n\nまた、さらなる詳細はtidymodels公式ウェブサイトの解説 @BIB_TIDYMODELS_CREATE_STEP を参照してください。\n\n\n\n## 他のパッケージの利用\n\n`step_*`関数の追加を始めとして、本パッケージの機能を拡張するパッケージがいくつか存在します。\n\n2024年7月時点で本パッケージに依存しているパッケージをリストアップすると次のとおり。\n\n| パッケージ名 | 説明 |\n|----|--------|\n| embed | factor型変数のエンコーディング・次元削減に特化 |\n| scimo | オミックスデータ（生体分子についての網羅的なデータ）の分析を行う |\n| shinyrecipes | インタラクティブなUIでrecipeオブジェクトを扱う |\n| textrecipes | 文字列データの処理に特化 |\n| themis | 不均衡データの処理に特化 |\n\nたとえば、`step_mutate`ではターゲットエンコーディングのような処理はできないことを述べましたが、\nembedパッケージを用いることで次のように処理が可能です。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecp <- rec_tmp %>% \n  step_mutate(carrier_enc_target = carrier) %>% #エンコーディング後の変数を別の名前にするため\n  #carrierでarr_delayを予測するglmモデルを構築\n  #純粋な線形回帰の場合、単に学習データのカテゴリ別の平均を取るのと同じ\n  embed::step_lencode_glm(carrier_enc_target, outcome = dplyr::vars(arr_delay)) %>% prep()\n\ndf_tmp_train <- recp %>% bake(new_data = NULL)\ndf_tmp_test <- recp %>% bake(new_data = df_test)\n\n#学習データでエンコードされた値と、実際の目的変数の平均値\ndf_tmp_train %>% filter(carrier == \"9E\") %>% select(carrier_enc_target)%>% head()\ndf_tmp_train %>% filter(carrier == \"9E\") %>% select(arr_delay) %>% unlist() %>% mean()\n## # A tibble: 6 × 1\n##   carrier_enc_target\n##                <dbl>\n## 1               3.69\n## 2               3.69\n## 3               3.69\n## 4               3.69\n## 5               3.69\n## 6               3.69\n## [1] 3.686513\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#評価データでエンコードされた値と、実際の目的変数の平均値\n# → エンコードされた値は学習データにおける平均値になっている\ndf_tmp_test %>% filter(carrier == \"9E\") %>% select(carrier_enc_target) %>% head()\ndf_tmp_test %>% filter(carrier == \"9E\") %>% select(arr_delay) %>% unlist() %>% mean()\n## # A tibble: 6 × 1\n##   carrier_enc_target\n##                <dbl>\n## 1               3.69\n## 2               3.69\n## 3               3.69\n## 4               3.69\n## 5               3.69\n## 6               3.69\n## [1] 9.305318\n```\n:::\n\n\n\n\n\n\ntidymodels公式サイトの検索ページ @BIB_TIDYMODELS_FIND_RECIPES には\n他のパッケージによるものもリストアップされているため、ここから探してみるとよいでしょう。\n\n\n## 前処理のオブジェクト化のメリット\n\n前処理の手順書をrecipeオブジェクトにまとめることが出来るのが本パッケージの特徴でした。\nこれにより、例えば前処理の手順だけを差し替えて比較検討するコードを容易に記述できます。\n\n一例として、次のような前処理を採用するかをk分割交差検証法を用いて判断することを考えます。\n\n- 特徴量`year`, `month`, `day`（出発した日付）について、その日の曜日を特徴量`weekday`として追加\n- 特徴量`month`, `day`について、月と日をまとめた特徴量`monthday`の追加\n- factor型変数`dest`（目的地）, `carrier`（航空会社）について、カウントエンコーディングした特徴量を追加\n- factor型変数`dest`, `carrier`について、ターゲットエンコーディング（学習データにおける目的変数の平均値を格納）した特徴量を追加\n\nまず、これらについてrecipeオブジェクトにstepを追加するという関数をそれぞれ実装し、リスト`steps`に格納します。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsteps = list()\n#曜日\nget_weekday_numeric <- function(year, month, day) {\n  date <- as.Date(paste(year, month, day, sep = \"-\"))\n  return(lubridate::wday(date)-1)\n}#日曜日のとき0, 月曜日のとき1, ..., 土曜日のとき6を返す\nsteps$add_weekday <- function(recipe) recipe %>% step_mutate(weekday = get_weekday_numeric(year,month,day))\n\n#月と日をまとめた特徴量\nget_monthday <- function(month, day) {\n  as.numeric(difftime(as.Date(paste(2020, month, day, sep = \"-\")),\n                      as.Date(paste(2020, \"01-01\", sep = \"-\")), units = \"days\"))+1\n}\nsteps$add_monthday <- function(recipe) recipe %>% step_mutate(monthday = get_monthday(month,day))\n#ターゲットエンコーディング\nsteps$enc_target_dest <- function(recipe){\n  recipe %>%\n    step_mutate(dest_enc_target = dest) %>%\n    step_lencode_glm(dest_enc_target, outcome = dplyr::vars(arr_delay))\n}\nsteps$enc_target_carrier <- function(recipe){\n  recipe %>%\n    step_mutate(carrier_enc_target = carrier) %>%\n    step_lencode_glm(carrier_enc_target, outcome = dplyr::vars(arr_delay))\n}\n#カウントエンコーディング\nsteps$enc_count_dest <- function(recipe){\n  recipe %>% step_encode_count(dest)\n}\nsteps$enc_count_carrier <- function(recipe){\n  recipe %>% step_encode_count(carrier)\n}\n```\n:::\n\n\n\n\n\n\n次に予測モデルを準備します。今回の例ではXGBoostを使用してみます。\n\nなお、以下ではparsnipパッケージとworkflowsパッケージにより\nモデルの構築手順をもオブジェクト化して管理しています[^tidymodels_packages]。\n\n[^tidymodels_packages]:いずれもtidymodelsに含まれるパッケージであり、recipesパッケージとも親和性が非常に高いものの、\n    必ず用いなければならないものでもなく、コードを簡潔に書くために採用しているものです。\n    これらについても合わせて学習されることをお勧めしますが、本稿では詳しい解説は割愛します。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_init <- recipe(df_small, formula = arr_delay ~ .)\n#前処理のうち、XGBoostにデータを入力するために最低限必要なものを定義\napply_poststeps <- function(rec){\n  rec <- rec %>%\n    step_impute_mean(all_numeric_predictors()) %>% #数値型のNAをその平均値で置換\n    step_dummy(all_factor())\n  #XGBoostを使用する際はすべてのデータを数値型で保持する必要があるため、factor型はダミー変数に変換\n}\n\n#今回用いるモデル(XGBoost)の定義を用意\nmodel_engine_xgboost <- boost_tree(mode = \"regression\", engine = \"xgboost\") %>%\n  #ハイパーパラメータの指定\n  set_args(trees = 300, learn_rate = 0.15, tree_depth = 6, min_n = 1, sample_size = 1, mtry = 75)\n\n#前処理とモデルの定義を1オブジェクトにまとめたもの\nwf_xgboost <- workflow() %>%\n  add_recipe(rec_init %>% apply_poststeps()) %>%\n  add_model(model_engine_xgboost)\n```\n:::\n\n\n\n\n\n\n今回は貪欲にも、6つの前処理を適用するかどうかの組み合わせすべて（$2^6 = 64$通り）[^muscle]を試すことにします。\n\n[^muscle]: これはかなり力業での検証であり、本来はドメイン知識等を駆使して人の手で前処理を吟味することも必要です。あくまで一例として捉えてください。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncases <- unlist(lapply(0:length(steps), function(k) combn(steps, k, simplify = FALSE)), recursive = FALSE)\n```\n:::\n\n\n\n\n\n\n\n精度評価については、学習データ内における20分割交差検証法に基づき、RMSEの平均値を用いることとします。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#交差検証に使うデータ分割を行う\nset.seed(2024)\nsplitscv_df_train <- vfold_cv(df_train, v = 20)\n#前処理の組み合わせごとの結果を格納するデータフレーム\nresults_preps <- tibble(id = character(), score = numeric())\n\nfor (steps_toapply in cases){\n  #前処理の組み合わせを一意な文字列で識別できるようにする\n  id_case <- paste(names(steps_toapply), collapse = \",\") \n  \n  #前処理の組み合わせを実際にrecipeオブジェクトに合成\n  rec <- rec_init\n  for(s in steps_toapply)\n    rec <- rec %>% s\n  rec <- rec %>% apply_poststeps() #XGBoostのための共通の前処理\n  #前処理をworkflowオブジェクトにセット\n  wf <- wf_xgboost %>% update_recipe(rec)\n  #交差検証の分割ごとの結果を格納するデータフレーム\n  results_cv <- tibble(id = character(), rmse = numeric())\n  for(i in 1:nrow(splitscv_df_train)){\n    t1 <- proc.time()\n    #交差検証用のデータ分割\n    split <- splitscv_df_train$splits[[i]]\n    df_analysis <- analysis(split)\n    df_assessment <- assessment(split)\n    #分析データにおける学習\n    set.seed(2024)\n    wfres <- wf %>% fit(data = df_analysis) \n    #検証データにおける予測\n    df_test_xypredy <- wfres %>% \n      predict(new_data = df_assessment) %>%\n      bind_cols(df_assessment)\n    #RMSEを計算\n    res <- df_test_xypredy %>% \n      yardstick::rmse(truth = arr_delay, estimate = .pred)\n    #結果を格納\n    results_cv <- bind_rows(results_cv, tibble(id = splitscv_df_train$id[[i]], rmse = res$.estimate[[1]]))\n    \n    t2 <- proc.time()\n    tm <- (t2-t1)[3]\n    cat(splitscv_df_train$id[[i]], \"... rmse:\", res$.estimate[[1]], \", 経過時間:\", tm, \"\\n\")\n  }\n  #RMSEの平均値をスコアとして格納\n  cat(id_case, \"rmse平均値:\", mean(results_cv$rmse), \"\\n\")\n  results_preps <- bind_rows(results_preps, tibble(id = id_case, score = mean(results_cv$rmse)))\n}\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n何もしない場合のスコアは以下のとおり。\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_preps %>% filter(id == \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  id     score\n  <chr>  <dbl>\n1 \"\"    16.238\n```\n\n\n:::\n:::\n\n\n\n\n\n\n一方、RMSE平均が低い（精度評価が良い）前処理の組み合わせを抽出すると以下のようになりました。\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_preps %>% arrange(score) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  id                                                                       score\n  <chr>                                                                    <dbl>\n1 add_weekday,add_monthday,enc_target_carrier,enc_count_dest,enc_count_c… 16.006\n2 add_monthday,enc_target_dest,enc_count_dest,enc_count_carrier           16.026\n3 add_weekday,add_monthday,enc_count_dest,enc_count_carrier               16.033\n4 add_monthday,enc_target_carrier,enc_count_dest,enc_count_carrier        16.053\n5 add_weekday,add_monthday,enc_target_carrier,enc_count_dest              16.059\n6 add_weekday,add_monthday,enc_target_dest,enc_count_carrier              16.104\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n上位には前処理が多く組み合わせられたものがリストアップされており、\nこれらの前処理は精度改善に寄与しうるものと考えてよいでしょう。\n\n\nこのように前処理手順をオブジェクト化して管理することで、前処理部分の比較検討が容易になることがわかります。\n\nまた、交差検証の際は学習データの中でさらにモデル構築用のデータと、その精度を検証するためのデータを分割しています。\n正当に精度を評価するためには、前処理も含めてモデル構築用のデータで完結しておく（リーケージを防止する）ことが重要です。\nたとえば上記のように20分割交差検証を行う場合、全体に対して前もって前処理をしてから20分割するのではなく、\n20回分のモデル構築用データそれぞれに前処理を行う必要があります。\n\n本パッケージの機能を使用することで、このようなリーケージの問題を自然かつ明快に解決することができます。\n\n\n## 参考文献\n\n::: {#refs}\n:::\n\n",
    "supporting": [
      "recipes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}