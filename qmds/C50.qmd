---
title: "C50"
author: "データサイエンス関連基礎調査WG"
date: "`r Sys.Date()`"
output:   
  word_document:
    toc: yes
    toc_depth: '3'
    fig_width: 6
    fig_height: 3
---

```{r setup_qmd, include=FALSE}

# install packages
pkgs <- c("C50", "mlbench", "psych", "ggplot2", "tidyr", "dplyr", "knitr", "kableExtra")
for (pkg in pkgs) {
  if (!(pkg %in% installed.packages())) {
    install.packages(pkg)
  }
}

# detach packages
default <- c(".GlobalEnv", "tools:rstudio", "tools:vscode",
             "package:stats", "package:graphics",
             "package:grDevices", "package:utils",
             "package:datasets", "package:methods",
             "Autoloads", "package:base")
for (pkg in setdiff(search(), default)) {
  detach(pkg, character.only = TRUE)
  }

# clear objects
remove(list=objects())
```

## パッケージの概要
C50パッケージではC5.0アルゴリズムを用いた決定木モデルを使用できます。

## 使用例：PimaIndiansDiabetesデータの分類
PimaIndiansDiabetesデータを用いて、種々の項目からその患者が糖尿病患者であるかを判定する決定木モデルをC50パッケージを用いて構築します。

```{r}
library(mlbench)
data(PimaIndiansDiabetes)
df <- PimaIndiansDiabetes
tar.idx <- 9
```

データの中身の確認です。（head）
```{r}
head(df)
```

データの中身の確認です。（str）
```{r}
str(df)
```

各変数の意味は以下の通りです。

| 変数名            | データ型 | 概要                           |
|:------------------|:---------|:-------------------------------|
| pregnant      　　| num      | 妊娠回数                　　　 |
| glucose           | num      | 血漿グルコース濃度（負荷試験） |
| pressure    　　　| num      | 拡張期血圧     [mm Hg]   　 　 |
| triceps   　　　　| num      | 上腕三頭筋皮膚襞の厚さ  [mm]   |
| insulin  　　　　 | num      | 2時間血清インスリン  [mu U/ml] |
| mass              | num      | BMI　　　                      |
| pedigree          | num      | 糖尿病血統機能                 |
| age               | num      | 年齢                           |
| diabetes          | Factor   | クラス変数（糖尿病の検査）     |

summaryを表示します。
```{r}
summary(df)
```

psychパッケージのpairs.panelsを用いて、散布図の一覧を表示します。
```{r, warning=FALSE}
library(psych)
```

```{r}
df.x <- df[-tar.idx]
df.y <- df[tar.idx]
df.y <- ifelse(df.y == "pos", 1, 2)
pairs.panels(df.x, bg=c("skyblue", "salmon")[df.y], pch=21)
```

ggplot2パッケージを用いて、ヒストグラムを表示します。変数ごとにpos/negの分布の傾向を把握することができます。
```{r, warning=FALSE}
library(ggplot2)
library(tidyr)
library(dplyr)
```


```{r}
# 数値変数だけを抽出（diabetes以外）
num_vars <- names(df)[sapply(df, is.numeric)]

# 長い形式に変換
df_long <- df %>%
  pivot_longer(cols = all_of(num_vars), names_to = "variable", values_to = "value")

# ヒストグラムを1つの図にまとめて作成
ggplot(df_long, aes(x = value, fill = diabetes)) +
  geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
  facet_wrap(~variable, scales = "free") +
  labs(title = "Histograms of Variables by Diabetes",
       x = "Value", y = "Count") +
  theme_minimal()
```

## モデル構築
モデル生成のための訓練データと、モデル評価のためのテストデータに分割します。データ割合は訓練データを7割、テストデータを3割とします。
```{r}
# 再現性のためにシードを設定
set.seed(1234)

# データの分割
n <- nrow(df)
train.rate <- 0.7

# データの抽出
train.set <- sample(n, n * train.rate)
train.df <- df[train.set, ]

test.set <- setdiff(1:n, train.set)
test.df <- df[test.set, ]
```


モデルを生成します。
```{r}
library(C50)
```

```{r}
model <- C5.0(
  x = train.df[-tar.idx], 
  y = train.df[[tar.idx]]
)
```

summaryを用いると、モデルのサマリが表示されます。
```{r}
summary(model)
```


plotを用いると、決定木の様子が可視化されます。(図がつぶれてしまうことがありますので、参考程度です)
```{r}
plot(model)
```

構築したモデルを使用して予測を行います。
```{r}
res_pred <- predict(model, test.df[-tar.idx])
```

予測結果から得られる混同行列を確認します。  
(Summaryにて訓練データでの混同行列が確認できるので、以下テストデータでの混同行列の表示を省略します)
```{r}
res_act <- test.df[[tar.idx]]
conf_mat <- table(res_act, res_pred)
print(conf_mat)
```
各種評価指標を確認します。計算用の関数の定義です。
```{r}
create_df_res <- function(cmat){
  TN <- cmat[1,1]
  FP <- cmat[1,2]
  FN <- cmat[2,1]
  TP <- cmat[2,2]
  
  # 正解率：どれだけ正しく分類できたかの割合
  acc <- round((TP + TN) / (TP + TN + FN + FP), 3)
  
  # 適合率：陽性と判定されたものがどれだけ正しく陽性であるかの割合
  prec <- round(TP / (TP + FP), 3)
  
  # 再現率（真陽性率）：実際に陽性のものをどれだけ正しく陽性と判定できたかの割合
  rec <- round(TP / (TP + FN), 3)
  
  # F値：適合率と再現率の調和平均（両者はトレードオフの関係）
  Fval <- round(2 * rec * prec / (rec + prec), 3)
  
  # 真陰性率：実際に陰性のものをどれだけ正しく陰性と判定できたかの割合
  TNRat <- round(TN / (TN + FP), 3)
  
  df_rat <- data.frame(
    Item = c("正解率", "適合率", "再現率（真陽性率）", "F値", "真陰性率"), 
    Rate = c(acc, prec, rec, Fval, TNRat)
  )
  
  df_rat
}

```

data.frameの出力整形用です。
```{r, warning=FALSE}
library(knitr)
library(kableExtra)

show_df <- function(df, cap){
  kable(df, format = "pandoc", caption = cap) %>%
    kable_styling(full_width = FALSE, position = "left")
}
```
各種指標を確認します。
```{r, warning=FALSE}
df_res <- create_df_res (conf_mat)
show_df(df_res, "結果")
```

## C5.0のハイパーパラメーター
以下、C5.0モデルのパラメータをいくつか変更し、モデル性能の差を簡易的に見てゆきます。

### trials
trials:C5.0モデルはブースティングを実装しており、ブースティングの繰り返しの数を設定できます。
```{r}
model_trials <- C5.0(
  x = train.df[-tar.idx], 
  y = train.df[[tar.idx]],
  trials = 3
)

summary(model_trials)
```

結果を確認します。各種数値が向上していることが分かります。
```{r, warning=FALSE}
res_trials_pred <- predict(model_trials, test.df[-tar.idx])
conf_mat_trials <- table(res_act, res_trials_pred)
df_res_trials <- create_df_res(conf_mat_trials)
show_df(df_res_trials, "結果（trials）")
```

### winnow
winnow：デフォルトはFALSEです。TRUEにすると、重要でない特徴量を削減してくれます。  
```{r}
model_winnow <- C5.0(
  x = train.df[-tar.idx], 
  y = train.df[[tar.idx]],
　control = C5.0Control(winnow = TRUE)
)

summary(model_winnow)
```

結果の確認です。最初のモデルよりも正解率は高いですが、F値は下がりました。
```{r, warning=FALSE}
res_winnow_pred <- predict(model_winnow, test.df[-tar.idx])
conf_mat_winnow <- table(res_act, res_winnow_pred)
df_res_winnow <- create_df_res(conf_mat_winnow)
show_df(df_res_winnow, "結果（winnow）")
```

### CF
CF：信頼係数です。デフォルトは0.25です。小さくすると過学習を防いでくれます。
```{r}
model_CF <- C5.0(
  x = train.df[-tar.idx], 
  y = train.df[[tar.idx]],
  control = C5.0Control(CF = 0.1)
)

summary(model_CF)
```

結果の確認です。最初のモデルよりも性能が向上しています。
```{r, warning=FALSE}
res_CF_pred <- predict(model_CF, test.df[-tar.idx])
conf_mat_CF <- table(res_act, res_CF_pred)
df_res_CF <- create_df_res(conf_mat_CF)
show_df(df_res_CF, "結果（CF）")
```

### minCases
minCases：葉ノードに含まれる必要サンプル数です。デフォルトは2です。大きくすると過学習を防いでくれます。
```{r}
model_minCases <- C5.0(
  x = train.df[-tar.idx], 
  y = train.df[[tar.idx]],
  control = C5.0Control(minCases = 15)
)

summary(model_minCases)
```

結果の確認です。最初のモデルよりも性能が向上しています。
```{r, warning=FALSE}
res_minCases_pred <- predict(model_minCases, test.df[-tar.idx])
conf_mat_minCases <- table(res_act, res_minCases_pred)
df_res_minCases <- create_df_res(conf_mat_minCases)
show_df(df_res_minCases, "結果（minCases）")
```

各モデルの結果を一覧にします。
```{r, warning=FALSE}
df_res_all <- data.frame(
  Item = df_res[,1],
  default = df_res[, 2], 
  trials = df_res_trials[,2], 
  winnow = df_res_winnow[,2], 
  CF = df_res_CF[,2],
  minCases = df_res_minCases[,2])
show_df(df_res_all, "各モデルの結果一覧")
```

