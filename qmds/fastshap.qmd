---
title: "fastshap"
author: "データサイエンス関連基礎調査WG"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    toc-depth: 4
    fig-width: 6
    fig-height: 5
    df-print: "paged"
references:
- id: BIB_AER_HEALTHINSURANCE
  type: article
  title: "R: Medical Expenditure Panel Survey Data"
  URL: https://search.r-project.org/CRAN/refmans/AER/html/HealthInsurance.html
  author:
    - Achim Zeileis
  issued:
    - year: 2024
  accessed:
    - year: 2024
      month: 8
      day: 6
- id: BIB_FASTSHAP_VIGNETTE
  type: article
  title: "fastshap vignette"
  URL: https://cran.r-project.org/web/packages/fastshap/vignettes/fastshap.html
  author:
    - Brandon Greenwell
  issued:
    - year: 2024
  accessed:
    - year: 2024
      month: 8
      day: 6
- id: BIB_STRUMVELJ_2014
  type: article-journal
  title: "Explaining prediction models and individual predictions with feature contributions"
  author:
    - Štrumbelj, Erik
    - Kononenko, Igor
  issued:
    - year: 2014
  container-title: 'Knowledge and Information Systems'
  volume: '41'
  page: 647-655
  DOI: 10.1007/s10115-013-0679-x
- id: BIB_BOOK_AER
  type: book
  publisher: Springer
  title: Applied Econometrics with R
  author:
    - Christian Kleiber
    - Achim Zeileis
  issued:
    date-parts:
    - - 2008
      - 8
      - 28
- id: BIB_JOURNAL_IAJ_IML
  type: article-journal
  container-title: アクチュアリージャーナル
  publisher: 日本アクチュアリー会
  volume: '127'
  page: 78-117
  title: Interpretable Machine Learning
  author:
    - データサイエンス関連基礎調査WG　大江麗地
  issued:
    - year: 2024
      month: 6
- id: BIB_MEPS
  type: article
  title: "Medical Expenditure Panel Survey (MEPS) | Agency for Healthcare Research and Quality"
  URL: https://www.ahrq.gov/data/meps.html
  author:
    - Agency for Healthcare Research and Quality
nocite: |
  @*
---

```{r setup_qmd, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# install packages
pkgs <- c("AER","tibble","dplyr","rsample","recipes","ROCR",
          "xgboost","ranger","glmnet",
          "fastshap","treeshap","kernelshap","DALEX",
          "shapviz","ggplot2","patchwork",
          "foreach", "doParallel")
for (pkg in pkgs) {
  if (!(pkg %in% installed.packages())) {
    install.packages(pkg)
  }
}

# detach packages
default <- c(".GlobalEnv", "tools:rstudio", "tools:vscode",
             "package:stats", "package:graphics",
             "package:grDevices", "package:utils",
             "package:datasets", "package:methods",
             "Autoloads", "package:base")
for (pkg in setdiff(search(), default)) {
  detach(pkg, character.only = TRUE)
  }

# clear objects
remove(list=objects())

```

## パッケージの概要

fastshapは、予測モデルの解釈手法の一種であるSHAPを、モンテカルロシミュレーションにより計算するパッケージです。
他のパッケージと比較すると、非常に軽量かつ動作原理がシンプルであるのが特徴です。

### SHAPとは

SHAPという手法については @BIB_JOURNAL_IAJ_IML に解説があるため、こちらを参照することをお勧めします。
以下では詳細な説明は避け、概要のみを記載します。

**SHAP(SHapley Additive exPlanation)**とは予測モデルの解釈に用いられる手法の一種で、
ある予測モデルの入力（説明変数）と出力（予測値）の組に対して、
**どの説明変数の寄与によってその予測値となったのかを加法的に分解**するものです。

$$ 個別の予測値 = その予測の説明変数1の寄与 + \cdots + その予測の説明変数Nの寄与 + 予測値平均$$

このようにして分解された各サンプル・説明変数の寄与を**SHAP値**と呼びます。

個別サンプルの予測に対する解釈を与える、いわゆるローカルな手法だと考えられますが、
多くのサンプルのSHAPを計算してそれをグラフにする、平均値で要約する等により、
モデル全体の解釈を与える、いわゆるグローバルな手法としても使用することが出来ます。

### fastshapの特徴

説明変数ごとの寄与は、「その説明変数が**入力されていない場合とされた場合の予測値の差**」の（加重）平均で計算されます。
しかし、実際には「ある説明変数だけ予測モデルに入力しない」ということは通常出来ないため、
条件付期待値や、その説明変数を実データからランダムに選び出したときの予測値の平均のようなものを当てはめることとなります。
そのうえで、例えばN個の説明変数がある場合は、入力されているかどうかの組み合わせは$2^N$通りあることになるので、
**たった1サンプルに対して、予測値の平均値のようなものを$2^N$通り分計算**する必要があります。

1サンプルならまだしも、グローバルな手法として使用するために多数のサンプルで計算する場合は計算量が莫大なものとなります。
そこで高速に計算する手法がいくつか提案されており、
そのうち fastshap は @BIB_STRUMVELJ_2014 によって提案されるモンテカルロシミュレーションによる近似を実装したものです。

原理は非常にシンプルで、例えばあるサンプルのk番目の説明変数の寄与を計算する場合、

- 「入力」する説明変数の数をランダムに決める（個数に関して一様な分布）
- その数だけ、「入力」する説明変数をk番目以外からランダムに選び出す
- k番目以外の説明変数について、「入力」する説明変数はそのサンプルそのまま、「入力」しない説明変数は全サンプルからランダムに選ぶ
- k番目の説明変数について「入力」した場合と「入力」しない（全サンプルからランダムに選んだ）場合の2回の予測を計算し、その差分を取る
- この操作を複数回行い、差分の平均値をk番目の説明変数の寄与とする

という流れになります。

全サンプルのSHAPを計算したとしても予測を行う回数が 説明変数の数×2×試行回数×用意したサンプルの数 となり、
現実的な計算時間でグローバルな手法としてのSHAPを用いることが可能です。
ただし、特徴量の数・サンプル数によっては計算値を収束させるほど試行回数を増やすのは現実的ではないこともあるため、
**あくまで近似値を計算するものと捉えるべき**でしょう。

なお、乱数の適用にC++を使用する、並列処理に対応させるという工夫により高速化を図っているのも本パッケージの特徴です。

## 準備

### パッケージの読み込み

```{r setup_package, message=FALSE, warning=FALSE}
library(AER) #データセット

library(tibble) #data.frame拡張版
library(dplyr) #data.frameの操作
library(rsample) #データ分割
library(recipes) #前処理

library(xgboost) #今回使用するモデルのパッケージ
library(ranger)
library(glmnet)

library(ROCR) #精度評価

library(fastshap) #SHAPを計算できるパッケージ群
library(treeshap)
library(kernelshap)
library(DALEX)

library(foreach) #並列計算による高速化
library(doParallel)

library(ggplot2) #グラフの描画
library(patchwork) #複数のgpplotを組み合わせる
library(shapviz) #SHAPの可視化
```


### データセットの読み込み

@BIB_BOOK_AER で使用されたデータセット等をまとめたパッケージAERに含まれる、
HealthInsuranceというデータセットを使用します。

性別・年齢・学歴・家族構成・雇用状態（自営業か否か）健康保険の加入状況等に関する
約9,000個のサンプルが含まれています。
今回は、健康保険に加入しているかどうかを予測するモデルを作成することとします。

データセットの詳細については @BIB_AER_HEALTHINSURANCE を参照してください[^dataset]。

[^dataset]: 元の研究は、自営業者の健康保険加入率の低さと健康状態の関係性を調べたものです。この研究で用いられた、1996年の米国医療費パネル調査(MEPS[@BIB_MEPS])から抽出されたものがこのデータセットです。

```{r dataset}
data("HealthInsurance")
df_all <- HealthInsurance

summary(df_all)
```

### 前処理

今回例として使用するモデルでは、説明変数が数値型である必要があるので、factor型変数を数値型に変換しておきます[^prep]。

[^prep]:なお、ここではデータ前処理にrecipesパッケージを使用しています。
        また、`%>%`はmagrittrパッケージによるパイプ演算子で、右辺の関数の第1引数に左辺を渡すという働きがあります。
        たとえば`a %>% f %>% g(b)`という記述は`g(f(a),b)`と同等です。


```{r prep_recipes}
rec_init <- df_all %>% recipe(insurance ~ .) %>% #前処理手順の定義
  #ethinicityは最も多いカテゴリがcaucなので、これを基準カテゴリに変更
  step_relevel(ethnicity, ref_level = "cauc") %>% 
  #educationは学歴を表す説明変数で、大きいほど高学歴であるため、そのままダミー変数にするのではなく、数値に変換
  step_mutate(education_main = as.numeric(education) - 1) %>%
  #ただし、最後のカテゴリだけは「その他」を表しているので、これだけは別のダミー変数に分離する
  step_mutate(education_other = if_else(education_main == 6, 1, 0)) %>%
  step_mutate(education_main = if_else(education_main < 6, education_main, 0)) %>%
  step_rm(education) %>%
  step_dummy(all_factor_predictors()) %>% #他のfactor型変数は単純にダミー変数化
  step_relevel(insurance, ref_level = "yes")
  #目的変数は健康保険に加入しているかを表すinsurance

df_baked <- rec_init %>% prep() %>% bake(new_data = NULL) #上記で定義した前処理手順を実際に実行
```

上記前処理を施したうえで、学習データとテストデータに分割します。

```{r prep_initial_split}
set.seed(2024)
split_df <- rsample::initial_split(df_baked, prop = 0.8) #80%を学習データ、20%をテストデータとする
df_train <- rsample::training(split_df)
df_test <- rsample::testing(split_df)

df_train_x <- df_train %>% dplyr::select(-insurance)
df_train_y <- df_train$insurance
df_test_x <- df_test %>% dplyr::select(-insurance)
df_test_y <- df_test$insurance
```

### モデル構築

続いてXGBoostによる予測モデルを学習データをもとに構築します。[^omittune]

2値分類の問題ですが、予測モデルの出力としては加入しているか否かの2通りではなく、
加入している確率を出力するようにしています。

[^omittune]:ハイパーパラメータは事前にチューニングしたものを入力しています。
            チューニングの過程については本稿の主題を外れるので、割愛します。


```{r xgb_fit}
set.seed(2024)
model_xgboost <- xgboost(data = as.matrix(df_train_x), label = as.matrix(2 - as.numeric(df_train_y)), nrounds = 100,
                  params = list(eta = 0.3, max_depth = 2, gamma = 0, min_child_weight = 1, 
                             subsample = 1, colsample_bytree = 1, colsample_bynode = 2/14, objective = "binary:logistic"),
                  verbose = 0)
```


構築した予測モデルの精度をテストデータを用いて確認しておきます。

まずはAUC(ROC)を確認します。これは2値分類モデルで使用される評価指標で、高いほど精度が良いという評価になります。

```{r xgb_test}
calc_logloss <- function(act, pred){mean(-act *log(pred)-(1-act)*log(1-pred))}
calc_score <- function(object, predfun, df_test_x, df_test_y){
  yhat <- object %>% predfun(df_test_x)
  pr <- ROCR::prediction(yhat, df_test_y)
  auc <- pr %>% ROCR::performance("auc")
  auc_plot <- pr %>% ROCR::performance("tpr", "fpr")
  list(
    auc_plot = auc_plot,
    auc = auc@y.values %>% as.numeric(),
    logloss = calc_logloss(act = 2 - as.numeric(df_test_y), pred = yhat)
    )
}

predfun_xgboost <- function(object, newdata){
  dt <- as.matrix(newdata)
  object %>% predict(newdata = dt)
}
score <- calc_score(model_xgboost, predfun_xgboost, df_test_x, df_test_y)
score$auc_plot %>% plot()
score$auc
```

0.75は高くもなく低くもないといった程度ではあるものの、用途によってはこれでも十分でしょう。
（例えば True Positive Rate = 0.6, False Positive Rate = 0.2 あたりとなるしきい値をとれば、
　全体の8割程度を占める加入者のうち6割を削減しつつ、少数派の非加入者のうち8割を残した集団が作れる）
　
　
後で他のモデルと比較する際の参考のため、LogLossスコアも計算しておきます。
こちらは出力される確率値の正確性を評価するもので、低いほうが精度が良いという評価になります。

```{r xgb_test_logloss}
#後で別のモデルと比較するため、スコアをデータフレームに格納
df_scores <- tibble(model = "xgboost", auc = score$auc, logloss = score$logloss)
score$logloss
```

## fastshapの使用方法

### 基本的な使用方法

まず、実際にSHAPを計算したいサンプルと、SHAP計算時に「入力しない説明変数」のためにランダムで選ぶ元になるサンプルを選びます。
この両者は同じでもよいですが、前者は数百件程度が一応の目安です。
後者は計算パフォーマンス次第ですが、前者を多めに取りたい場合は前者よりも少なめにします。

```{r basic_sample}
set.seed(2024) #SHAPを計算したいサンプル
nrow_shap <- 100
df_shap <- df_train[sample(nrow(df_train), nrow_shap), ]
df_shap_x <- df_shap %>% dplyr::select(-insurance)

set.seed(2024+1) #ランダムで選ぶ元になるサンプル
nrow_shapbg <- 30
df_shapbg <- df_train[sample(nrow(df_train), nrow_shapbg), ]
df_shapbg_x <- df_shapbg %>% dplyr::select(-insurance)
```

次に、explain関数で実際にSHAPを計算します。

ここで、0から1の確率値を加法的に分解するよりも、
ロジット変換により実数全体の数値に変換してから分解したほうが説明変数ごとの寄与を比較する際には有用と考えられます。

predict関数で出力される確率値をロジット変換したものを出力する関数を作成し、
引数`pred_wrapper`にこの関数を指定することでこれを実現することが出来ます。


```{r basic_explain, results='hide'}
logit <- function(x) log(x) - log(1-x) 
predfun_xgboost_logit <- function(object, newdata){ #predict関数の結果をロジット変換する関数
  predfun_xgboost(object, newdata) %>% logit()
}

t1 <- proc.time()
set.seed(2024)
shap_fs <- fastshap::explain(model_xgboost, #予測モデルのオブジェクト
                             X = df_shapbg_x, #ランダムで選ぶもとになるサンプル
                             # SHAPを計算したいサンプル　こちらは厳密にdata.frame型でないとエラー(バグ?)
                             newdata = as.data.frame(df_shap_x),
                             pred_wrapper = predfun_xgboost_logit, #予測値を生成する関数
                             nsim = 10, #試行回数
                             parallel = FALSE) #並列処理の設定
t2 <- proc.time()
t0 <- (t2-t1)[3]
names(t0) <- NULL

cat("処理時間:", t0, "秒")
```

```{r basic_explain_s, echo=FALSE}
t0 <- 2.07 #手元の端末の処理時間を表示させる
cat("処理時間:", t0, "秒")
```

最後にこれを可視化します。これにはshapvizパッケージを用いるとよいでしょう。
まず、個別のサンプルに対する寄与の分解を表示するには次のようにします。

```{r basic_shapviz}
sv <- shapviz::shapviz(shap_fs, X = df_shap_x) #shapvizパッケージで可視化できるオブジェクトに変換
shapviz::sv_waterfall(sv, row_id = 1) #1つ目のサンプルの予測結果に対してプロット
```

このサンプルでは、自営業であること（`selfemp_yes=1`）や独身である（`married_yes=0`）ことによって、
平均的な被験者よりも健康保険に加入しない傾向にあると判断されたようです。

また、グローバルな手法として全サンプルの結果を一覧に表示し、
説明変数ごとに全般的にどの程度寄与しているかをプロットするには次のようにします。

```{r basic_shapviz_sfi}
shapviz::sv_importance(sv, kind = "beeswarm")
```

横軸は寄与の大きさを、色付けは説明変数の値を示しており、
例えば明るい色の点が右側にある場合は、その説明変数が高いほど予測確率が高くなることを示します。

`shapviz::sv_importance`関数はデフォルトでは寄与が大きい説明変数から順に並べられるので、
最も予測確率への寄与が大きい説明変数は学歴（`education_main`）であることがわかります。
また、学歴が高いほど健康保険に加入する傾向があることがわかります。


### 並列計算

fastshapにはforeachパッケージによる並列計算が実装されています。

事前にdoParallelパッケージの関数を使用して適切に並列計算の設定を行ったのちに、
引数`parallel`を`TRUE`にしたうえで、`foreach`関数に渡したい引数を追加することで並列計算が可能になります。

foreachパッケージによる並列計算の際は複数の独立したR環境が生成されますが、
その環境に引き渡すべきパッケージや関数は明示的に指定する必要があることに注意してください。


```{r foreach_1, eval=FALSE}
cluster <- makeCluster(detectCores()-1)
registerDoParallel(cluster)

t1 <- proc.time()
set.seed(2024)
shap_fs <- fastshap::explain(model_xgboost,
                             X = df_shapbg_x,
                             newdata = as.data.frame(df_shap_x),
                             pred_wrapper = predfun_xgboost_logit,
                             nsim = 100,
                             parallel = TRUE,
                             #独立したR環境に引き渡すべきパッケージや関数を記述
                             .packages=c('dplyr'), .export=c("logit", "predfun_xgboost"))
t2 <- proc.time()
t <- (t2-t1)[3]
names(t) <- NULL

cat("処理時間:", t, "秒")

stopCluster(cluster)

```

```{r foreach_1_dput, eval=FALSE, include=FALSE}
#なぜかqmdではforeachによる並列計算を行うとフリーズしてしまう(rmdではok)
#上記の手元の端末における結果を前もってqmd内に展開しておき、
#qmdレンダリング時は↑を処理しないで展開したものを使うこととする。
#以下は展開するためのコード
dput(shap_fs)
```

```{r foreach_1_str, include=FALSE}
#手元の端末における結果を展開したもの
shap_fs <- structure(c(0.083941968089295, 0.0738238880282165, -0.682165141405317, 
0.22539430984958, 0.264156293551138, -0.448132486426787, -0.831804872405906, 
-0.378127813363978, 0.433173790104222, 0.106828509739884, -0.612770352622016, 
0.253168770725518, -0.222640572914611, 0.153711173146012, -0.308376918225675, 
0.445261730378593, 0.381825782871998, 0.390945179360114, 0.125271320753374, 
0.00737513108082935, 0.519358389746754, 0.256566413946459, -0.0627293887920751, 
0.537750914057727, 0.232203265063932, 0.402112034845793, 0.509836616396245, 
-0.745807337489953, -0.269078069407295, -0.250427783133964, -0.745200142867142, 
-0.618673407462664, 0.412126658709593, -0.367460913393947, -0.162035394640451, 
0.165640607538935, 0.378359940999417, -0.298047042480261, 0.0647359426516322, 
-0.251422920544695, 0.485661457751009, 0.0796796944146057, -0.745936354364383, 
-0.776683878870167, -0.0309336514416899, -0.0136231456959472, 
0.348012127402829, 0.375127777064048, 0.343211694321582, -0.58263086112309, 
-0.0568502467896866, -0.619307370577513, -0.310329281901239, 
0.329341501861603, 0.174162658201547, -0.210462228275846, 0.14064373534663, 
-0.152223920548472, 0.581539472249385, -0.759917315734376, 0.175842283248891, 
0.349780377097172, 0.310314495623913, 0.342132119031553, 0.327554692306067, 
-0.711687082327099, 0.340212888997618, 0.118520223428822, 0.111228204127047, 
0.104449871162648, -0.604878038801162, 0.276753376177173, 0.363589522136126, 
0.245234410605542, -0.313134003545675, 0.453492473194611, 0.415367151105084, 
0.0753317262095397, 0.317832178085396, 0.578136791986778, 0.352682366320973, 
0.324857163624925, 0.122954571032897, -0.290962148658455, -0.343593397522494, 
0.218022242986546, 0.373602130312331, 0.161970466563079, 0.187987481186502, 
0.489486455238682, -0.220008283018578, 0.356718232776605, 0.287286280555608, 
-0.0117986086065693, 0.221616345068127, 0.202302624925667, -0.138903891702679, 
0.0549865353539651, -0.758602731997462, -0.727935824131364, 0.235815079055102, 
0.259034729463915, -0.229291882924757, 0.0918982327314985, -0.232473033785348, 
0.0779471142835036, 0.149033945710418, 0.24941581745247, 0.211837069382654, 
0.146247749066879, 0.0315616761298332, 0.134709357298247, 0.239010511599151, 
0.131606863445532, 0.132132842534365, 0.265666301326267, 0.152289225248052, 
0.151457713730375, 0.221661135893432, 0.22621645293911, 0.106777687211881, 
0.130162911801089, -0.246655413010559, 0.137279636062354, 0.168247961187552, 
0.217123016106394, -0.519454248977215, 0.0552297966577858, 0.279472266421673, 
0.330209831262335, 0.277031010996035, 0.0280002838590992, 0.212581071155105, 
0.318183825557634, 0.176112939968256, 0.177385187612502, 0.230684302423343, 
0.22044465712723, 0.0405419087073376, 0.307925904978705, 0.211229594146099, 
-1.89409897835124, 0.0924329474850341, 0.275189141076819, 0.25659283095836, 
0.0139547777117047, 0.0249229517676022, 0.172809274824133, 0.0889624498576067, 
0.29707231804403, 0.0824100617833856, 0.0107875093830257, -0.205200177960867, 
0.191660238276233, 0.220505183388674, 0.216379157807838, 0.231289035228106, 
0.141120538209898, 0.214903820697844, 0.0964742673776007, 0.082569761838592, 
0.205545561205451, 0.219414426857841, -0.151178527572666, 0.26024357845286, 
0.160419118798505, -0.220334616560664, -0.154109636580588, 0.0413085683756724, 
0.101531628245976, 0.0053903206066026, 0.026292741834889, 0.150807826013706, 
-0.528089409391452, 0.156811850432431, 0.147720312972673, 0.0697787781243236, 
0.0800191034798, 0.216357006007648, -0.281196593935816, 0.13465433734431, 
0.210420783637996, 0.134035102409641, 0.253791582555048, 0.205136331892455, 
-0.115858274379724, -0.237497638973542, -0.177292146752394, -0.174626677385343, 
0.0639601802054127, 0.141483900009879, 0.00170368181367605, -0.214092712257255, 
-0.178378307184242, -0.00586408079870322, -0.466738067907334, 
0.0954900646896914, 0.0289192418058381, 0.208877627574052, -0.108915648568874, 
0.00243458181623209, -1.14300212582362, -1.22565545174813, -0.939020731325891, 
-1.25423642119533, -0.0716455984344242, 0.0247324139644716, -0.550461363471502, 
0.843317724145151, -1.25764359468603, -0.10537766212117, 0.977246881369141, 
0.663048580134437, 0.594073422584447, -1.247894057434, 0.070263188527246, 
-0.0475573777546612, 0.101116788771902, -1.10543685490844, -0.0363358996431485, 
0.675089200553053, 0.0427353932615888, -1.10302717640874, 0.131233658489855, 
-1.19601146057222, -0.0367541985718505, -0.497089668077302, 0.158997693372636, 
-0.596303078284747, 1.06595703837142, 0.661553498945913, -0.0115971501219646, 
-0.553340160202804, -1.2979561539584, 0.650507162264161, 0.0796094899893664, 
0.957052969489766, 0.0147487375075475, 0.0860649371549906, 0.655195871856546, 
0.115959858374763, -1.14838012854425, -1.24470681771093, 0.686887876452821, 
0.569278205310958, -0.133932639544472, 0.947553570952186, 0.0816350889555663, 
0.0974027981086305, 0.0387677885636165, 0.0181717600282169, 0.0346266190325569, 
-1.05270893863736, 0.138398012450361, 0.590323795814961, 0.0429267841031739, 
0.155760036368991, 0.197343172966178, 0.14493033113748, 0.0142338395727255, 
0.845662540144628, -1.34554966145856, 0.0948843982758471, 0.0863727312926585, 
0.134957313310637, -1.07518107269015, 0.0946314571989304, 0.0408983699294239, 
0.140140629236262, 0.115039803693772, 0.00304695307983449, -1.30294597010873, 
-0.0252533249085201, 0.0332857529018944, 0.624980441706072, 0.930335992195922, 
0.607027185081963, 0.882444682537041, -1.04842814655101, 0.0761787547202214, 
0.047726182900413, 0.138091232810137, 0.768013260311599, -0.525470753386017, 
0.0550038823811817, -1.31259713203902, 0.0804298998432059, 0.0933551514741337, 
0.728256261252281, -1.32410053807537, 0.819421969214533, -0.0196886199183499, 
-0.341285440574513, -0.515153068492725, -1.27953468333979, 0.085233935588145, 
0.834448993124061, -1.025220190193, -1.25490239497896, 0.0653155214343165, 
-0.0588228872401283, 1.43511722512527, -0.13624516624965, -0.0570202016980571, 
-0.156476656641784, -0.0625527274101247, -0.0795698747372347, 
-0.112163696220007, -0.0238393925284881, 1.32073453478669, -0.0580551539859173, 
-0.0755654603807153, -0.0472550772001485, -0.0462433325511342, 
-0.0624579163181904, -0.106328479918624, -0.0784259157042968, 
-0.0612064333970794, -0.11585340667967, -0.0783214123242019, 
-0.141471310082261, -0.0063998890090817, -0.0407081064677353, 
-0.0590684552756927, -0.127287742675758, -0.10349850650411, -0.0769037202298197, 
-0.0568277182535638, -0.0872998026999049, -0.159032064228672, 
-0.0742220957605718, -0.0824777380041159, -0.0179973105110326, 
-0.0527321410562991, -0.0804130432593446, -0.0965715154103053, 
-0.141752287825051, -0.095763315783934, -0.0860746898138559, 
-0.106166105621755, -0.0285621255546261, -0.0892997863459999, 
-0.101676642730375, -0.0807076289138368, -0.0760383118022571, 
-0.0919959310684215, -0.101808759484663, -0.0665235728674232, 
-0.127427787477575, -0.115457553624339, -0.0658601318616251, 
-0.107001793644156, -0.0892500947927746, -0.0899035548598915, 
-0.0995277571379697, -0.120853247971705, -0.0736949000774926, 
-0.0940231527763077, -0.0594308083902247, -0.151600532863783, 
-0.107878726298509, -0.0863478418735793, -0.0832112672405739, 
-0.0517389784419357, -0.0781056620945124, -0.0687768051094956, 
-0.0692511512717957, -0.0748608226140982, -0.063840791420388, 
-0.143323715370457, -0.107408561731408, 1.37745155018524, -0.0497084322865816, 
-0.060146638448777, -0.101567802504213, -0.059651846920653, -0.0558916543326652, 
-0.0956883444775314, 1.08044784547722, -0.0621922587278673, -0.136798930035913, 
-0.0855467952694092, -0.0782733407478138, -0.0586222416637305, 
-0.0768560860870197, -0.0743209768061369, -0.0829180250268796, 
-0.0608969685367407, -0.114473823593065, -0.034853839292122, 
-0.0926550958575623, -0.0609796988591811, -0.0767385585757034, 
-0.0776259052110124, -0.090924887482443, -0.0950409253613495, 
-0.0883531642317368, -0.0782895114178273, -0.115402521740712, 
-0.0786339460632476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, -0.215923969685861, 0, -0.177576779647242, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.229212987219755, -0.354673359935047, 
0, 0, 0, 0, 0, 0, 0, 0, -0.358748561592094, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0.000770559322957218, 0.064124635693741, 0.0122827869669114, 
0.0176022932342672, 0.0179796881989901, 0.0365689302963539, 0.017210098260096, 
0.0177546503873718, -0.00378913242774192, 0.040909003391857, 
0.00755096309804034, -0.0178234881191078, -8.51913950758454e-07, 
0.00552967103758375, 0.00625925202068489, 0.00545701669624179, 
0.0104932771844817, -0.00643167974246475, 0.0123009718077168, 
-0.000236194511902847, 0.0229105837256728, 0.0164404033201394, 
0.0118727564457024, -0.0155670226092026, 0.000667683660866469, 
0.00550779961995214, 0.0119925152418365, -0.0491651818902698, 
0.0121085202865747, -0.000493235651168633, -0.00235222625330676, 
0.0203114057745851, 0.00563269683748026, 0.0150720416322586, 
0.00542078672385935, -0.00018540832044484, -0.0237090396640794, 
0.0174424711815919, 0.00552971290201703, 0.0113971000410907, 
0.00547518478038752, 0.0121578141978187, 0.0180812819232642, 
0.0113099675849867, 0.0403424829539104, 0.0054206974268996, -0.00945362335843945, 
-0.00669726211479097, 0.00545700374727979, 0.0252451003726897, 
-0.000217985825723594, 0.020209892243257, 0.0120069754950731, 
0.0112773678328586, 0.0114478804819029, 0.0173008412903998, 0.0114152615928821, 
-0.00108594935502942, 0.003753578751572, 0.00556229351167954, 
-0.00417264063416115, -0.012878764178464, 0.00545702987886738, 
-0.0025852102162992, 0.0114115341048477, 0.00625929084988868, 
0.00191894902768479, 0.00554044333794398, 0.0154361663856811, 
0.00667807683421137, -0.0536091227408231, 0.0408217616810178, 
-0.0162865162536022, 0.0113789055433924, -0.000130850856546885, 
-0.00948603347602106, 0.00722818919445917, -0.0114490819840926, 
-0.251022601522026, -0.000217997646195731, 0.0114698092452121, 
0.0501096639801004, 0.00547152187967521, 0.0120577433373171, 
0.0134190266586272, 0.0161789412871906, 0.00564943951958445, 
0.0114735295618273, -0.00197969169955625, 0.000341050138911977, 
-0.00862976856703994, 0.00549340473399515, 0.0127924531678419, 
0.0118909741095409, 0.020998823978909, 0.0286330562983496, -0.00740342162695403, 
0.000558664417075189, 0.0238182244015984, 0.0113789254205162, 
-0.192522757568933, -0.172415292733069, 0.180507296105903, 0.203156598594613, 
0.15351923563233, 0.145490965633583, 0.122403648093037, 0.154397590106457, 
0.0932643000073299, 0.183774448989997, 0.12742622238333, 0.0940840950194778, 
-0.183108476783585, 0.15257526159242, 0.192562691513956, 0.120409449726215, 
0.101841049074222, 0.0907027147635675, -0.259223319760498, -0.159959931718468, 
-0.145712885259246, 0.0962784859182814, 0.16008535119839, 0.102339042590852, 
0.151475320084037, -0.173760939028172, 0.108630750853232, -0.203970226078934, 
-0.157640482020575, -0.133472150471748, 0.170170412126901, 0.121780259787499, 
-0.130645482173468, 0.15295262029926, 0.124398400173036, 0.0731600449347592, 
-0.100210763945944, -0.156725718756797, 0.120992348410092, -0.157566195887601, 
-0.11964425206964, 0.185428526804397, 0.190190019810949, -0.17018208796505, 
0.162054323787889, 0.139821018398532, 0.113472534444057, 0.0918363313528864, 
0.107020201185231, -0.212711964800787, 0.109689884659995, 0.12645110151285, 
0.0988109139807363, 0.0971429149625452, 0.184634468681523, -0.187137611306025, 
-0.182186459601499, -0.138723958354565, -0.146167952125185, 0.125571850239801, 
0.0995241511575571, 0.16873607645389, 0.102298170125197, -0.111718011489325, 
-0.194406469455, 0.172004820266691, -0.140627213067495, -0.187855602091082, 
-0.157898717849291, 0.125356765819201, -0.156156523528572, 0.113446144711177, 
0.10237180515755, -0.121281943005104, 0.120485266306983, 0.116539400205136, 
-0.12140969558264, -0.145829890089306, 0.121633430050749, -0.110183362068759, 
-0.115386825087222, -0.174342697636739, -0.1782247464967, -0.168555644105509, 
0.103635569084172, -0.194132697586015, -0.121153368818355, 0.148240635431475, 
-0.137315295724639, -0.125628342580576, 0.101805877412018, -0.163552395485413, 
0.096984252786936, -0.144375342726445, -0.245527721112445, -0.163496881513222, 
0.0999705658607554, 0.187646517570658, 0.205118122020272, 0.0384912858092842, 
-0.725766093910707, -0.753508336692468, -0.520649024067059, -0.648615038788654, 
0.231197812872893, -0.774457572619175, 0.244933031210911, -0.615575779312828, 
0.28673968667078, 0.253589386774829, -0.638251167003645, 0.312427741781688, 
-0.628624142532558, -0.850324475294311, -0.586737326703456, 0.269606481185454, 
0.271219695606261, 0.373148319600856, -0.639931164000666, -0.736895032859625, 
0.390259297273322, -0.777006805166648, 0.322121886948215, 0.329704798363048, 
-0.673619318549231, -0.785329847357849, 0.255190455971203, -0.790717848051567, 
-0.703486914673887, -0.570886050636593, -0.668386387682856, -0.623212114464719, 
0.257927355476956, 0.187303991054046, 0.270376370840396, 0.214679803081104, 
0.292207361056498, 0.356621888671224, 0.165592635948259, -0.681460282123987, 
0.379528232864057, 0.300681214585619, -0.550532024026274, -0.691641069712205, 
-0.696197684593517, -0.789401260126198, 0.269415268616005, 0.244371758491729, 
0.293402702028426, -0.683357459626506, 0.272216037904174, -0.66255890937685, 
0.197110558646122, 0.211804404760672, -0.670440972181846, -0.657592870020496, 
-0.81849757360801, 0.241386578151244, 0.227563207355504, 0.262903825870106, 
0.312852550945263, 0.275595782487463, 0.315346825145706, 0.227022875462706, 
-0.792079072873133, -0.490185289462924, 0.265285665124971, 0.402599070870584, 
0.310689544211277, 0.199725051343212, -0.683037198495293, 0.27887679374838, 
0.384231317940004, 0.268081185903613, -0.596856366199803, -0.670372433612057, 
0.244058036068432, 0.292081139013724, -0.58830036292792, 0.247749928992558, 
0.239020267098958, -0.638557619944248, 0.417805286458327, -0.703675087071291, 
0.267023786523839, -0.482348183858835, 0.240468585300516, -0.663767018236219, 
0.192427087099957, 0.265787085119007, 0.294963267371422, 0.295573271107978, 
0.235784450762977, 0.291192959574531, -0.47063431927199, -0.560281590971109, 
0.237677699802653, -0.601926010623318, -0.506344589987324, 0.268675086059381, 
-0.962395652179662, 0.255483185579432, 0.364704499340838, 0.374260227158134, 
0.331181110222416, 0.237106493284328, 0.258130545427619, 0.229660277086357, 
0.310513576198279, 0.259593897738424, 0.278653491464185, 0.231491035571808, 
0.17714562944317, 0.271419372234957, 0.236315252113736, 0.203748130482981, 
0.258074276698457, 0.229864979327371, 0.228669979768301, 0.155125781506044, 
0.258649882256409, -1.06961990815451, 0.27413050417247, -0.90445000335713, 
0.266753651685982, 0.281989689895291, 0.225193785357389, 0.255655611916275, 
0.292336571704397, 0.311030770450438, 0.281821892535796, 0.230909482788636, 
0.168155164700563, 0.187832368090354, 0.190172104548305, 0.192585539360256, 
0.225857548736204, 0.26405493751471, 0.273118334586599, 0.278010744720521, 
0.264339676154091, 0.139364503986179, 0.224264163582874, 0.235079365538569, 
0.20176000435188, 0.269691111733867, 0.270999083792012, 0.229311117349292, 
0.216249035999668, 0.255138623826528, 0.210113289874426, 0.245003122299311, 
0.266231531198134, 0.258467151935985, 0.205866308931378, 0.279362500109003, 
0.322444670023744, -0.87256346746921, -0.983872429275209, 0.235160192776009, 
0.259953260241219, 0.256014082746789, 0.264966653014739, 0.214577145722315, 
0.295648063370396, 0.193750736628123, -1.00004696964887, 0.267908415406993, 
0.175710539230762, -0.913900029113643, 0.262781138196095, 0.325125375802476, 
0.256470479257409, 0.246648295822634, 0.299905913509818, 0.21826684716423, 
0.282784954265648, 0.217559432924615, 0.36030611861014, 0.25736671674871, 
0.177851968016602, -0.889832145994614, 0.255126771882875, 0.153054058128971, 
0.209067015965684, 0.158032837918982, 0.269899810247893, 0.144655653824372, 
-1.02233643072974, 0.269495165879363, -1.0125327702282, 0.213431332676624, 
-0.995383292936292, 0.157266407981704, 0.252170856539162, 0.280967776563558, 
0.218756544930923, 0.317592205982943, 0.233922034362617, 0.152006369575223, 
-0.0335055577788622, 0.157256883598058, -0.0518944778602278, 
0.16928275329251, -0.0557803531581771, -0.0331524784778603, -0.0328615955466816, 
-0.04001004849811, -0.051765723739581, -0.0651436697406526, 0.0854900189650918, 
-0.0610765824471647, -0.0498028449186479, -0.0385221825872049, 
-0.0460877897263141, -0.0330433639999933, 0.0953188460937936, 
0.0944061207334436, -0.0629247267793948, 0.0889601284686532, 
-0.0432247142203456, -0.0294594273769721, -0.0599037105917209, 
-0.0284617675707379, -0.0475784876621158, -0.0276538265124558, 
-0.047682355186143, -0.0255904172270211, -0.0395635787761136, 
-0.0471199831094762, 0.142404890520841, -0.0354663639907766, 
0.159894515083409, 0.177735310535947, -0.0436507439327328, -0.0254825234052282, 
-0.040729157051367, -0.0209960193388057, -0.034689444154585, 
-0.0428502067897297, 0.0924233661146202, -0.0799495168801639, 
-0.0652494938112238, 0.140926117919113, -0.0337480286254687, 
-0.031884578807606, -0.039756992043782, -0.0323478597010507, 
-0.0241586752697985, 0.0901778330954616, -0.0301250721155347, 
0.0964581092778169, -0.0710443664445157, -0.0306386071528129, 
-0.032847178069033, -0.0331308246848721, -0.028746252066768, 
0.0987494356855517, -0.0259242046567688, -0.0326356437156582, 
-0.0461036533375293, -0.0742690182185129, -0.0359650190836302, 
-0.0389879198193455, 0.093823050146481, -0.0590605478103665, 
0.0960405628847294, -0.0342193650588196, -0.0293317471679548, 
-0.0381064672863032, -0.030325998913646, -0.0498921472811459, 
0.0958895505199527, -0.0300475530796665, 0.123460082460933, 0.122436900310344, 
-0.0424701281178683, -0.04650249731217, 0.177687209434976, -0.0272813710985505, 
-0.0314494238897892, -0.0334979537751069, -0.0433785336966263, 
-0.0492992266497104, -0.0365141068823529, -0.0457173519481692, 
-0.0281673372750108, -0.0333142907983855, -0.040090851820603, 
-0.0554954994633339, -0.0404429546093895, -0.0280228586012883, 
-0.0614428367283707, -0.0722374447042129, -0.0513645855759196, 
0.109005982653625, -0.052748320591016, -0.0417920896747387, -0.0675332184814134, 
-0.0301324761987555, 0.0428049122646976, 0.0581889896638513, 
-0.208221815098602, 0.0695145131323063, -0.28264951696647, 0.0605489407857059, 
0.0781990464121522, 0.0720305120257473, 0.060192700616181, -0.253211850501432, 
0.0546579773362371, 0.0460553450862395, -0.13227510392105, 0.057036426381063, 
-0.173595445029191, -0.141287800013621, 0.048011918285539, 0.0813929748981636, 
0.0621421270209046, 0.0523564757047352, 0.0904047092587842, 0.0654814785578589, 
0.0659481835123401, -0.219411912056931, 0.0558023929484413, 0.0206210772177152, 
-0.267714685698229, 0.0285744292264183, -0.089431040978023, -0.192461260258755, 
0.0428642197200944, -0.124042480214649, 0.0662951458705631, 0.110721437246394, 
0.0850119431654099, 0.0682935894518245, 0.0543864723796477, 0.0662798774796415, 
-0.263511108603216, -0.109248061294701, 0.0452980281935448, 0.0469517253656675, 
0.0721477693428317, 0.0339890539620487, 0.0353845552135872, 0.0732741788355904, 
-0.225910996119356, 0.0622583265838365, -0.262533252758939, 0.0547589672786739, 
-0.23248395782613, 0.0653597617085157, 0.0801417134094737, 0.0656044034429187, 
0.0385889220966014, -0.141683659864104, 0.0558625682958323, 0.0631717374216299, 
-0.211728162625133, 0.0928519782001209, 0.0652190202617401, -0.238369182364996, 
-0.201115090189951, 0.0966398171274754, 0.0546648102540473, 0.0734622499615759, 
0.0795800812269874, 0.0493873786335055, -0.267192485873034, 0.103038330672085, 
-0.193828731345501, -0.238664450623297, 0.0895744327744929, 0.105145448228482, 
0.0581624801130782, 0.0018407657899654, 0.0754584143213297, -0.213943749165077, 
0.0429444399071014, 0.0707383861148544, -0.191809751375309, -0.177838828311165, 
0.071575387218591, -0.157670199673155, 0.0764316585655962, -0.193408916686956, 
-0.267387603168923, -0.129380734217306, -0.230558796052239, -0.31490879163552, 
0.0659971368579626, -0.170807110417997, -0.27649055232047, 0.0532549012744879, 
0.0901727659069032, 0.0332284958978258, -0.22789120340597, 0.06021161653097, 
-0.102076930047606, 0.105017719030415, -0.200501075413471, 0.0395635275256331, 
0.0479949795192941, 0.0342965274936729, 0.0432202384988821, -0.195138871213268, 
-0.192974816171198, -0.349123935991755, 0.0551223994455297, 0.0193914911057701, 
0.049187090899131, 0.0431648410467761, 0.0721739741715364, -0.188025069907327, 
0.0683587497472851, 0.0275231246258064, 0.04362225476317, 0.0407639198153835, 
-0.166774504289895, 0.0485772910837078, 0.0456548651996813, -0.200925253151707, 
-0.0774557825515615, 0.0262708923969468, 0.0297952618768389, 
-0.13358037568586, 0.0572940414278422, -0.109729342991356, 0.0599358712908809, 
0.0301560429583255, 0.0370053766787962, 0.0270770350550361, 0.0128512234108466, 
0.0358599137102233, 0.0751550381539698, -0.188037191122135, -0.202810826987842, 
-0.305277415053855, 0.0426784982074678, 0.0560244602505451, 0.0214620242087772, 
-0.205959280152163, 0.0412689035133058, 0.0442237996697923, -0.227185060567465, 
-0.22437047168316, 0.0363554606189258, -0.196609415153914, 0.0273108600475355, 
0.0558850227010893, 0.0335327797836553, 0.0434846343423457, -0.258620917575548, 
-0.175552341366339, -0.225770065947389, 0.0752962031752667, -0.261724495051054, 
0.0716000268483469, 0.039572116533463, -0.180928562999912, 0.0542167001245762, 
0.0355439540322637, 0.0337845053902391, -0.204601642615158, 0.0343586893410889, 
-0.160824238936979, 0.0428610426211776, 0.0332389274130776, 0.0368504683292103, 
0.0330733424333368, 0.029482996802056, 0.0323569399597244, 0.0446766546135505, 
0.0591917704069235, 0.063656112250267, 0.0395870643664908, -0.110766236285321, 
0.0833002501471344, 0.0532313317627669, 0.0218235034916739, 0.0170542467175441, 
0.0469273872351527, 0.0478349529727153, 0.0669018411538086, -0.303743075387389, 
0.0245103290887943, 0.03661265943698, 0.0202359863815827, 0.0388441012984587, 
0.0375310428768934, 0.068019666480367, 0.0258711470039684, 0.0223135130737005, 
-0.212765898247488, -0.0991090476566416, 0.0591570952790435, 
0.0484959838921789, -0.177692425621201, 0.0246625213216513, -0.187207992305024, 
0.0196193921123301, 0.0428554971477324, 0.0100698426340452, 0.0145198849036594, 
0.0132601652650151, 0.022580121285079, 0.0346317553065773, 0.016260468189935, 
0.0203967601055986, 0.019583317287968, 0.0287449477625582, 0.015830168038118, 
0.0346499440854257, 0.0508251306655148, 0.0209516293732084, 0.0353871233544861, 
0.0597744031739241, 0.0216888267656303, 0.00707162075050913, 
0.0136470721677033, 0.00871038346471677, -0.528354022550435, 
0.00457207559780061, 0.035428727442634, 0.00862040020382375, 
0.0468425538905125, 0.0191213287048534, 0.0348816101848642, 0.0285965280173424, 
0.0188339040348924, 0.0537903373750887, 0.0207199910643763, 0.0817395585181093, 
0.00263034397613145, 0.0088771182724657, -0.736364321196241, 
0.013907383701865, 0.0179834280950332, 0.0161193420931103, 0.015395890214234, 
0.0383557909741813, 0.0056382541987329, 0.00608536295171526, 
0.0147820072883036, 0.0474698582680264, 0.0576681737200113, 0.00987735705322849, 
0.0340475203664857, 0.0140555156055418, 0.0238366426497297, 0.0206619932725392, 
0.019138080082477, -0.164673790219004, 0.0127280918497977, 0.0449057699566737, 
0.0179418220764342, 0.0140373559029263, 0.012757082197365, 0.0652085156168562, 
0.0169925189638132, 0.0148654437988448, 0.019484578572777, 0.0203877790365566, 
0.0147252818606702, 0.0298076167272091, 0.027140010304048, 0.00768310635863199, 
0.00993084292167548, 0.00955433606881829, 0.0187934045377724, 
0.0158035083630549, 0.0468385701473078, 0.0706708181956951, 0.016960550056956, 
0.0279075275903713, 0.0114434878506772, 0.0359454926890369, 0.00700971901446972, 
0.0364923000369112, 0.016320334615626, 0.0159280662876542, 0.0233218446775896, 
0.00658554148239755, 0.010376500159606, 0.00821605648588828, 
-0.000751401023292901, 0.0139460918536972, 0.0121413653443789, 
0.00632752293681945, 0.0357098165777667, 0.0462933405246693, 
0.0105771674736257, 0.0103047322571167, 0.0136408599379557, -0.000597425020383039, 
0.003316640120418, 0.0205414515771189, 0.0170471447770907, 0.0235415645687781, 
-0.367498005719309, 0.0167303163611982, 0.0248366060153792, 0.0113432100330602, 
0.0141307508533892, 0.00772170219694889, 0.0150951576984368, 
0.0289878102483167, 0.02066454997424, 0.0239947146661177, 0.00251748964375943, 
0.0299856162648556, 0.0486062310713234, 0.0143244069827276, 0.00952486631189903, 
0.023623485237752, -0.134154637561922, 0.0217570291574221, 0.0287392562279861, 
0.0109890556435091, 0.0180237941972986, 0.013096329819329, 0.0246979354244763, 
-0.131268992994126, 0.00652311636514906, 0.0170097646029193, 
-0.11658515861613, 0.00891686563790632, -0.228028838769367, -0.20949511259334, 
0.0236766064615288, 0.0375369564818871, -0.197159266315555, 0.0179622539459711, 
0.0442035596398177, 0.02593776902254, 0.0191398227787682, 0.0296552163400292, 
0.0267629255378765, 0.0182368568027866, 0.0220665449113185, -0.224620625001381, 
0.00515807276462749, 0.0211106421072426, 0.0264905115617935, 
0.024538186076104, 0.0224323364319614, 0.0130078662235456, 0.0192975751206016, 
0.00859072108774796, 0.0340195375610089, 0.0107102152141426, 
0.0302740065179808, 0.00631359396232087, 0.00237250229442921, 
0.0234140499025162, 0.024266203678269, 0.0116811373509589, 0.0428845359409544, 
0.0168494075200845, 0.0285815468108116, 0.0345118145135256, 0.0111264406731411, 
0.0269263057661729, 0.0184756286981444, 0.0423177360445555, 0.0109030345094401, 
0.0417221321702432, 0.016187448352578, 0.0137007948506118, 0.03726733689218, 
0.0172936583638053, 0.00607681487387749, 0.0172734384600418, 
0.0207060680374437, 0.024241440745111, -0.222565968249945, 0.0260379309217512, 
0.0083230480559024, 0.0166497181134016, -0.220216181993768, -0.186223814474798, 
0.0498564798011955, 0.00986309061011507, 0.0171868873156757, 
0.0225412715204507, 0.0194579798025399, 0.016243497145089, -0.160401888819762, 
0.0331594864512931, 0.000124547538959983, 0.0247907681977592, 
-0.152581500960978, 0.0189309977071843, 0.0190504062733153, 0.0201724981899974, 
0.0245861209241577, 0.027672078221246, 0.00981202364000702, -0.164913412201792, 
0.0180146011010309), dim = c(100L, 14L), dimnames = list(NULL, 
    c("age", "family", "education_main", "education_other", "health_yes", 
    "limit_yes", "gender_male", "married_yes", "selfemp_yes", 
    "region_midwest", "region_south", "region_west", "ethnicity_other", 
    "ethnicity_afam")), baseline = 0, class = c("explain", "matrix", 
"array"))
```


```{r foreach_1_s, echo=FALSE}
t <- 10.97 #手元の端末の処理時間を表示させる
cat("処理時間:", t, "秒")
```

並列計算しない場合は10回の試行に`r round(t0, 2)`秒かかっていました。
上記では試行回数を100回に増やしましたが、並列計算の恩恵によってその10倍よりは短い時間で計算できています。

なお、どのような状況であっても並列計算で劇的に高速化する訳ではなく、また環境によって効果は異なってくる点に注意してください。


ちなみに、`shapviz::sv_importance`関数の結果は次のとおりであり、
試行回数を増やすことによって計算結果が収束してきていることがわかります。
逆に、試行回数10回では流石に少なすぎるかもしれません。

```{r foreach_2}
sv <- shapviz::shapviz(shap_fs, X = df_shap_x)
shapviz::sv_importance(sv, kind = "beeswarm")
```

### 引数adjustによる局所正確性の確保

説明変数ごとの寄与を積み上げると元の予測値になるというSHAPの性質を局所正確性（local accuracy）といいます。
しかし、fastshapは近似的な手法のため、そのままでは局所正確性が満たされないという弱点があります。
引数`adjust`を`TRUE`にすることで、局所正確性を確保できるように補正することができます。

```{r adjust}
set.seed(2024)
shap_fs_notadjusted <- fastshap::explain(model_xgboost,
                             X = df_shapbg_x,
                             newdata = as.data.frame(df_shap_x),
                             pred_wrapper = predfun_xgboost_logit,
                             nsim = 4,
                             parallel = FALSE,
                             adjust = FALSE)
sv_notadjusted <- shapviz::shapviz(shap_fs_notadjusted, X = df_shap_x)

set.seed(2024)
shap_fs_adjusted <- fastshap::explain(model_xgboost,
                             X = df_shapbg_x,
                             newdata = as.data.frame(df_shap_x),
                             pred_wrapper = predfun_xgboost_logit,
                             nsim = 4,
                             parallel = FALSE,
                             adjust = TRUE)
sv_adjusted <- shapviz::shapviz(shap_fs_adjusted, X = df_shap_x)


(shapviz::sv_waterfall(sv_notadjusted, row_id = 1) + ggtitle("補正前")) +
(shapviz::sv_waterfall(sv_adjusted, row_id = 1)  + ggtitle("補正後"))
cat("実際の予測値（のロジット変換後）:", predfun_xgboost_logit(model_xgboost, df_shap_x[1, ]))
```

補正後は、プロットの上部にあるf(x)の値が実際の予測値と一致していることが確認できます。

### 引数exactによる理論値の計算

引数`exact`を`TRUE`にした場合、次のモデルに限り、
モンテカルロシミュレーションを行うのではなくパラメータから理論的な値を計算することができます。

- `stats::lm()` ：線形回帰モデル…最初から加法的に関数が分解されているため、係数×説明変数を計算すればよい
- `xgboost::xgboost()`, `lightgbm::lightgbm()` ：ブースティング木モデル…Tree SHAPを用いる

XGBoostの場合を示すと次のとおり。

```{r exact, results='hide'}
t1 <- proc.time()
set.seed(2024)
shap_exact <- fastshap::explain(model_xgboost,
                             X = as.matrix(df_shap_x),
                             exact = TRUE,
                             parallel = FALSE)
t2 <- proc.time()
t0 <- (t2-t1)[3]
names(t0) <- NULL

cat("処理時間:", t0, "秒")
```

```{r exact_s, echo=FALSE}
t0 <- 0.12 #手元の端末の処理時間を表示させる
cat("処理時間:", t0, "秒")
```

`shapviz::sv_importance`関数で可視化してみると次のとおりです。[^xgb]

[^xgb]:実はXGBoostの場合fastshapパッケージを用いずとも直接shapvizパッケージによる可視化を行うことが出来るので、実用性はあまりありません。

```{r exact_shapviz}
sv_exact <- shapviz::shapviz(shap_exact, X = df_shap_x)
shapviz::sv_importance(sv_exact, kind = "beeswarm")
```

## 他のパッケージとの比較

SHAPの計算を実装したパッケージは他にもいくつかあり、代表的なものを比較して整理すると次のようになります。

| パッケージ名 | 概要 | 対応モデル | 計算速度 | 計算精度 |
|------|--------------------|------------|--------|------|
| fastshap | モンテカルロシミュレーションによる計算 | すべての予測モデル | 高速 | 低い |
| kernelshap | Kernel SHAPの高速な実装 | すべての予測モデル | 普通| 高い |
| treeshap | Tree SHAP | ランダムフォレスト、ブースティング木| 非常に高速 | 高い |
| DALEX | 他の手法(breakdown等)も統合的に扱える | すべての予測モデル | 非常に低速 | 高い |

最も高速なのはTree SHAPを実装したtreeshapです。

Tree SHAPは、決定木の場合は条件付期待値の理論値が予測モデルのパラメータから計算可能であり、
さらにアンサンブルモデルの場合には平均値でSHAPを計算できるという特徴によって高速に計算する手法です。
そのため、対応しているのはランダムフォレストやブースティング木を実装した一部のパッケージに限られます。

それ以外のモデルの場合、kernelshapは計算精度の高さと計算速度をある程度両立してはいるものの、
サンプル数や説明変数の数が多い場合には実行が難しい場合もあります。

これらに比べてfastshapは非常に軽量かつシンプルなため、
利用者側で精度と計算速度の調整が行いやすいという点が特徴と言えます。

DALEXはSHAP以外の他の解釈手法をも統合的に扱える点が特徴ですが、
計算速度は低速であり、グローバルな手法としては扱いづらいかもしれません。
グローバルな手法として用いる場合はshapvizパッケージが使用できない（2024.8時点）という弱点もあります。

### kernelshapの例

今回の例の場合はfastshapで並列計算を採用するよりも、高速で良い結果が得られているように思われます。

```{r kernelshap, results='hide'}
t1 <- proc.time()
set.seed(2024)
shap_ks <- kernelshap::kernelshap(model_xgboost, X = df_shap_x, bg_X = df_shapbg_x,
                                  pred_fun = predfun_xgboost_logit)
t2 <- proc.time()
t0 <- (t2-t1)[3]
names(t0) <- NULL

cat("処理時間:", t0, "秒")
```

```{r kernelshap_s, echo=FALSE}
t0 <- 3.16 #手元の端末の処理時間を表示させる
cat("処理時間:", t0, "秒")
```

```{r kernelshap_shapviz}
sv <- shapviz::shapviz(shap_ks) #kernelshapの場合引数Xは不要
shapviz::sv_importance(sv, kind = "beeswarm")
```

### DALEXの例

DALEXの場合はshapvizで可視化できるのは個別サンプルの寄与を計算する`DALEX::predict_parts`関数のみで、
グローバルな手法で用いる`DALEX::shap_aggregated`関数は対応していません。

```{r DALEX, results='hide'}
explainer <- DALEX::explain(model_xgboost,
                     data = df_shapbg_x,
                     predict_function = predfun_xgboost_logit,
                     quietly = TRUE,
                     verbose = FALSE)

t1 <- proc.time()
set.seed(2024)
shap_dalex <- DALEX::predict_parts(explainer, df_shap_x[1, ], type = 'shap')
t2 <- proc.time()
t0 <- (t2-t1)[3]
names(t0) <- NULL

cat("処理時間:", t0, "秒")
```

```{r DALEX_s, echo=FALSE}
t0 <- 1.97 #手元の端末の処理時間を表示させる
cat("処理時間:", t0, "秒")
```

```{r DALEX_shapviz}
sv_dalex <- shapviz::shapviz(shap_dalex)
shapviz::sv_waterfall(sv_dalex, row_id = 1)
```

さらに、`DALEX::shap_aggregated`関数は計算時間が非常に長く、実用的とはいえません。

```{r DALEX_shap_aggregated, results='hide'}
df_shap_x_dalex <- df_shap_x
#DALEX::shap_aggregatedには説明変数の型がすべて同じではエラーになるバグがある（2024.8時点）ため、
#一つだけ別の型（numericからinteger）に変換しておく
df_shap_x_dalex$education_main <- as.integer(df_shap_x$education_main)
df_shap_x_dalex <- df_shap_x_dalex[1:4, ] #あまりにも計算時間が長いので、4サンプルに限定

explainer <- DALEX::explain(model_xgboost,
                     data = df_shapbg_x,
                     predict_function = predfun_xgboost_logit,
                     quietly = TRUE,
                     verbose = FALSE)

t1 <- proc.time()
set.seed(2024)
shap_dalex_agg <- DALEX::shap_aggregated(explainer, df_shap_x_dalex, type = 'shap', B = 10) #Bは試行回数
t2 <- proc.time()
t0 <- (t2-t1)[3]
names(t0) <- NULL

cat("処理時間:", t0, "秒")
```

```{r DALEX_shap_aggregated_s, echo=FALSE}
t0 <- 2.90 #手元の端末の処理時間を表示させる
cat("処理時間:", t0, "秒")
```
```{r}
shap_dalex_agg %>% plot()
```


### 他のモデルの例

#### GLM

最も単純な予測モデルの例として、ロジスティック回帰の例を用意します。

実は単純なロジスティック回帰でもそれなりの予測精度になります。
最も重要な説明変数である学歴については単純に学歴の低いものから0, 1, 2, ...と並べて数値に変換しただけですが、
これでも非常によくフィットします。
前述までのSHAPによるグローバルな分析にて、`education_main`の点がおおむね等間隔に群団を作っていたことと整合します。

```{r glm_fit}
model_glm <- glm(insurance ~ ., data = df_train, family = "binomial")
predfun_glm <- function(object, newdata){
  res <- object %>% predict(newdata = newdata, type = "response")
  1 - res
}
predfun_glm_logit <- function(object, newdata){
  res <- object %>% predict(newdata = newdata, type = "link")
  -res
}
score <- calc_score(model_glm, predfun_glm, df_test_x, df_test_y)
df_scores <- df_scores %>% bind_rows(tibble(model = "glm", auc = score$auc, logloss = score$logloss))

score$auc_plot %>% plot()
cat("auc:", score$auc, "logloss:", score$logloss)
```

#### 特徴量エンジニアリングを加えた（正則化）GLM

特徴量エンジニアリング（説明変数の加工）を行うことで、非線形な作用をGLMで捉えられるようになります。
この場合はモデル自身の係数が複雑になってしまい解釈可能性が低下してしまうので、
SHAPのような手法を駆使して解釈することは考えられます。

Tree SHAPを用いることができない例として、この特徴量エンジニアリングを加えたGLMを用意します。

```{r glm_prep_fit}
recp_glm_prep <- df_train %>% recipe(insurance ~ .) %>%
  #高学歴層では等間隔とならないことへの対応
  step_mutate(education_geq_4 = 1*(education_main >= 4)) %>% 
  #年齢が非常に複雑に作用することを捉える
  step_mutate(age_geq_20 = 1*(age >= 20)) %>% 
  step_mutate(age_geq_24 = 1*(age >= 24)) %>%
  step_mutate(age_geq_26 = 1*(age >= 26)) %>%
  step_mutate(age_geq_27 = 1*(age >= 27)) %>%
  step_mutate(age_geq_57 = 1*(age >= 57)) %>%
  step_mutate(age_geq_58 = 1*(age >= 58)) %>% 
  #家族の数もわずかに非線形な作用がある
  step_mutate(family_geq_2 = 1*(family >= 2)) %>%
  step_mutate(family_geq_3 = 1*(family >= 3)) %>%
  step_mutate(family_geq_7 = 1*(family >= 7)) %>%
  step_mutate(family_geq_11 = 1*(family >= 11)) %>%
  step_mutate(family_geq_12 = 1*(family >= 12)) %>%
  #重要な説明変数に関連する交互作用項を追加
  step_interact(terms = ~ (tidyselect::starts_with("age") + tidyselect::starts_with("education_") +
                       married_yes + selfemp_yes + education_other)*all_numeric_predictors(), sep = ":") %>%
  prep()

df_train_x_glm_prep <- recp_glm_prep %>% bake(new_data = df_train_x)

lambda_glm_prep <- 0.0036 #正則化項の係数
#交互作用項が多数作られてしまうので、Lasso回帰による変数選択を組み合わせる
model_glm_prep <- glmnet::glmnet(x = df_train_x_glm_prep, y = 2 - as.numeric(df_train_y),
                                 alpha = 1, lambda = lambda_glm_prep, family = "binomial")

#予測関数の中に上記前処理を行う処理を差し込むことで
#他のモデルと同じ形式のデータフレームを入力できるようにしておく
predfun_glm_prep <- function(object, newdata){
  df <- recp_glm_prep %>% bake(new_data = newdata)
  res <- object %>% predict(newx = as.matrix(df), type = "response")
  res[,1]
}
predfun_glm_prep_logit <- function(object, newdata){
  df <- recp_glm_prep %>% bake(new_data = newdata)
  res <- object %>% predict(newx = as.matrix(df), type = "link")
  res[,1] #ベクトルにしておかないとfastshapの計算に失敗する
}

score <- calc_score(model_glm_prep, predfun_glm_prep, df_test_x, df_test_y)
df_scores <- df_scores %>% bind_rows(tibble(model = "glm_prep", auc = score$auc, logloss = score$logloss))

score$auc_plot %>% plot()
cat("auc:", score$auc, "logloss:", score$logloss)
```

#### rangerによるランダムフォレスト

Tree SHAPが使用できる他の例として、rangerパッケージのランダムフォレストを用意します。

```{r ranger_fit}
set.seed(2024)
df_train_ranger <- df_train
df_train_ranger$insurance <- 2 - as.numeric(df_train_ranger$insurance)
model_ranger <- ranger::ranger(formula = insurance ~ ., data = df_train_ranger, 
                               importance = 'none', #probability = TRUE,
                               num.trees = 100, min.node.size = 40, mtry = 4)
#分類問題の場合はprobability = TRUEとすべきだが、treeshap::unifyでエラーとなるため通常の回帰モデルとする

predfun_ranger <- function(object, newdata){
  res <- object %>% predict(data = newdata)
  res$predictions
}
predfun_ranger_logit <- function(object, newdata){ #predict関数の結果をロジット変換する関数
  predfun_ranger(object, newdata) %>% logit()
}

score <- calc_score(model_ranger, predfun_ranger, df_test_x, df_test_y)
df_scores <- df_scores %>% bind_rows(tibble(model = "ranger", auc = score$auc, logloss = score$logloss))

score$auc_plot %>% plot()
cat("auc:", score$auc, "logloss:", score$logloss)
```

#### 予測モデルの精度比較

本稿の主題を外れるため、各予測モデルの解釈を比較したりはしませんが、
いずれもうまく学習できているということを確かめるために
XGBoostと比較しても精度があまり変わらないということを確認しておきます。

```{r df_scores}
df_scores
```


### 計算時間比較



```{r comp_dput, eval=FALSE, include=FALSE}
dput(results)
```

```{r comp_str, include=FALSE}
results <- structure(list(model = c("glm", "glm", "glm", "glm", "glm", "glm", 
"glm", "glm", "glm", "glm", "glm", "glm", "glm", "glm", "glm", 
"glm", "glm", "glm", "glm", "glm", "glm", "glm", "glm_prep", 
"glm_prep", "glm_prep", "glm_prep", "glm_prep", "glm_prep", "glm_prep", 
"glm_prep", "glm_prep", "glm_prep", "glm_prep", "glm_prep", "glm_prep", 
"glm_prep", "glm_prep", "glm_prep", "glm_prep", "glm_prep", "glm_prep", 
"glm_prep", "glm_prep", "glm_prep", "xgboost", "xgboost", "xgboost", 
"xgboost", "xgboost", "xgboost", "xgboost", "xgboost", "xgboost", 
"xgboost", "xgboost", "xgboost", "xgboost", "xgboost", "xgboost", 
"xgboost", "xgboost", "xgboost", "xgboost", "xgboost", "xgboost", 
"xgboost", "ranger", "ranger", "ranger", "ranger", "ranger", 
"ranger", "ranger", "ranger", "ranger", "ranger", "ranger", "ranger", 
"ranger", "ranger", "ranger", "ranger", "ranger", "ranger", "ranger", 
"ranger", "ranger", "ranger", "xgboost", "xgboost", "xgboost", 
"xgboost", "xgboost", "ranger", "ranger", "ranger", "ranger", 
"ranger"), method = c("kernelshap", "kernelshap", "kernelshap", 
"kernelshap", "kernelshap", "kernelshap", "kernelshap", "kernelshap", 
"kernelshap", "fastshap", "fastshap", "fastshap", "fastshap", 
"fastshap", "fastshap", "fastshap", "fastshap", "fastshap", "fastshap", 
"fastshap", "fastshap", "fastshap", "kernelshap", "kernelshap", 
"kernelshap", "kernelshap", "kernelshap", "kernelshap", "kernelshap", 
"kernelshap", "kernelshap", "fastshap", "fastshap", "fastshap", 
"fastshap", "fastshap", "fastshap", "fastshap", "fastshap", "fastshap", 
"fastshap", "fastshap", "fastshap", "fastshap", "kernelshap", 
"kernelshap", "kernelshap", "kernelshap", "kernelshap", "kernelshap", 
"kernelshap", "kernelshap", "kernelshap", "fastshap", "fastshap", 
"fastshap", "fastshap", "fastshap", "fastshap", "fastshap", "fastshap", 
"fastshap", "fastshap", "fastshap", "fastshap", "fastshap", "kernelshap", 
"kernelshap", "kernelshap", "kernelshap", "kernelshap", "kernelshap", 
"kernelshap", "kernelshap", "kernelshap", "fastshap", "fastshap", 
"fastshap", "fastshap", "fastshap", "fastshap", "fastshap", "fastshap", 
"fastshap", "fastshap", "fastshap", "fastshap", "fastshap", "treeshap", 
"treeshap", "treeshap", "treeshap", "treeshap", "treeshap", "treeshap", 
"treeshap", "treeshap", "treeshap"), nrow_shap = c(50, 100, 150, 
200, 250, 50, 50, 50, 50, 50, 200, 450, 800, 1250, 50, 50, 50, 
50, 50, 50, 50, 50, 50, 100, 150, 200, 250, 50, 50, 50, 50, 50, 
200, 450, 800, 1250, 50, 50, 50, 50, 50, 50, 50, 50, 50, 100, 
150, 200, 250, 50, 50, 50, 50, 50, 200, 450, 800, 1250, 50, 50, 
50, 50, 50, 50, 50, 50, 50, 100, 150, 200, 250, 50, 50, 50, 50, 
50, 200, 450, 800, 1250, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
200, 450, 800, 1250, 50, 200, 450, 800, 1250), nrow_shapbg = c(50, 
50, 50, 50, 50, 100, 150, 200, 250, 50, 50, 50, 50, 50, 200, 
450, 800, 1250, 50, 50, 50, 50, 50, 50, 50, 50, 50, 100, 150, 
200, 250, 50, 50, 50, 50, 50, 200, 450, 800, 1250, 50, 50, 50, 
50, 50, 50, 50, 50, 50, 100, 150, 200, 250, 50, 50, 50, 50, 50, 
200, 450, 800, 1250, 50, 50, 50, 50, 50, 50, 50, 50, 50, 100, 
150, 200, 250, 50, 50, 50, 50, 50, 200, 450, 800, 1250, 50, 50, 
50, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), nsim = c(0, 0, 0, 0, 0, 
0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 30, 40, 50, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
20, 30, 40, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 10, 10, 10, 10, 
10, 10, 10, 10, 20, 30, 40, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 
10, 10, 10, 10, 10, 10, 10, 10, 20, 30, 40, 50, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0), time = c(2, 2.38999999999942, 3.26999999998952, 
4.02000000000407, 5.0399999999936, 1.52000000000407, 3.90000000000873, 
2.72000000000116, 3.01999999998952, 0.980000000010477, 0.929999999993015, 
1.02999999999884, 1.14999999999418, 1.28000000001339, 0.819999999992433, 
0.860000000000582, 0.860000000000582, 0.899999999994179, 1.60000000000582, 
2.32000000000698, 3.18999999998778, 3.91000000000349, 22.5800000000017, 
40.3899999999994, 64.0899999999965, 83.1699999999983, 102.860000000001, 
40.1300000000047, 62.3899999999994, 71.6399999999994, 84.3099999999977, 
21.0299999999988, 22.0200000000041, 22.1100000000006, 24.8100000000122, 
25.8300000000017, 21.4099999999889, 21.8600000000006, 21.3499999999913, 
21.5800000000017, 43.2800000000134, 65.0599999999977, 85.8100000000122, 
107.37999999999, 1.44999999999709, 2.74000000000524, 3.94999999999709, 
5.33000000000175, 6.58999999999651, 2.30000000000291, 2.30999999999767, 
2.86000000000058, 3.13999999999942, 1.68000000000757, 1.69999999999709, 
1.88000000000466, 1.97999999999593, 2.22000000000116, 1.63000000000466, 
1.64999999999418, 1.69000000000233, 1.77999999999884, 3.27000000000407, 
4.82000000000698, 6.38000000000466, 8, 7.80999999999767, 15.1599999999889, 
23.0899999999965, 31.5100000000093, 39.1599999999889, 14.2799999999988, 
21.7100000000064, 27.929999999993, 35.8600000000006, 2.80999999999767, 
2.98000000001048, 3.34999999999127, 4.22000000000116, 5.80999999999767, 
2.7899999999936, 3.22000000000116, 2.84000000001106, 2.89999999999418, 
5.5399999999936, 8.24000000000524, 11.0899999999965, 13.8899999999994, 
0.0600000000122236, 0.0599999999976717, 0.110000000000582, 0.139999999999418, 
0.19999999999709, 0.539999999993597, 2.44000000000233, 7.69999999999709, 
11.8300000000017, 18.9300000000076), id = c("glm,kernelshap,50,50,0", 
"glm,kernelshap,100,50,0", "glm,kernelshap,150,50,0", "glm,kernelshap,200,50,0", 
"glm,kernelshap,250,50,0", "glm,kernelshap,50,100,0", "glm,kernelshap,50,150,0", 
"glm,kernelshap,50,200,0", "glm,kernelshap,50,250,0", "glm,fastshap,50,50,10", 
"glm,fastshap,200,50,10", "glm,fastshap,450,50,10", "glm,fastshap,800,50,10", 
"glm,fastshap,1250,50,10", "glm,fastshap,50,200,10", "glm,fastshap,50,450,10", 
"glm,fastshap,50,800,10", "glm,fastshap,50,1250,10", "glm,fastshap,50,50,20", 
"glm,fastshap,50,50,30", "glm,fastshap,50,50,40", "glm,fastshap,50,50,50", 
"glm_prep,kernelshap,50,50,0", "glm_prep,kernelshap,100,50,0", 
"glm_prep,kernelshap,150,50,0", "glm_prep,kernelshap,200,50,0", 
"glm_prep,kernelshap,250,50,0", "glm_prep,kernelshap,50,100,0", 
"glm_prep,kernelshap,50,150,0", "glm_prep,kernelshap,50,200,0", 
"glm_prep,kernelshap,50,250,0", "glm_prep,fastshap,50,50,10", 
"glm_prep,fastshap,200,50,10", "glm_prep,fastshap,450,50,10", 
"glm_prep,fastshap,800,50,10", "glm_prep,fastshap,1250,50,10", 
"glm_prep,fastshap,50,200,10", "glm_prep,fastshap,50,450,10", 
"glm_prep,fastshap,50,800,10", "glm_prep,fastshap,50,1250,10", 
"glm_prep,fastshap,50,50,20", "glm_prep,fastshap,50,50,30", "glm_prep,fastshap,50,50,40", 
"glm_prep,fastshap,50,50,50", "xgboost,kernelshap,50,50,0", "xgboost,kernelshap,100,50,0", 
"xgboost,kernelshap,150,50,0", "xgboost,kernelshap,200,50,0", 
"xgboost,kernelshap,250,50,0", "xgboost,kernelshap,50,100,0", 
"xgboost,kernelshap,50,150,0", "xgboost,kernelshap,50,200,0", 
"xgboost,kernelshap,50,250,0", "xgboost,fastshap,50,50,10", "xgboost,fastshap,200,50,10", 
"xgboost,fastshap,450,50,10", "xgboost,fastshap,800,50,10", "xgboost,fastshap,1250,50,10", 
"xgboost,fastshap,50,200,10", "xgboost,fastshap,50,450,10", "xgboost,fastshap,50,800,10", 
"xgboost,fastshap,50,1250,10", "xgboost,fastshap,50,50,20", "xgboost,fastshap,50,50,30", 
"xgboost,fastshap,50,50,40", "xgboost,fastshap,50,50,50", "ranger,kernelshap,50,50,0", 
"ranger,kernelshap,100,50,0", "ranger,kernelshap,150,50,0", "ranger,kernelshap,200,50,0", 
"ranger,kernelshap,250,50,0", "ranger,kernelshap,50,100,0", "ranger,kernelshap,50,150,0", 
"ranger,kernelshap,50,200,0", "ranger,kernelshap,50,250,0", "ranger,fastshap,50,50,10", 
"ranger,fastshap,200,50,10", "ranger,fastshap,450,50,10", "ranger,fastshap,800,50,10", 
"ranger,fastshap,1250,50,10", "ranger,fastshap,50,200,10", "ranger,fastshap,50,450,10", 
"ranger,fastshap,50,800,10", "ranger,fastshap,50,1250,10", "ranger,fastshap,50,50,20", 
"ranger,fastshap,50,50,30", "ranger,fastshap,50,50,40", "ranger,fastshap,50,50,50", 
"xgboost,treeshap,50,0,0", "xgboost,treeshap,200,0,0", "xgboost,treeshap,450,0,0", 
"xgboost,treeshap,800,0,0", "xgboost,treeshap,1250,0,0", "ranger,treeshap,50,0,0", 
"ranger,treeshap,200,0,0", "ranger,treeshap,450,0,0", "ranger,treeshap,800,0,0", 
"ranger,treeshap,1250,0,0")), class = c("tbl_df", "tbl", "data.frame"
), row.names = c(NA, -98L))
```

ここまでに用意した4つのモデル（XGBoost、rangerによるランダムフォレスト、GLM、特徴量エンジニアリング付GLM）に対して、
fastshap、kernelshap、treeshapによるSHAPの計算時間を比較してみます。

SHAPを計算するサンプル数を増やした時に計算時間がどのように変化するかをプロットすると次のとおり。
（treeshap以外で使用する`nrow_shapbg`は50、fastshapの試行回数は10）

サンプル数を増やしてもfastshapはあまり計算時間が増えませんが、
kernelshapは比例的に計算時間が増加します。
treeshapは非常に高速ですが、rangerではツリーの構造のためなのか、サンプル数を増やすとfastshapと逆転します。

特徴量エンジニアリング付きGLM（`glm_prep`）は予測関数を呼び出すたびに前処理を実行するため、
他のモデルと比べて計算時間が長くなっています。

```{r comp_nrow_shap}
ggplot(data = results %>% dplyr::filter(nrow_shapbg <= 50, nsim <= 10),
       mapping = aes(x = nrow_shap, y = time, color = model, linetype = method)) +
  geom_line()
```

特徴量エンジニアリング付きGLMを除くと次のとおり。

```{r comp_nrow_shap_1}
ggplot(data = results %>% dplyr::filter(nrow_shapbg <= 50, nsim <= 10, model != "glm_prep"),
       mapping = aes(x = nrow_shap, y = time, color = model, linetype = method)) +
  geom_line()
```

さらにXGBoostに着目すると次のとおり。

```{r comp_nrow_shap_xgb}
ggplot(data = results %>% dplyr::filter(nrow_shapbg <= 50, nsim <= 10, model == "xgboost"),
       mapping = aes(x = nrow_shap, y = time, color = model, linetype = method)) +
  geom_line()
```

横軸を`nrow_shapbg`（「入力しない説明変数」のためにランダムで選ぶ元になるサンプル数）とすると次のとおり。
kernelshapではおおむね件数に比例して計算時間が増加しています。
一方fastshapではSHAPを計算するサンプル数ほど計算時間との関係性が明確ではありませんでした。

```{r comp_nrow_shapbp}
ggplot(data = results %>% dplyr::filter(nrow_shap == 50, nrow_shapbg >= 50, nsim <= 10),
       mapping = aes(x = nrow_shapbg, y = time, color = model, linetype = method)) +
  geom_line()
```

fastshapの試行回数を横軸にとると、計算時間は試行回数と正比例していることがわかります。

```{r comp_nsim}
ggplot(data = results %>% dplyr::filter(nrow_shap == 50, nrow_shapbg == 50, nsim >= 10),
       mapping = aes(x = nsim, y = time, color = model, linetype = method)) +
  geom_line()
```

参考までに、上記グラフを作成するためのコードは次のとおりです。


```{r comp_modelsets, eval=FALSE}
#計算時間比較をしたいモデルの定義
modelsets <- list()

modelsets$glm <- list(object = model_glm, predfun = predfun_glm_logit)
modelsets$glm_prep <- list(object = model_glm_prep, predfun = predfun_glm_prep_logit)
modelsets$xgboost <- list(object = model_xgboost, predfun = predfun_xgboost_logit)
modelsets$ranger <- list(object = model_ranger, predfun = predfun_ranger_logit)
```

```{r comp_grid, eval=FALSE}
#計算パターンの定義
grid <- bind_rows(
          tidyr::expand_grid(
            model = c("glm", "glm_prep", "xgboost", "ranger"),
            bind_rows(
              tidyr::expand_grid(
                method = "kernelshap",
                bind_rows(tidyr::expand_grid(nrow_shap = seq(1,5)*50, nrow_shapbg = 50, nsim = 10),
                          tidyr::expand_grid(nrow_shap = 50, nrow_shapbg = seq(2,5)*50, nsim = 10))
              ),
              tidyr::expand_grid(
                method = "fastshap",
                bind_rows(tidyr::expand_grid(nrow_shap = seq(1,5)^2*50, nrow_shapbg = 50, nsim = 10),
                          tidyr::expand_grid(nrow_shap = 50, nrow_shapbg = seq(2,5)^2*50, nsim = 10),
                          tidyr::expand_grid(nrow_shap = 50, nrow_shapbg = 50, nsim = seq(2,5)*10))
              )
            )
          ),
          tidyr::expand_grid(
            model = c("xgboost", "ranger"),
            tidyr::expand_grid(
              tidyr::expand_grid(
                method = "treeshap",
                bind_rows(tidyr::expand_grid(nrow_shap = seq(1,5)^2*50, nrow_shapbg = 0, nsim = 10))
              )
            )
          )
        )
```

```{r comp_calc, eval=FALSE}
#計算パターン1つに対して計算時間を測る関数
calc_shap <- function(object, predfun, method, nrow_shap = 500, nrow_shapbg = 60, nsim = 1){
  t1 <- proc.time()
  
  set.seed(2024)
  df_shap <- df_train[sample(nrow(df_train), nrow_shap), ]
  df_shap_x <- df_shap %>% dplyr::select(-insurance)
  
  set.seed(2024+1)
  df_shapbg <- df_train[sample(nrow(df_train), nrow_shapbg), ]
  df_shapbg_x <- df_shapbg %>% dplyr::select(-insurance)

  nsim_res <- 0
  nrow_shapbg_res <- nrow_shapbg

  if(method == "fastshap"){
    shap_fs <- fastshap::explain(object, 
                                 X = df_shapbg_x, 
                                 newdata = as.data.frame(df_shap_x), 
                                 pred_wrapper = predfun, nsim = nsim)
    sv <- shapviz(shap_fs, X = df_shap_x)
    nsim_res <- nsim
  }else if(method == "treeshap"){
    obj_uni <- treeshap::unify(object, df_shap_x)
    shap_ts <- treeshap::treeshap(obj_uni, x = df_shap_x)
    sv <- shapviz(shap_ts)
    nrow_shapbg_res <- 0
  }else if(method == "kernelshap"){
    shap_ks <- kernelshap(object, X = df_shap_x, bg_X = df_shapbg_x, pred_fun = predfun)
    sv <- shapviz(shap_ks)
  }
  plot <- sv_importance(sv, kind = "beeswarm")
  
  t2 <- proc.time()
  t0 <- (t2-t1)[3]
  names(t0) <- NULL
  return(list(method = method, nrow_shap = nrow_shap, nrow_shapbg = nrow_shapbg_res,
              nsim = nsim_res, sv = sv, sv_importance = plot, time = t0))
}
```


```{r comp_do, eval=FALSE}
#実際に計算時間の計測を行うループ
results <- tibble()
results_plots <- list()
undebug(calc_shap)
for(r in 1:nrow(grid)){
  model <- grid$model[[r]]
  res <- calc_shap(object = modelsets[[model]]$object,
            predfun = modelsets[[model]]$predfun,
            method = grid$method[[r]],
            nrow_shap = grid$nrow_shap[[r]],
            nrow_shapbg = grid$nrow_shapbg[[r]],
            nsim = grid$nsim[[r]])
  rw <- list()
  rw$model <- model
  rw$method <- res$method
  rw$nrow_shap <- res$nrow_shap
  rw$nrow_shapbg <- res$nrow_shapbg
  rw$nsim <- res$nsim
  rw$time <- res$time
  rw$id <- paste(rw$model, rw$method, rw$nrow_shap, rw$nrow_shapbg, rw$nsim, sep = ",")
  results <- bind_rows(results, as.tibble(rw))
  
  results_plots[[rw$id]] <- res
  print(paste(rw$id, rw$time))
}
```




## 参考文献

::: {#refs}
:::
